<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ble_app_template_freertos.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ble_app_template_freertos.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Fri Jan 03 16:10:35 2025
<BR><P>
<H3>Maximum Stack Usage =       1264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
app_assert_warn_cb &rArr; app_assert_info_output &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">NMI_Handler</a><BR>
 <LI><a href="#[23]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">DebugMon_Handler</a><BR>
 <LI><a href="#[25]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">SysTick_Handler</a><BR>
 <LI><a href="#[20]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">BusFault_Handler</a><BR>
 <LI><a href="#[1f]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">MemManage_Handler</a><BR>
 <LI><a href="#[21]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">UsageFault_Handler</a><BR>
 <LI><a href="#[134]">dfu_schedule_task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[134]">dfu_schedule_task</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[bd]">AON_EXT_IRQHandler</a> from app_io.o(RAM_CODE) referenced from app_io.o(i.app_io_init)
 <LI><a href="#[115]">APP_I2C_0_evt_handler</a> from qmi8658_gr55xx.o(i.APP_I2C_0_evt_handler) referenced from qmi8658_gr55xx.o(i.qmi8658_hw_init)
 <LI><a href="#[114]">APP_I2C_3_evt_handler</a> from qmc6309_gr55xx.o(i.APP_I2C_3_evt_handler) referenced from qmc6309_gr55xx.o(i.qmc6309_hw_init)
 <LI><a href="#[108]">BLESLP_IRQHandler</a> from rwip_sleep_common.o(RAM_CODE) referenced from platform_sdk.o(i.platform_sdk_init)
 <LI><a href="#[cc]">BLE_IRQHandler</a> from rom_symbol.txt(ABSOLUTE) referenced from system_sdk_patch.o(i.ble_stack_inner_init)
 <LI><a href="#[123]">BLE_IRQHandler_func</a> from rom_symbol.txt(ABSOLUTE) referenced from rwip_sleep_patch.o(i.rwip_sleep_init_with_stack_init)
 <LI><a href="#[109]">BLE_PWR_ON_IRQHandler</a> from rom_symbol.txt(ABSOLUTE) referenced from platform_sdk.o(i.platform_sdk_init)
 <LI><a href="#[122]">BLE_PWR_ON_IRQHandler_func_patch</a> from rwip_sleep_patch.o(i.BLE_PWR_ON_IRQHandler_func_patch) referenced from rwip_sleep_patch.o(i.rwip_sleep_init_with_stack_init)
 <LI><a href="#[cb]">BLE_SDK_Handler</a> from rom_symbol.txt(ABSOLUTE) referenced from system_sdk_patch.o(i.ble_stack_inner_init)
 <LI><a href="#[124]">BLE_SDK_Handler_func</a> from rom_symbol.txt(ABSOLUTE) referenced from rwip_sleep_patch.o(i.rwip_sleep_init_with_stack_init)
 <LI><a href="#[20]">BusFault_Handler</a> from gr_interrupt.o(i.BusFault_Handler) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[20]">BusFault_Handler</a> from gr_interrupt.o(i.BusFault_Handler) referenced from startup.o(RESET)
 <LI><a href="#[cd]">CLK_CALIB_IRQHandler</a> from platform_clock_calib.o(i.CLK_CALIB_IRQHandler) referenced from platform_clock_calib.o(i.boot_clock_calib_start)
 <LI><a href="#[cd]">CLK_CALIB_IRQHandler</a> from platform_clock_calib.o(i.CLK_CALIB_IRQHandler) referenced from platform_clock_calib.o(i.hfosc_clk_calib_inner_start_new)
 <LI><a href="#[cd]">CLK_CALIB_IRQHandler</a> from platform_clock_calib.o(i.CLK_CALIB_IRQHandler) referenced from platform_clock_calib.o(i.low_power_clock_calib_start)
 <LI><a href="#[d1]">CPLL_DRIFT_IRQHandler</a> from platform_pmu.o(i.CPLL_DRIFT_IRQHandler) referenced from platform_pmu.o(i.cpll_calibration_init)
 <LI><a href="#[23]">DebugMon_Handler</a> from startup.o(.text) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[23]">DebugMon_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[bb]">EXT0_IRQHandler</a> from app_io.o(RAM_CODE) referenced from app_io.o(i.app_io_init)
 <LI><a href="#[bc]">EXT1_IRQHandler</a> from app_io.o(RAM_CODE) referenced from app_io.o(i.app_io_init)
 <LI><a href="#[be]">EXT2_IRQHandler</a> from app_io.o(RAM_CODE) referenced from app_io.o(i.app_io_init)
 <LI><a href="#[1e]">HardFault_Handler</a> from gr_interrupt.o(RAM_CODE) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[1e]">HardFault_Handler</a> from gr_interrupt.o(RAM_CODE) referenced from startup.o(RESET)
 <LI><a href="#[b5]">I2C0_IRQHandler</a> from app_i2c.o(RAM_CODE) referenced from app_i2c.o(i.app_i2c_init)
 <LI><a href="#[b6]">I2C1_IRQHandler</a> from app_i2c.o(RAM_CODE) referenced from app_i2c.o(i.app_i2c_init)
 <LI><a href="#[b7]">I2C2_IRQHandler</a> from app_i2c.o(RAM_CODE) referenced from app_i2c.o(i.app_i2c_init)
 <LI><a href="#[b8]">I2C3_IRQHandler</a> from app_i2c.o(RAM_CODE) referenced from app_i2c.o(i.app_i2c_init)
 <LI><a href="#[b9]">I2C4_IRQHandler</a> from app_i2c.o(RAM_CODE) referenced from app_i2c.o(i.app_i2c_init)
 <LI><a href="#[ba]">I2C5_IRQHandler</a> from app_i2c.o(RAM_CODE) referenced from app_i2c.o(i.app_i2c_init)
 <LI><a href="#[1f]">MemManage_Handler</a> from gr_interrupt.o(i.MemManage_Handler) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[1f]">MemManage_Handler</a> from gr_interrupt.o(i.MemManage_Handler) referenced from startup.o(RESET)
 <LI><a href="#[1d]">NMI_Handler</a> from startup.o(.text) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[1d]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[24]">PendSV_Handler</a> from port.o(.emb_text) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[24]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup.o(RESET)
 <LI><a href="#[132]">RTC1_IRQHandler</a> from port_pm.o(RAM_CODE) referenced from port_pm.o(i.vPortSetupTimerInterrupt)
 <LI><a href="#[1c]">Reset_Handler</a> from startup.o(.text) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[1c]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12c]">SLPTIMER_IRQHandler</a> from app_timer.o(i.SLPTIMER_IRQHandler) referenced from app_timer.o(i.sleep_timer_handler_register)
 <LI><a href="#[c2]">SPI_M_IRQHandler</a> from app_spi.o(RAM_CODE) referenced from app_spi.o(i.app_spi_init)
 <LI><a href="#[c1]">SPI_S_IRQHandler</a> from app_spi.o(RAM_CODE) referenced from app_spi.o(i.app_spi_init)
 <LI><a href="#[22]">SVC_Handler</a> from gr_interrupt.o(RAM_CODE) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[22]">SVC_Handler</a> from gr_interrupt.o(RAM_CODE) referenced from startup.o(RESET)
 <LI><a href="#[25]">SysTick_Handler</a> from startup.o(.text) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[25]">SysTick_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[ad]">SystemInit</a> from gr_system.o(i.SystemInit) referenced from startup.o(.text)
 <LI><a href="#[c3]">UART0_IRQHandler</a> from app_uart.o(i.UART0_IRQHandler) referenced from app_uart.o(i.app_uart_init)
 <LI><a href="#[c4]">UART1_IRQHandler</a> from app_uart.o(i.UART1_IRQHandler) referenced from app_uart.o(i.app_uart_init)
 <LI><a href="#[c5]">UART2_IRQHandler</a> from app_uart.o(i.UART2_IRQHandler) referenced from app_uart.o(i.app_uart_init)
 <LI><a href="#[c6]">UART3_IRQHandler</a> from app_uart.o(i.UART3_IRQHandler) referenced from app_uart.o(i.app_uart_init)
 <LI><a href="#[c7]">UART4_IRQHandler</a> from app_uart.o(i.UART4_IRQHandler) referenced from app_uart.o(i.app_uart_init)
 <LI><a href="#[c8]">UART5_IRQHandler</a> from app_uart.o(i.UART5_IRQHandler) referenced from app_uart.o(i.app_uart_init)
 <LI><a href="#[21]">UsageFault_Handler</a> from gr_interrupt.o(i.UsageFault_Handler) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[21]">UsageFault_Handler</a> from gr_interrupt.o(i.UsageFault_Handler) referenced from startup.o(RESET)
 <LI><a href="#[b3]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[b1]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[af]">_snputc</a> from _snputc.o(.text) referenced 2 times from vsnprintf.o(.text)
 <LI><a href="#[b0]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[26]">app_assert_err_cb</a> from app_assert.o(i.app_assert_err_cb) referenced 2 times from app_assert.o(.data)
 <LI><a href="#[27]">app_assert_param_cb</a> from app_assert.o(i.app_assert_param_cb) referenced 2 times from app_assert.o(.data)
 <LI><a href="#[28]">app_assert_warn_cb</a> from app_assert.o(i.app_assert_warn_cb) referenced 2 times from app_assert.o(.data)
 <LI><a href="#[b4]">app_spi_master_callback</a> from ads1299_gr55xx.o(i.app_spi_master_callback) referenced from ads1299_gr55xx.o(i.ads1299_hw_init)
 <LI><a href="#[d0]">app_uart_evt_handler</a> from board_bc.o(i.app_uart_evt_handler) referenced from board_bc.o(i.bsp_uart_init)
 <LI><a href="#[df]">bb_watch_timer_cbk_fcc_patch</a> from lld_test_patch.o(i.bb_watch_timer_cbk_fcc_patch) referenced from lld_test_patch.o(i.fcc_test_init_patch)
 <LI><a href="#[de]">bb_watch_timer_start_fcc_patch</a> from lld_test_patch.o(i.bb_watch_timer_start_fcc_patch) referenced from lld_test_patch.o(i.fcc_test_init_patch)
 <LI><a href="#[7e]">ble_client_enh_prf_init</a> from ble_profile_patch.o(i.ble_client_enh_prf_init) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[87]">ble_client_prf_init</a> from ble_profile_patch.o(i.ble_client_prf_init) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[125]">ble_core_sleep_ori</a> from rom_symbol.txt(ABSOLUTE) referenced from rwip_sleep_patch.o(i.rwip_sleep_init_with_stack_init)
 <LI><a href="#[103]">ble_evt_handler</a> from user_app.o(i.ble_evt_handler) referenced from main.o(i.main)
 <LI><a href="#[65]">ble_init_cplt_callback</a> from ble_event_patch.o(i.ble_init_cplt_callback) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[128]">ble_irq_handler_without_stack_init</a> from rwip_sleep_common.o(RAM_CODE) referenced from rwip_sleep_common.o(i.rwip_sleep_init_without_stack_init)
 <LI><a href="#[127]">ble_pwr_on_handler_without_stack_init</a> from rwip_sleep_common.o(i.ble_pwr_on_handler_without_stack_init) referenced from rwip_sleep_common.o(i.rwip_sleep_init_without_stack_init)
 <LI><a href="#[121]">ble_rwip_wakeup_patch</a> from rwip_sleep_patch.o(RAM_CODE) referenced from rwip_sleep_patch.o(i.rwip_sleep_init_with_stack_init)
 <LI><a href="#[ef]">ble_sdk_common_timeout_handler</a> from rom_symbol.txt(ABSOLUTE) referenced from ble_sdk_task_patch.o(i.host_to_sdk_msg_handler_patch)
 <LI><a href="#[14]">ble_sdk_gattc_extend_prf_cmp_evt_handler_patch</a> from ble_sdk_prf_client_enh_patch.o(i.ble_sdk_gattc_extend_prf_cmp_evt_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[15]">ble_sdk_gattc_extend_prf_event_ind_handler_patch</a> from ble_sdk_prf_client_enh_patch.o(i.ble_sdk_gattc_extend_prf_event_ind_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[16]">ble_sdk_gattc_extend_prf_sdp_srvc_ind_handler_patch</a> from ble_sdk_prf_client_enh_patch.o(i.ble_sdk_gattc_extend_prf_sdp_srvc_ind_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[129]">ble_sdk_handler_without_stack_init</a> from rwip_sleep_common.o(RAM_CODE) referenced from rwip_sleep_common.o(i.rwip_sleep_init_without_stack_init)
 <LI><a href="#[29]">ble_send_data</a> from dfu_port.o(i.ble_send_data) referenced 2 times from dfu_port.o(.data)
 <LI><a href="#[71]">ble_service_load_cb</a> from ble_profile_patch.o(i.ble_service_load_cb) referenced 4 times from ble_profile_patch.o(.data)
 <LI><a href="#[126]">ble_sleep_without_stack_init</a> from rwip_sleep_common.o(i.ble_sleep_without_stack_init) referenced from rwip_sleep_common.o(i.rwip_sleep_init_without_stack_init)
 <LI><a href="#[ce]">bsp_uart_flush</a> from board_bc.o(i.bsp_uart_flush) referenced from board_bc.o(i.bsp_log_init)
 <LI><a href="#[cf]">bsp_uart_send</a> from board_bc.o(i.bsp_uart_send) referenced from board_bc.o(i.bsp_log_init)
 <LI><a href="#[d2]">delay_us_dwt_patch</a> from gr55xx_delay_patch.o(RAM_CODE) referenced from gr55xx_delay_patch.o(i.delay_function_replace)
 <LI><a href="#[d8]">dfu_fw_info_get</a> from dfu_port.o(i.dfu_fw_info_get) referenced from dfu_port.o(i.dfu_port_init)
 <LI><a href="#[d7]">dfu_mode_set</a> from dfu_port.o(i.dfu_mode_set) referenced from dfu_port.o(i.dfu_port_init)
 <LI><a href="#[134]">dfu_schedule_task</a> from main.o(i.dfu_schedule_task) referenced from main.o(i.vStartTasks)
 <LI><a href="#[13a]">efuse_init</a> from gr_soc.o(i.efuse_init) referenced from gr_soc.o(.constdata)
 <LI><a href="#[ed]">efuse_xo_offset_get_func</a> from llm_hci_patch.o(i.efuse_xo_offset_get_func) referenced from llm_hci_patch.o(i.hci_le_test_param_set_func_replace)
 <LI><a href="#[ee]">efuse_xo_offset_set_func</a> from llm_hci_patch.o(i.efuse_xo_offset_set_func) referenced from llm_hci_patch.o(i.hci_le_test_param_set_func_replace)
 <LI><a href="#[db]">fast_clk_cali_binary_search_fine_code_cb</a> from platform_clock_calib.o(i.fast_clk_cali_binary_search_fine_code_cb) referenced from platform_clock_calib.o(i.fast_clk_cali_binary_search_fine_code_retry)
 <LI><a href="#[db]">fast_clk_cali_binary_search_fine_code_cb</a> from platform_clock_calib.o(i.fast_clk_cali_binary_search_fine_code_cb) referenced from platform_clock_calib.o(i.fast_clk_cali_binary_search_fine_code_start)
 <LI><a href="#[dc]">fast_clk_cali_easy_find_coarse_code_cb</a> from platform_clock_calib.o(i.fast_clk_cali_easy_find_coarse_code_cb) referenced from platform_clock_calib.o(i.fast_clk_cali_easy_find_coarse_code_retry)
 <LI><a href="#[dd]">fast_clk_cali_easy_find_fine_code_cb</a> from platform_clock_calib.o(i.fast_clk_cali_easy_find_fine_code_cb) referenced from platform_clock_calib.o(i.fast_clk_cali_easy_find_fine_code_retry)
 <LI><a href="#[dd]">fast_clk_cali_easy_find_fine_code_cb</a> from platform_clock_calib.o(i.fast_clk_cali_easy_find_fine_code_cb) referenced from platform_clock_calib.o(i.fast_clk_cali_easy_find_fine_code_start)
 <LI><a href="#[f2]">find_new_msg_handler</a> from ke_task_patch.o(i.find_new_msg_handler) referenced from ke_task_patch.o(i.ke_task_func_replace)
 <LI><a href="#[13b]">first_class_task</a> from gr_soc.o(i.first_class_task) referenced from gr_soc.o(.constdata)
 <LI><a href="#[e5]">fpb_load_state_local</a> from sdk_fpb_mgmt.o(i.fpb_load_state_local) referenced from sdk_fpb_mgmt.o(i.gr5xx_fpb_init)
 <LI><a href="#[e6]">fpb_save_state_local</a> from sdk_fpb_mgmt.o(i.fpb_save_state_local) referenced from sdk_fpb_mgmt.o(i.gr5xx_fpb_init)
 <LI><a href="#[b2]">fputc</a> from app_log.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[5]">gap_activity_stopped_ind_handler_patch</a> from ble_sdk_gapm_patch.o(i.gap_activity_stopped_ind_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[38]">gap_adv_data_update_cb</a> from ble_event_patch.o(i.gap_adv_data_update_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[3b]">gap_adv_report_ind_cb</a> from ble_event_patch.o(i.gap_adv_report_ind_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[35]">gap_adv_start_cb</a> from ble_event_patch.o(i.gap_adv_start_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[36]">gap_adv_stop_cb</a> from ble_event_patch.o(i.gap_adv_stop_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[42]">gap_auto_connection_timeout_cb</a> from ble_event_patch.o(i.gap_auto_connection_timeout_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[4b]">gap_conn_iq_report_cb</a> from ble_event_patch.o(i.gap_conn_iq_report_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[41]">gap_connect_cancel_cb</a> from ble_event_patch.o(i.gap_connect_cancel_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[3f]">gap_connect_cb</a> from ble_event_patch.o(i.gap_connect_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[46]">gap_connection_info_get_cb</a> from ble_event_patch.o(i.gap_connection_info_get_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[d]">gap_connection_req_ind_handler_patch</a> from ble_sdk_gapc_patch.o(i.gap_connection_req_ind_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[44]">gap_connection_update_cb</a> from ble_event_patch.o(i.gap_connection_update_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[45]">gap_connection_update_req_cb</a> from ble_event_patch.o(i.gap_connection_update_req_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[4c]">gap_connless_iq_report_cb</a> from ble_event_patch.o(i.gap_connless_iq_report_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[34]">gap_dev_info_get_cb</a> from ble_event_patch.o(i.gap_dev_info_get_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[4a]">gap_device_info_set_cb</a> from ble_event_patch.o(i.gap_device_info_set_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[54]">gap_dft_subrate_set_cb</a> from ble_event_patch.o(i.gap_dft_subrate_set_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[40]">gap_disconnect_cb</a> from ble_event_patch.o(i.gap_disconnect_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[e]">gap_disconnect_ind_handler_patch</a> from ble_sdk_gapc_patch.o(i.gap_disconnect_ind_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[e0]">gap_init_fsm_next_func_patch</a> from ble_sdk_gapm_patch.o(i.gap_init_fsm_next_func_patch) referenced from ble_sdk_gapm_patch.o(i.gap_init_fsm_next_func_replace)
 <LI><a href="#[48]">gap_le_pkt_size_info_cb</a> from ble_event_patch.o(i.gap_le_pkt_size_info_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[4d]">gap_local_tx_power_read_cb</a> from ble_event_patch.o(i.gap_local_tx_power_read_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[31]">gap_param_set_cb</a> from ble_event_patch.o(i.gap_param_set_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[50]">gap_path_loss_threshold_report_cb</a> from ble_event_patch.o(i.gap_path_loss_threshold_report_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[47]">gap_peer_info_get_cb</a> from ble_event_patch.o(i.gap_peer_info_get_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[43]">gap_peer_name_ind_cb</a> from ble_event_patch.o(i.gap_peer_name_ind_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[33]">gap_phy_update_cb</a> from ble_event_patch.o(i.gap_phy_update_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[32]">gap_psm_manager_cb</a> from ble_event_patch.o(i.gap_psm_manager_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[53]">gap_ranging_cmp_ind_cb</a> from ble_event_patch.o(i.gap_ranging_cmp_ind_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[51]">gap_ranging_ind_cb</a> from ble_event_patch.o(i.gap_ranging_ind_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[52]">gap_ranging_sample_report_cb</a> from ble_event_patch.o(i.gap_ranging_sample_report_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[4e]">gap_remote_tx_power_read_cb</a> from ble_event_patch.o(i.gap_remote_tx_power_read_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[49]">gap_rslv_addr_read_cb</a> from ble_event_patch.o(i.gap_rslv_addr_read_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[37]">gap_scan_req_ind_cb</a> from ble_event_patch.o(i.gap_scan_req_ind_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[39]">gap_scan_start_cb</a> from ble_event_patch.o(i.gap_scan_start_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[3a]">gap_scan_stop_cb</a> from ble_event_patch.o(i.gap_scan_stop_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[3d]">gap_stop_sync_cb</a> from ble_event_patch.o(i.gap_stop_sync_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[55]">gap_subrate_chg_ind_cb</a> from ble_event_patch.o(i.gap_subrate_chg_ind_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[3c]">gap_sync_establish_cb</a> from ble_event_patch.o(i.gap_sync_establish_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[3e]">gap_sync_lost_cb</a> from ble_event_patch.o(i.gap_sync_lost_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[4f]">gap_tx_power_change_report_cb</a> from ble_event_patch.o(i.gap_tx_power_change_report_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[7]">gapc_hci_handler_patch</a> from gapc_hci_patch.o(i.gapc_hci_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[a]">gapm_activity_create_cmd_handler_patch</a> from gapm_actv_patch.o(i.gapm_activity_create_cmd_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[e1]">gapm_adv_check_param_func_patch</a> from gapm_adv_patch.o(i.gapm_adv_check_param_func_patch) referenced from gapm_adv_patch.o(i.gapm_adv_replace)
 <LI><a href="#[8]">gapm_hci_handler_patch</a> from gapm_task_patch.o(i.gapm_hci_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[e4]">gapm_per_sync_delete</a> from rom_symbol.txt(ABSOLUTE) referenced from gapm_per_sync_patch.o(i.gapm_per_sync_create_patch)
 <LI><a href="#[e2]">gapm_per_sync_start</a> from rom_symbol.txt(ABSOLUTE) referenced from gapm_per_sync_patch.o(i.gapm_per_sync_create_patch)
 <LI><a href="#[e3]">gapm_per_sync_stop_patch</a> from gapm_per_sync_patch.o(i.gapm_per_sync_stop_patch) referenced from gapm_per_sync_patch.o(i.gapm_per_sync_create_patch)
 <LI><a href="#[9]">gapm_set_dev_config_cmd_handler_patch</a> from gapm_cfg_patch.o(i.gapm_set_dev_config_cmd_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[56]">gatt_mtu_exchange_cb</a> from ble_event_patch.o(i.gatt_mtu_exchange_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[57]">gatt_prf_register_cb</a> from ble_event_patch.o(i.gatt_prf_register_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[60]">gattc_cache_update_cb</a> from ble_event_patch.o(i.gattc_cache_update_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[5b]">gattc_char_desc_disc_cb</a> from ble_event_patch.o(i.gattc_char_desc_disc_cb) referenced 4 times from ble_event_patch.o(.data)
 <LI><a href="#[5a]">gattc_char_disc_cb</a> from ble_event_patch.o(i.gattc_char_disc_cb) referenced 4 times from ble_event_patch.o(.data)
 <LI><a href="#[82]">gattc_enh_char_desc_disc_cb</a> from ble_event_patch.o(i.gattc_enh_char_desc_disc_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[81]">gattc_enh_char_disc_cb</a> from ble_event_patch.o(i.gattc_enh_char_disc_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[80]">gattc_enh_inc_srvc_disc_cb</a> from ble_event_patch.o(i.gattc_enh_inc_srvc_disc_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[85]">gattc_enh_ntf_ind_cb</a> from ble_event_patch.o(i.gattc_enh_ntf_ind_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[83]">gattc_enh_read_cb</a> from ble_event_patch.o(i.gattc_enh_read_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[86]">gattc_enh_srvc_browse_cb</a> from ble_event_patch.o(i.gattc_enh_srvc_browse_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[7f]">gattc_enh_srvc_disc_cb</a> from ble_event_patch.o(i.gattc_enh_srvc_disc_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[84]">gattc_enh_write_cb</a> from ble_event_patch.o(i.gattc_enh_write_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[59]">gattc_inc_srvc_disc_cb</a> from ble_event_patch.o(i.gattc_inc_srvc_disc_cb) referenced 4 times from ble_event_patch.o(.data)
 <LI><a href="#[5e]">gattc_ntf_ind_cb</a> from ble_event_patch.o(i.gattc_ntf_ind_cb) referenced 4 times from ble_event_patch.o(.data)
 <LI><a href="#[5c]">gattc_read_cb</a> from ble_event_patch.o(i.gattc_read_cb) referenced 4 times from ble_event_patch.o(.data)
 <LI><a href="#[5f]">gattc_srvc_browse_cb</a> from ble_event_patch.o(i.gattc_srvc_browse_cb) referenced 4 times from ble_event_patch.o(.data)
 <LI><a href="#[58]">gattc_srvc_disc_cb</a> from ble_event_patch.o(i.gattc_srvc_disc_cb) referenced 4 times from ble_event_patch.o(.data)
 <LI><a href="#[5d]">gattc_write_cb</a> from ble_event_patch.o(i.gattc_write_cb) referenced 4 times from ble_event_patch.o(.data)
 <LI><a href="#[76]">gatts_cccd_set_cb</a> from ble_event_patch.o(i.gatts_cccd_set_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[7c]">gatts_enh_cccd_set_cb</a> from ble_event_patch.o(i.gatts_enh_cccd_set_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[7d]">gatts_enh_mult_ntf_cb</a> from ble_event_patch.o(i.gatts_enh_mult_ntf_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[7b]">gatts_enh_ntf_ind_cb</a> from ble_event_patch.o(i.gatts_enh_ntf_ind_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[7a]">gatts_enh_prep_write_cb</a> from ble_event_patch.o(i.gatts_enh_prep_write_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[78]">gatts_enh_read_cb</a> from ble_event_patch.o(i.gatts_enh_read_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[79]">gatts_enh_write_cb</a> from ble_event_patch.o(i.gatts_enh_write_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[77]">gatts_mult_ntf_cb</a> from ble_event_patch.o(i.gatts_mult_ntf_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[75]">gatts_ntf_ind_cb</a> from ble_event_patch.o(i.gatts_ntf_ind_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[74]">gatts_prep_write_cb</a> from ble_event_patch.o(i.gatts_prep_write_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[72]">gatts_read_cb</a> from ble_event_patch.o(i.gatts_read_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[73]">gatts_write_cb</a> from ble_event_patch.o(i.gatts_write_cb) referenced 2 times from ble_profile_patch.o(.data)
 <LI><a href="#[d3]">get_info_replace</a> from dfu_port.o(i.get_info_replace) referenced from dfu_port.o(i.dfu_port_init)
 <LI><a href="#[143]">gr5xx_svc_process</a> from svc_handler.o(RAM_CODE) referenced from gr_interrupt.o(RAM_CODE)
 <LI><a href="#[8b]">hal_aon_gpio_callback</a> from app_io.o(i.hal_aon_gpio_callback) referenced 2 times from gr55xx_hal_aon_gpio.o(.data)
 <LI><a href="#[12e]">hal_clock_release_xo_osc_patch</a> from gr55xx_hal_clock_patch.o(i.hal_clock_release_xo_osc_patch) referenced from gr55xx_hal_clock_patch.o(i.sys_xo_hf_clock_switch_enable)
 <LI><a href="#[12f]">hal_clock_request_xo_osc_ori</a> from rom_symbol.txt(ABSOLUTE) referenced from gr55xx_hal_clock_patch.o(i.sys_xo_hf_clock_switch_enable)
 <LI><a href="#[ac]">hal_efuse_msp_deinit</a> from gr55xx_hal_efuse.o(i.hal_efuse_msp_deinit) referenced 2 times from gr55xx_hal_efuse.o(.data)
 <LI><a href="#[ab]">hal_efuse_msp_init</a> from gr55xx_hal_efuse.o(i.hal_efuse_msp_init) referenced 2 times from gr55xx_hal_efuse.o(.data)
 <LI><a href="#[111]">hal_exflash_enable_quad_patch</a> from gr55xx_hal_exflash_patch.o(RAM_CODE) referenced from gr55xx_hal_exflash_patch.o(i.platform_xqspi_env_init)
 <LI><a href="#[110]">hal_exflash_init_patch</a> from gr55xx_hal_exflash_patch.o(RAM_CODE) referenced from gr55xx_hal_exflash_patch.o(i.platform_xqspi_env_init)
 <LI><a href="#[2c]">hal_flash_erase</a> from rom_symbol.txt(ABSOLUTE) referenced 2 times from dfu_port.o(.data)
 <LI><a href="#[2d]">hal_flash_erase_chip</a> from rom_symbol.txt(ABSOLUTE) referenced 2 times from dfu_port.o(.data)
 <LI><a href="#[30]">hal_flash_get_info</a> from rom_symbol.txt(ABSOLUTE) referenced 2 times from dfu_port.o(.data)
 <LI><a href="#[2f]">hal_flash_get_security</a> from rom_symbol.txt(ABSOLUTE) referenced 2 times from dfu_port.o(.data)
 <LI><a href="#[2a]">hal_flash_read</a> from rom_symbol.txt(ABSOLUTE) referenced 2 times from dfu_port.o(.data)
 <LI><a href="#[2e]">hal_flash_set_security</a> from rom_symbol.txt(ABSOLUTE) referenced 2 times from dfu_port.o(.data)
 <LI><a href="#[2b]">hal_flash_write</a> from rom_symbol.txt(ABSOLUTE) referenced 2 times from dfu_port.o(.data)
 <LI><a href="#[8c]">hal_gpio_exti_callback</a> from app_io.o(i.hal_gpio_exti_callback) referenced 2 times from gr55xx_hal_gpio.o(.data)
 <LI><a href="#[94]">hal_i2c_abort_cplt_callback</a> from app_i2c.o(i.hal_i2c_abort_cplt_callback) referenced 2 times from gr55xx_hal_i2c.o(.data)
 <LI><a href="#[93]">hal_i2c_error_callback</a> from app_i2c.o(i.hal_i2c_error_callback) referenced 2 times from gr55xx_hal_i2c.o(.data)
 <LI><a href="#[90]">hal_i2c_master_rx_cplt_callback</a> from app_i2c.o(i.hal_i2c_master_rx_cplt_callback) referenced 2 times from gr55xx_hal_i2c.o(.data)
 <LI><a href="#[8f]">hal_i2c_master_tx_cplt_callback</a> from app_i2c.o(i.hal_i2c_master_tx_cplt_callback) referenced 2 times from gr55xx_hal_i2c.o(.data)
 <LI><a href="#[8e]">hal_i2c_msp_deinit</a> from gr55xx_hal_i2c.o(i.hal_i2c_msp_deinit) referenced 2 times from gr55xx_hal_i2c.o(.data)
 <LI><a href="#[8d]">hal_i2c_msp_init</a> from gr55xx_hal_i2c.o(i.hal_i2c_msp_init) referenced 2 times from gr55xx_hal_i2c.o(.data)
 <LI><a href="#[e8]">hal_i2c_resume_reg</a> from gr55xx_hal_i2c_patch.o(i.hal_i2c_resume_reg) referenced from gr55xx_hal_i2c_patch.o(i.hal_i2c_init_ext)
 <LI><a href="#[92]">hal_i2c_slave_rx_cplt_callback</a> from app_i2c.o(i.hal_i2c_slave_rx_cplt_callback) referenced 2 times from gr55xx_hal_i2c.o(.data)
 <LI><a href="#[91]">hal_i2c_slave_tx_cplt_callback</a> from app_i2c.o(i.hal_i2c_slave_tx_cplt_callback) referenced 2 times from gr55xx_hal_i2c.o(.data)
 <LI><a href="#[f1]">hal_i2c_suspend_reg</a> from gr55xx_hal_i2c_patch.o(i.hal_i2c_suspend_reg) referenced from gr55xx_hal_i2c_patch.o(i.i2c_updata_suspend_cb_local)
 <LI><a href="#[95]">hal_msio_exti_callback</a> from gr55xx_hal_msio.o(i.hal_msio_exti_callback) referenced 2 times from gr55xx_hal_msio.o(.data)
 <LI><a href="#[e9]">hal_pwr_sleep_timer_elapsed_callback</a> from app_timer.o(i.hal_pwr_sleep_timer_elapsed_callback) referenced from gr55xx_hal_pwr.o(i.hal_sleep_timer_config_and_start)
 <LI><a href="#[96]">hal_rtc_alarm_callback</a> from gr55xx_hal_rtc.o(i.hal_rtc_alarm_callback) referenced 2 times from gr55xx_hal_rtc.o(.data)
 <LI><a href="#[98]">hal_rtc_overflow_callback</a> from gr55xx_hal_rtc.o(i.hal_rtc_overflow_callback) referenced 2 times from gr55xx_hal_rtc.o(.data)
 <LI><a href="#[97]">hal_rtc_tick_callback</a> from port_pm.o(RAM_CODE) referenced 2 times from gr55xx_hal_rtc.o(.data)
 <LI><a href="#[9c]">hal_spi_abort_cplt_callback</a> from app_spi.o(i.hal_spi_abort_cplt_callback) referenced 2 times from gr55xx_hal_spi.o(.data)
 <LI><a href="#[9b]">hal_spi_error_callback</a> from app_spi.o(i.hal_spi_error_callback) referenced 2 times from gr55xx_hal_spi.o(.data)
 <LI><a href="#[9a]">hal_spi_msp_deinit</a> from gr55xx_hal_spi.o(i.hal_spi_msp_deinit) referenced 2 times from gr55xx_hal_spi.o(.data)
 <LI><a href="#[99]">hal_spi_msp_init</a> from gr55xx_hal_spi.o(i.hal_spi_msp_init) referenced 2 times from gr55xx_hal_spi.o(.data)
 <LI><a href="#[9d]">hal_spi_rx_cplt_callback</a> from app_spi.o(i.hal_spi_rx_cplt_callback) referenced 2 times from gr55xx_hal_spi.o(.data)
 <LI><a href="#[a0]">hal_spi_soft_cs_assert</a> from app_spi.o(i.hal_spi_soft_cs_assert) referenced 2 times from gr55xx_hal_spi.o(.data)
 <LI><a href="#[a1]">hal_spi_soft_cs_deassert</a> from app_spi.o(i.hal_spi_soft_cs_deassert) referenced 2 times from gr55xx_hal_spi.o(.data)
 <LI><a href="#[9e]">hal_spi_tx_cplt_callback</a> from app_spi.o(i.hal_spi_tx_cplt_callback) referenced 2 times from gr55xx_hal_spi.o(.data)
 <LI><a href="#[9f]">hal_spi_tx_rx_cplt_callback</a> from app_spi.o(i.hal_spi_tx_rx_cplt_callback) referenced 2 times from gr55xx_hal_spi.o(.data)
 <LI><a href="#[a7]">hal_uart_abort_cplt_callback</a> from app_uart.o(i.hal_uart_abort_cplt_callback) referenced 2 times from gr55xx_hal_uart.o(.data)
 <LI><a href="#[a9]">hal_uart_abort_rx_cplt_callback</a> from app_uart.o(i.hal_uart_abort_rx_cplt_callback) referenced 2 times from gr55xx_hal_uart.o(.data)
 <LI><a href="#[a8]">hal_uart_abort_tx_cplt_callback</a> from app_uart.o(i.hal_uart_abort_tx_cplt_callback) referenced 2 times from gr55xx_hal_uart.o(.data)
 <LI><a href="#[a6]">hal_uart_error_callback</a> from app_uart.o(i.hal_uart_error_callback) referenced 2 times from gr55xx_hal_uart.o(.data)
 <LI><a href="#[a3]">hal_uart_msp_deinit</a> from gr55xx_hal_uart.o(i.hal_uart_msp_deinit) referenced 2 times from gr55xx_hal_uart.o(.data)
 <LI><a href="#[a2]">hal_uart_msp_init</a> from gr55xx_hal_uart.o(i.hal_uart_msp_init) referenced 2 times from gr55xx_hal_uart.o(.data)
 <LI><a href="#[a5]">hal_uart_rx_cplt_callback</a> from app_uart.o(i.hal_uart_rx_cplt_callback) referenced 2 times from gr55xx_hal_uart.o(.data)
 <LI><a href="#[a4]">hal_uart_tx_cplt_callback</a> from app_uart.o(i.hal_uart_tx_cplt_callback) referenced 2 times from gr55xx_hal_uart.o(.data)
 <LI><a href="#[17]">hci_le_add_dev_to_rslv_list_cmd_handler_patch</a> from llm_hci_patch.o(i.hci_le_add_dev_to_rslv_list_cmd_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[19]">hci_le_clear_rslv_list_cmd_handler_patch</a> from llm_hci_patch.o(i.hci_le_clear_rslv_list_cmd_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[18]">hci_le_rmv_dev_from_rslv_list_cmd_handler_patch</a> from llm_hci_patch.o(i.hci_le_rmv_dev_from_rslv_list_cmd_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[1a]">hci_le_set_addr_resol_en_cmd_handler_patch</a> from llm_hci_patch.o(i.hci_le_set_addr_resol_en_cmd_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[1b]">hci_le_set_priv_mode_cmd_handler_patch</a> from llm_hci_patch.o(i.hci_le_set_priv_mode_cmd_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[eb]">hci_le_test_param_set_func_patch</a> from llm_hci_patch.o(i.hci_le_test_param_set_func_patch) referenced from llm_hci_patch.o(i.hci_le_test_param_set_func_replace)
 <LI><a href="#[ec]">hci_le_xo_param_operate_func_patch</a> from llm_hci_patch.o(i.hci_le_xo_param_operate_func_patch) referenced from llm_hci_patch.o(i.hci_le_test_param_set_func_replace)
 <LI><a href="#[4]">host_to_sdk_msg_handler_patch</a> from ble_sdk_task_patch.o(i.host_to_sdk_msg_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[f0]">i2c_dma_abort</a> from gr55xx_hal_i2c_patch.o(i.i2c_dma_abort) referenced from gr55xx_hal_i2c_patch.o(i.i2c_it_error)
 <LI><a href="#[140]">i2c_prepare_for_sleep</a> from app_i2c.o(i.i2c_prepare_for_sleep) referenced from app_i2c.o(.constdata)
 <LI><a href="#[8a]">i2c_updata_suspend_cb_local</a> from gr55xx_hal_i2c_patch.o(i.i2c_updata_suspend_cb_local) referenced 2 times from gr55xx_hal_i2c_patch.o(.data)
 <LI><a href="#[141]">i2c_wake_up_ind</a> from app_i2c.o(RAM_CODE) referenced from app_i2c.o(.constdata)
 <LI><a href="#[6d]">l2cap_enh_lecb_conn_cb</a> from ble_event_patch.o(i.l2cap_enh_lecb_conn_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[6e]">l2cap_enh_lecb_conn_req_cb</a> from ble_event_patch.o(i.l2cap_enh_lecb_conn_req_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[6f]">l2cap_enh_lecb_reconfig_cmp_cb</a> from ble_event_patch.o(i.l2cap_enh_lecb_reconfig_cmp_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[70]">l2cap_enh_lecb_reconfig_ind_cb</a> from ble_event_patch.o(i.l2cap_enh_lecb_reconfig_ind_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[68]">l2cap_lecb_add_credits_ind_cb</a> from ble_event_patch.o(i.l2cap_lecb_add_credits_ind_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[67]">l2cap_lecb_conn_cb</a> from ble_event_patch.o(i.l2cap_lecb_conn_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[66]">l2cap_lecb_conn_req_cb</a> from ble_event_patch.o(i.l2cap_lecb_conn_req_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[6c]">l2cap_lecb_credit_add_cmp_cb</a> from ble_event_patch.o(i.l2cap_lecb_credit_add_cmp_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[69]">l2cap_lecb_disconn_cb</a> from ble_event_patch.o(i.l2cap_lecb_disconn_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[6a]">l2cap_lecb_sdu_recv_cb</a> from ble_event_patch.o(i.l2cap_lecb_sdu_recv_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[6b]">l2cap_lecb_sdu_send_cb</a> from ble_event_patch.o(i.l2cap_lecb_sdu_send_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[13]">l2cc_lecb_sdu_recv_ind_handler_patch</a> from gattc_task_patch.o(i.l2cc_lecb_sdu_recv_ind_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[88]">ll_connection_param_req_handler_patch</a> from llc_con_upd_patch.o(i.ll_connection_param_req_handler_patch) referenced 2 times from llc_llcp_patch.o(.data)
 <LI><a href="#[89]">ll_connection_update_ind_handler_patch</a> from llc_con_upd_patch.o(i.ll_connection_update_ind_handler_patch) referenced 2 times from llc_llcp_patch.o(.data)
 <LI><a href="#[10f]">ll_xqspi_init_patch</a> from gr55xx_ll_xqspi_patch.o(RAM_CODE) referenced from gr55xx_hal_exflash_patch.o(i.platform_xqspi_env_init)
 <LI><a href="#[f8]">llc_ch_class_en_proc_err_cb_patch</a> from llc_ch_class_patch.o(i.llc_ch_class_en_proc_err_cb_patch) referenced from llc_ch_class_patch.o(i.llc_op_ch_class_en_ind_handler_patch)
 <LI><a href="#[f9]">llc_ch_class_rep_proc_err_cb_patch</a> from llc_ch_class_patch.o(i.llc_ch_class_rep_proc_err_cb_patch) referenced from llc_ch_class_patch.o(i.llc_op_ch_class_rep_ind_handler_patch)
 <LI><a href="#[fa]">llc_ll_start_enc_rsp_ack_handler</a> from rom_symbol.txt(ABSOLUTE) referenced from llc_encrypt_patch.o(i.llc_rem_wait_start_enc_rsp_patch)
 <LI><a href="#[f7]">llc_llcp_trans_timer_set_func_patch</a> from llc_patch.o(i.llc_llcp_trans_timer_set_func_patch) referenced from llc_patch.o(i.llc_llcp_trans_timer_set_func_replace)
 <LI><a href="#[f4]">llc_loc_ch_class_en_proc_continue_func_patch</a> from llc_ch_class_patch.o(i.llc_loc_ch_class_en_proc_continue_func_patch) referenced from llc_ch_class_patch.o(i.llc_ch_class_replace)
 <LI><a href="#[f5]">llc_loc_ch_class_rep_proc_continue_func_patch</a> from llc_ch_class_patch.o(i.llc_loc_ch_class_rep_proc_continue_func_patch) referenced from llc_ch_class_patch.o(i.llc_ch_class_replace)
 <LI><a href="#[11]">llc_op_ch_class_en_ind_handler_patch</a> from llc_ch_class_patch.o(i.llc_op_ch_class_en_ind_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[12]">llc_op_ch_class_rep_ind_handler_patch</a> from llc_ch_class_patch.o(i.llc_op_ch_class_rep_ind_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[f]">llc_op_dl_upd_ind_handler_patch</a> from llc_dl_upd_patch.o(i.llc_op_dl_upd_ind_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[f3]">llc_rem_con_upd_proc_err_cb</a> from rom_symbol.txt(ABSOLUTE) referenced from llc_con_upd_patch.o(i.ll_connection_param_req_handler_patch)
 <LI><a href="#[f3]">llc_rem_con_upd_proc_err_cb</a> from rom_symbol.txt(ABSOLUTE) referenced from llc_con_upd_patch.o(i.ll_connection_update_ind_handler_patch)
 <LI><a href="#[ca]">llc_rem_encrypt_proc_continue_patch</a> from llc_encrypt_patch.o(i.llc_rem_encrypt_proc_continue_patch) referenced from system_sdk_patch.o(i.ble_patch_enable)
 <LI><a href="#[ca]">llc_rem_encrypt_proc_continue_patch</a> from llc_encrypt_patch.o(i.llc_rem_encrypt_proc_continue_patch) referenced from fpb_patch_init.o(i.system_driver_patch_enable)
 <LI><a href="#[f6]">llcp_handler_replace_patch</a> from llc_llcp_patch.o(i.llcp_handler_replace_patch) referenced from llc_llcp_patch.o(i.llc_llcp_replace)
 <LI><a href="#[ff]">lld_con_check_con_param_upd_instant_func_patch</a> from lld_con_patch.o(i.lld_con_check_con_param_upd_instant_func_patch) referenced from lld_con_patch.o(i.lld_con_replace)
 <LI><a href="#[fc]">lld_con_evt_canceled_patch</a> from lld_con_patch.o(i.lld_con_evt_canceled_patch) referenced from lld_con_patch.o(i.lld_con_fill_env_func_patch)
 <LI><a href="#[fb]">lld_con_evt_start_cbk_patch</a> from lld_con_patch.o(i.lld_con_evt_start_cbk_patch) referenced from lld_con_patch.o(i.lld_con_fill_env_func_patch)
 <LI><a href="#[fe]">lld_con_fill_env_func_patch</a> from lld_con_patch.o(i.lld_con_fill_env_func_patch) referenced from lld_con_patch.o(i.lld_con_replace)
 <LI><a href="#[aa]">lld_con_frm_cbk_func</a> from rom_symbol.txt(ABSOLUTE) referenced 2 times from lld_con_patch.o(.data)
 <LI><a href="#[fd]">lld_con_rx_func_patch</a> from lld_con_patch.o(i.lld_con_rx_func_patch) referenced from lld_con_patch.o(i.lld_con_replace)
 <LI><a href="#[100]">lld_con_sched_patch</a> from lld_con_patch.o(i.lld_con_sched_patch) referenced from lld_con_patch.o(i.lld_con_replace)
 <LI><a href="#[102]">lld_lcp_data_tx_patch</a> from lld_lcp_patch.o(i.lld_lcp_data_tx_patch) referenced from lld_lcp_patch.o(i.lld_lcp_replace)
 <LI><a href="#[10]">lld_llcp_rx_ind_handler_patch</a> from llc_llcp_patch.o(i.lld_llcp_rx_ind_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[101]">lld_supervision_to_cb</a> from rom_symbol.txt(ABSOLUTE) referenced from lld_con_patch.o(i.lld_con_sched_patch)
 <LI><a href="#[c9]">lld_test_frm_cbk_fcc_patch</a> from lld_test_patch.o(i.lld_test_frm_cbk_fcc_patch) referenced from lld_test_patch.o(i.bb_watch_timer_start_fcc_patch)
 <LI><a href="#[6]">llm_hci_command_handler_patch</a> from llm_hci_patch.o(i.llm_hci_command_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[ae]">main_init</a> from gr_platform.o(i.main_init) referenced from startup.o(.text)
 <LI><a href="#[105]">nvds_init_replace</a> from sdk_nvds_patch.o(i.nvds_init_replace) referenced from sdk_nvds_patch.o(i.nvds_replace)
 <LI><a href="#[106]">nvds_put_replace</a> from sdk_nvds_patch.o(i.nvds_put_replace) referenced from sdk_nvds_patch.o(i.nvds_replace)
 <LI><a href="#[107]">otas_ble_evt_handler</a> from otas.o(i.otas_ble_evt_handler) referenced from otas.o(i.otas_service_init)
 <LI><a href="#[d9]">otas_evt_process</a> from dfu_port.o(i.otas_evt_process) referenced from dfu_port.o(i.dfu_service_init)
 <LI><a href="#[139]">patch_init</a> from gr_soc.o(i.patch_init) referenced from gr_soc.o(.constdata)
 <LI><a href="#[130]">pmu_timer_handler</a> from pmu_calibration.o(i.pmu_timer_handler) referenced from pmu_calibration.o(i.pmu_timer_handler)
 <LI><a href="#[130]">pmu_timer_handler</a> from pmu_calibration.o(i.pmu_timer_handler) referenced from pmu_calibration.o(i.system_pmu_calibration_init)
 <LI><a href="#[133]">print_test_task</a> from main.o(i.print_test_task) referenced from main.o(i.vStartTasks)
 <LI><a href="#[d6]">program_end_replace</a> from dfu_port.o(i.program_end_replace) referenced from dfu_port.o(i.dfu_port_init)
 <LI><a href="#[d5]">program_flash_replace</a> from dfu_port.o(i.program_flash_replace) referenced from dfu_port.o(i.dfu_port_init)
 <LI><a href="#[d4]">program_start_replace</a> from dfu_port.o(i.program_start_replace) referenced from dfu_port.o(i.dfu_port_init)
 <LI><a href="#[135]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[113]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[137]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[c0]">pwr_enter_sleep_check_new</a> from app_pwr_mgmt.o(i.pwr_enter_sleep_check_new) referenced from app_pwr_mgmt.o(i.app_pwr_mgmt_init)
 <LI><a href="#[112]">pwr_mgmt_shutdown_local_patch</a> from sdk_pwr_mgmt_patch.o(RAM_CODE) referenced from sdk_pwr_mgmt_patch.o(i.pwr_mgmt_shutdown_replace)
 <LI><a href="#[bf]">pwr_wake_up_ind_new</a> from app_pwr_mgmt.o(RAM_CODE) referenced from app_pwr_mgmt.o(i.app_pwr_mgmt_init)
 <LI><a href="#[11a]">rf_force_agc_enable</a> from rf_gdx_bali_b1_patch.o(i.rf_force_agc_enable) referenced from rf_gdx_bali_b1_patch.o(i.rf_api_init)
 <LI><a href="#[11c]">rf_init_patch</a> from rf_gdx_bali_b1_patch.o(i.rf_init_patch) referenced from rf_gdx_bali_b1_patch.o(i.rf_gdx_replace)
 <LI><a href="#[11d]">rf_lcp_api_init_patch</a> from rf_gdx_bali_b1_patch.o(i.rf_lcp_api_init_patch) referenced from rf_gdx_bali_b1_patch.o(i.rf_gdx_replace)
 <LI><a href="#[11f]">rf_lcp_hopping_table_reinit_patch</a> from rf_gdx_bali_b1_patch.o(i.rf_lcp_hopping_table_reinit_patch) referenced from rf_gdx_bali_b1_patch.o(i.rf_lcp_api_init_patch)
 <LI><a href="#[11e]">rf_lcp_sx_init_patch</a> from rf_gdx_bali_b1_patch.o(i.rf_lcp_sx_init_patch) referenced from rf_gdx_bali_b1_patch.o(i.rf_lcp_api_init_patch)
 <LI><a href="#[117]">rf_reset</a> from rf_gdx_bali_b1_patch.o(i.rf_reset) referenced from rf_gdx_bali_b1_patch.o(i.rf_api_init)
 <LI><a href="#[118]">rf_rssi_convert</a> from rf_gdx_bali_b1_patch.o(i.rf_rssi_convert) referenced from rf_gdx_bali_b1_patch.o(i.rf_api_init)
 <LI><a href="#[119]">rf_txpwr_cs_get</a> from rf_gdx_bali_b1_patch.o(i.rf_txpwr_cs_get) referenced from rf_gdx_bali_b1_patch.o(i.rf_api_init)
 <LI><a href="#[116]">rf_txpwr_dbm_get</a> from rf_gdx_bali_b1_patch.o(i.rf_txpwr_dbm_get) referenced from rf_gdx_bali_b1_patch.o(i.rf_api_init)
 <LI><a href="#[11b]">rf_wakeup_init_patch</a> from rf_gdx_bali_b1_patch.o(i.rf_wakeup_init_patch) referenced from rf_gdx_bali_b1_patch.o(i.rf_gdx_replace)
 <LI><a href="#[120]">rwble_isr_func_patch</a> from rwble_patch.o(i.rwble_isr_func_patch) referenced from rwble_patch.o(i.rwble_isr_replace)
 <LI><a href="#[12a]">sch_arb_insert_func_patch</a> from sch_arb_patch.o(i.sch_arb_insert_func_patch) referenced from sch_arb_patch.o(i.sch_arb_replace)
 <LI><a href="#[12b]">sch_prog_fifo_isr_func_patch</a> from sch_prog_patch.o(RAM_CODE) referenced from sch_prog_patch.o(i.sch_prog_replace)
 <LI><a href="#[da]">sch_prog_push_patch</a> from sch_prog_patch.o(RAM_CODE) referenced from lld_test_patch.o(i.dtm_test_init_patch)
 <LI><a href="#[da]">sch_prog_push_patch</a> from sch_prog_patch.o(RAM_CODE) referenced from sch_prog_patch.o(i.sch_prog_replace)
 <LI><a href="#[c]">sec_rcv_bond_req_ind_handler_patch</a> from ble_sdk_sec_patch.o(i.sec_rcv_bond_req_ind_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[62]">sec_rcv_enc_ind_cb</a> from ble_event_patch.o(i.sec_rcv_enc_ind_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[61]">sec_rcv_enc_req_cb</a> from ble_event_patch.o(i.sec_rcv_enc_req_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[b]">sec_rcv_encrypt_req_ind_handler_patch</a> from ble_sdk_sec_patch.o(i.sec_rcv_encrypt_req_ind_handler_patch) referenced 2 times from gr_soc.o(.data)
 <LI><a href="#[64]">sec_rcv_key_missing_cb</a> from ble_event_patch.o(i.sec_rcv_key_missing_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[63]">sec_rcv_keypress_notify_cb</a> from ble_event_patch.o(i.sec_rcv_keypress_notify_cb) referenced 2 times from ble_event_patch.o(.data)
 <LI><a href="#[138]">second_class_task</a> from gr_soc.o(i.second_class_task) referenced from gr_soc.o(.constdata)
 <LI><a href="#[13e]">spi_prepare_for_sleep</a> from app_spi.o(i.spi_prepare_for_sleep) referenced from app_spi.o(.constdata)
 <LI><a href="#[13f]">spi_wake_up_ind</a> from app_spi.o(RAM_CODE) referenced from app_spi.o(.constdata)
 <LI><a href="#[12d]">srpg_sleep_local_patch</a> from srpg_manager_patch.o(RAM_CODE) referenced from srpg_manager_patch.o(i.srpg_sleep_replace)
 <LI><a href="#[10b]">sys_context_restore_func</a> from platform_sys_context.o(RAM_CODE) referenced from platform_sdk.o(i.platform_sdk_init)
 <LI><a href="#[10a]">sys_context_save_func</a> from platform_sys_context.o(RAM_CODE) referenced from platform_sdk.o(i.platform_sdk_init)
 <LI><a href="#[10d]">sys_context_srpg_restore_func</a> from platform_sys_context.o(RAM_CODE) referenced from platform_sdk.o(i.platform_sdk_init)
 <LI><a href="#[10c]">sys_context_srpg_save_func</a> from platform_sys_context.o(RAM_CODE) referenced from platform_sdk.o(i.platform_sdk_init)
 <LI><a href="#[142]">system_platform_init</a> from gr_platform.o(i.system_platform_init) referenced from gr_platform.o(.init_array)
 <LI><a href="#[ea]">uart_dma_abort_on_error</a> from rom_symbol.txt(ABSOLUTE) referenced from gr55xx_hal_uart_patch.o(i.hal_uart_irq_handler)
 <LI><a href="#[13c]">uart_prepare_for_sleep</a> from app_uart.o(i.uart_prepare_for_sleep) referenced from app_uart.o(.constdata)
 <LI><a href="#[13d]">uart_wake_up_ind</a> from app_uart.o(RAM_CODE) referenced from app_uart.o(.constdata)
 <LI><a href="#[131]">ultra_srpg_patch</a> from sdk_pwr_mgmt_patch.o(RAM_CODE) referenced from sdk_pwr_mgmt_patch.o(i.ultra_wfi_replace)
 <LI><a href="#[136]">vPortSVCHandler</a> from port.o(.emb_text) referenced from port.o(i.xPortStartScheduler)
 <LI><a href="#[104]">vStartTasks</a> from main.o(i.vStartTasks) referenced from main.o(i.main)
 <LI><a href="#[e7]">warm_boot_clock_init</a> from gr55xx_hal_clock_patch.o(RAM_CODE) referenced from gr55xx_hal_clock_patch.o(i.hal_clock_function_replace)
 <LI><a href="#[10e]">warm_boot_second</a> from platform_sdk.o(RAM_CODE) referenced from platform_sdk.o(i.platform_sdk_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[554]"></a>restore_sys_context</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_shutdown_local_patch
</UL>

<P><STRONG><a name="[2c1]"></a>assert_err</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_evt_start_cbk_patch
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_evt_canceled_patch
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_ble_rxwincntl_pack_patch
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_lcp_sx_output
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_insert_func_patch
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_init_fsm_next_func_patch
</UL>

<P><STRONG><a name="[3ae]"></a>assert_param</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_llcp_rx_ind_handler_patch
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_rx_func_patch
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_continue_patch
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_func_patch
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_insert_func_patch
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ch_class_rep_proc_err_cb_patch
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ch_class_en_proc_err_cb_patch
</UL>

<P><STRONG><a name="[3e4]"></a>assert_warn</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_mode_set
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_lcp_data_tx_patch
</UL>

<P><STRONG><a name="[31d]"></a>attmdb_destroy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler_patch
</UL>

<P><STRONG><a name="[3f0]"></a>ble_util_buf_acl_tx_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_frm_isr_fcc_patch
</UL>

<P><STRONG><a name="[3ec]"></a>ble_util_buf_rx_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_llcp_rx_ind_handler_patch
</UL>

<P><STRONG><a name="[571]"></a>blecore_register_settings_reload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwr_on_wakeup_reset_core
</UL>

<P><STRONG><a name="[3d8]"></a>ch_class_enable_proc_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_rx_func_patch
</UL>

<P><STRONG><a name="[4d4]"></a>co_list_extract_sublist</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_insert_func_patch
</UL>

<P><STRONG><a name="[4d5]"></a>co_list_insert_after</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_insert_func_patch
</UL>

<P><STRONG><a name="[4d6]"></a>co_list_push_front</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_insert_func_patch
</UL>

<P><STRONG><a name="[3ea]"></a>co_util_unpack</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_llcp_rx_ind_handler_patch
</UL>

<P><STRONG><a name="[3e7]"></a>dbg_is_tst_pt_en</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_llcp_rx_ind_handler_patch
</UL>

<P><STRONG><a name="[42b]"></a>delay_ms</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_end_replace
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ch_hp_gain_get
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_hp_gain_calibration
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_band_hp_gain_calibration
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_initial_dcore_train
</UL>

<P><STRONG><a name="[1c1]"></a>delay_us</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_delay_us
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_stop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_startup
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwr_on_wakeup_reset_core
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sxpll_working_min_vco_ldo_vref_get
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SX_reset
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SX_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_lcp_sx_init_patch
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_continue_patch
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_low_power_set
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_ringo_cnt_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_retention_voltage_set
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpll_reset
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_try_set_clock
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_lock_and_save
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_conversion
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_clock_calib_start
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_ble_clk
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_idle_clock_turn_off
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_init_patch
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_ultra_sleep
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_shutdown_local_patch
</UL>

<P><STRONG><a name="[39e]"></a>eatt_chan_rx_credit_add</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_sdu_recv_ind_handler_patch
</UL>

<P><STRONG><a name="[563]"></a>exflash_check_id</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_init_patch
</UL>

<P><STRONG><a name="[562]"></a>exflash_wakeup</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_init_patch
</UL>

<P><STRONG><a name="[560]"></a>exflash_write_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_write_status_reg
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exflash_enable_quad_patch
</UL>

<P><STRONG><a name="[586]"></a>force_dpad_le_high</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_context_srpg_restore_func
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_context_restore_func
</UL>

<P><STRONG><a name="[31a]"></a>gapc_get_conhdl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_stop_patch
</UL>

<P><STRONG><a name="[36e]"></a>gapc_get_dest_task</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disc_cmp_evt_handler_patch
</UL>

<P><STRONG><a name="[36f]"></a>gapc_send_disconect_ind</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disc_cmp_evt_handler_patch
</UL>

<P><STRONG><a name="[370]"></a>gapc_send_error_evt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disc_cmp_evt_handler_patch
</UL>

<P><STRONG><a name="[315]"></a>gapm_actv_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_create_patch
</UL>

<P><STRONG><a name="[30e]"></a>gapm_actv_check_create_param</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_create_cmd_handler_patch
</UL>

<P><STRONG><a name="[317]"></a>gapm_actv_created</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_create_patch
</UL>

<P><STRONG><a name="[30f]"></a>gapm_actv_get_free_idx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_create_cmd_handler_patch
</UL>

<P><STRONG><a name="[310]"></a>gapm_adv_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_create_cmd_handler_patch
</UL>

<P><STRONG><a name="[371]"></a>gapm_con_cleanup</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disc_cmp_evt_handler_patch
</UL>

<P><STRONG><a name="[31c]"></a>gapm_dle_val_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler_patch
</UL>

<P><STRONG><a name="[316]"></a>gapm_get_requester</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_create_patch
</UL>

<P><STRONG><a name="[313]"></a>gapm_init_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_create_cmd_handler_patch
</UL>

<P><STRONG><a name="[31f]"></a>gapm_le_psm_cleanup</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler_patch
</UL>

<P><STRONG><a name="[31b]"></a>gapm_per_adv_sync_trans_param_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_stop_patch
</UL>

<P><STRONG><a name="[e4]"></a>gapm_per_sync_delete</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> gapm_per_sync_patch.o(i.gapm_per_sync_create_patch)
</UL>
<P><STRONG><a name="[319]"></a>gapm_per_sync_send_hci_le_per_adv_create_sync_cancel_cmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_stop_patch
</UL>

<P><STRONG><a name="[318]"></a>gapm_per_sync_send_hci_le_per_adv_term_sync_cmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_stop_patch
</UL>

<P><STRONG><a name="[e2]"></a>gapm_per_sync_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> gapm_per_sync_patch.o(i.gapm_per_sync_create_patch)
</UL>
<P><STRONG><a name="[30d]"></a>gapm_process_op</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler_patch
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_create_cmd_handler_patch
</UL>

<P><STRONG><a name="[311]"></a>gapm_scan_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_create_cmd_handler_patch
</UL>

<P><STRONG><a name="[39c]"></a>gatt_eatt_cid_index_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_sdu_recv_ind_handler_patch
</UL>

<P><STRONG><a name="[56f]"></a>global_int_disable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwr_on_wakeup_reset_core
</UL>

<P><STRONG><a name="[572]"></a>global_int_enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwr_on_wakeup_reset_core
</UL>

<P><STRONG><a name="[32f]"></a>hal_aon_gpio_init_ext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_aon_gpio_init
</UL>

<P><STRONG><a name="[534]"></a>hal_aon_gpio_irq_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AON_EXT_IRQHandler
</UL>

<P><STRONG><a name="[32e]"></a>hal_aon_gpio_register_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_aon_gpio_init
</UL>

<P><STRONG><a name="[204]"></a>hal_aon_gpio_write_pin</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_write_pin
</UL>

<P><STRONG><a name="[331]"></a>hal_clock_clear_device_xo_request_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_release_xo_osc_patch
</UL>

<P><STRONG><a name="[29c]"></a>hal_clock_release_xo_osc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_release_xo_osc
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_digcore_code_get
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_dcore_adjust
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_calib_state_clear
</UL>

<P><STRONG><a name="[261]"></a>hal_clock_request_xo_osc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_core_init_without_stack_init
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_digcore_code_get
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_dcore_adjust
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_clock_calib_start
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_clk_calib_inner_start_new
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_clock_calib_start
</UL>

<P><STRONG><a name="[12f]"></a>hal_clock_request_xo_osc_ori</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_clock_patch.o(i.sys_xo_hf_clock_switch_enable)
</UL>
<P><STRONG><a name="[34e]"></a>hal_dma_abort_it</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_irq_handler
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_abort_it
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_it_error
</UL>

<P><STRONG><a name="[392]"></a>hal_dwt_disable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us_dwt_patch
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_flag_until_timeout
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_start_transmit
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_start_receive
</UL>

<P><STRONG><a name="[38f]"></a>hal_dwt_enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us_dwt_patch
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_flag_until_timeout
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_start_transmit
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_start_receive
</UL>

<P><STRONG><a name="[337]"></a>hal_efuse_deinit_ext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_deinit
</UL>

<P><STRONG><a name="[2bf]"></a>hal_efuse_read</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_xo_offset_set_func
</UL>

<P><STRONG><a name="[336]"></a>hal_efuse_register_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_deinit
</UL>

<P><STRONG><a name="[55d]"></a>hal_exflash_deepsleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_ultra_sleep
</UL>

<P><STRONG><a name="[40d]"></a>hal_exflash_get_error</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_item
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replace_item
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init_replace
</UL>

<P><STRONG><a name="[40e]"></a>hal_exflash_get_state</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_item
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replace_item
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init_replace
</UL>

<P><STRONG><a name="[556]"></a>hal_exflash_init_ext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_shutdown_local_patch
</UL>

<P><STRONG><a name="[579]"></a>hal_exflash_resume</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_irq_handler_without_stack_init
</UL>

<P><STRONG><a name="[578]"></a>hal_exflash_suspend</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_irq_handler_without_stack_init
</UL>

<P><STRONG><a name="[533]"></a>hal_gpio_exti_irq_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT0_IRQHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT1_IRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT2_IRQHandler
</UL>

<P><STRONG><a name="[33c]"></a>hal_gpio_init_ext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
</UL>

<P><STRONG><a name="[33b]"></a>hal_gpio_register_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
</UL>

<P><STRONG><a name="[203]"></a>hal_gpio_write_pin</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_write_pin
</UL>

<P><STRONG><a name="[345]"></a>hal_i2c_register_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init
</UL>

<P><STRONG><a name="[359]"></a>hal_msio_init_ext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_msio_init
</UL>

<P><STRONG><a name="[358]"></a>hal_msio_register_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_msio_init
</UL>

<P><STRONG><a name="[205]"></a>hal_msio_write_pin</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_write_pin
</UL>

<P><STRONG><a name="[1f8]"></a>hal_nvic_clear_pending_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wake_up_ind
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_wake_up_ind
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_wake_up_ind
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_init
</UL>

<P><STRONG><a name="[1f9]"></a>hal_nvic_enable_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wake_up_ind
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_wake_up_ind
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_wake_up_ind
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_init
</UL>

<P><STRONG><a name="[361]"></a>hal_pwr_config_timer_wakeup_ext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_timer_config_and_start
</UL>

<P><STRONG><a name="[555]"></a>hal_pwr_enter_chip_deepsleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_shutdown_local_patch
</UL>

<P><STRONG><a name="[394]"></a>hal_pwr_mgmt_clear_device_handle</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_updata_suspend_cb_local
</UL>

<P><STRONG><a name="[38c]"></a>hal_pwr_mgmt_clear_device_sleep_flag</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_resume_before_using
</UL>

<P><STRONG><a name="[349]"></a>hal_pwr_mgmt_device_resume_register</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init_ext
</UL>

<P><STRONG><a name="[343]"></a>hal_pwr_mgmt_device_resume_release</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_deinit_ext
</UL>

<P><STRONG><a name="[395]"></a>hal_pwr_mgmt_device_suspend_register</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_updata_suspend_cb_local
</UL>

<P><STRONG><a name="[393]"></a>hal_pwr_mgmt_device_suspend_release</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_updata_suspend_cb_local
</UL>

<P><STRONG><a name="[396]"></a>hal_pwr_mgmt_save_device_handle</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_updata_suspend_cb_local
</UL>

<P><STRONG><a name="[38e]"></a>hal_pwr_mgmt_set_device_renew_flag</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_renew_flag
</UL>

<P><STRONG><a name="[38d]"></a>hal_pwr_mgmt_set_device_state</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_device_state
</UL>

<P><STRONG><a name="[294]"></a>hal_pwr_mgmt_set_extra_device_state</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_clock_calib_start
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_clk_calib_inner_start_new
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_calib_state_clear
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_clock_calib_start
</UL>

<P><STRONG><a name="[360]"></a>hal_pwr_register_timer_elaspsed_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_timer_config_and_start
</UL>

<P><STRONG><a name="[1b3]"></a>hal_pwr_sleep_timer_irq_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLPTIMER_IRQHandler
</UL>

<P><STRONG><a name="[35c]"></a>hal_rtc_deinit_ext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_deinit
</UL>

<P><STRONG><a name="[35e]"></a>hal_rtc_init_ext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
</UL>

<P><STRONG><a name="[539]"></a>hal_rtc_irq_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[35b]"></a>hal_rtc_register_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_deinit
</UL>

<P><STRONG><a name="[504]"></a>hal_rtc_set_tick_and_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_compensate_restart
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_sleep_timeout_set
</UL>

<P><STRONG><a name="[503]"></a>hal_rtc_stop_tick</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_sleep_timeout_set
</UL>

<P><STRONG><a name="[3f3]"></a>hal_sleep_timer_get_current_value</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_startup
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_rest_get
</UL>

<P><STRONG><a name="[3f8]"></a>hal_sleep_timer_status_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_stop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_startup
</UL>

<P><STRONG><a name="[3f9]"></a>hal_sleep_timer_stop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_stop
</UL>

<P><STRONG><a name="[364]"></a>hal_spi_deinit_ext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_deinit
</UL>

<P><STRONG><a name="[4e7]"></a>hal_spi_get_state</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_prepare_for_sleep
</UL>

<P><STRONG><a name="[365]"></a>hal_spi_init_ext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_init
</UL>

<P><STRONG><a name="[537]"></a>hal_spi_irq_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_S_IRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_M_IRQHandler
</UL>

<P><STRONG><a name="[363]"></a>hal_spi_register_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_deinit
</UL>

<P><STRONG><a name="[536]"></a>hal_spi_resume_reg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_wake_up_ind
</UL>

<P><STRONG><a name="[4e8]"></a>hal_spi_suspend_reg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_prepare_for_sleep
</UL>

<P><STRONG><a name="[21c]"></a>hal_spi_transmit_receive</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_transmit_receive_sync
</UL>

<P><STRONG><a name="[232]"></a>hal_uart_abort_transmit_it</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_flush
</UL>

<P><STRONG><a name="[367]"></a>hal_uart_deinit_ext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
</UL>

<P><STRONG><a name="[231]"></a>hal_uart_get_state</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_prepare_for_sleep
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_flush
</UL>

<P><STRONG><a name="[369]"></a>hal_uart_init_ext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[368]"></a>hal_uart_register_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[535]"></a>hal_uart_resume_reg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_wake_up_ind
</UL>

<P><STRONG><a name="[4ff]"></a>hal_uart_suspend_reg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_prepare_for_sleep
</UL>

<P><STRONG><a name="[233]"></a>hal_uart_transmit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_transmit_sync
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_flush
</UL>

<P><STRONG><a name="[22f]"></a>hal_uart_transmit_dma</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_dma_start_transmit_async
</UL>

<P><STRONG><a name="[23a]"></a>hal_uart_transmit_it</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_start_transmit_async
</UL>

<P><STRONG><a name="[55f]"></a>hal_xqspi_command_receive</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exflash_read_status_reg
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exflash_read_uid
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exflash_enable_quad_patch
</UL>

<P><STRONG><a name="[561]"></a>hal_xqspi_init_ext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_write_status_reg
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_read_status_reg
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exflash_read_uid
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_enable_quad_patch
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_init_patch
</UL>

<P><STRONG><a name="[3e8]"></a>hci_dbg_tst_rcv_llcp_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_llcp_rx_ind_handler_patch
</UL>

<P><STRONG><a name="[37a]"></a>hci_le_test_param_set_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_param_set_func_patch
</UL>

<P><STRONG><a name="[37f]"></a>hci_le_xo_param_operate_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_xo_param_operate_func_patch
</UL>

<P><STRONG><a name="[39d]"></a>ke_msg_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_sdu_recv_ind_handler_patch
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_instant_proc_end_patch
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_frm_isr_fcc_patch
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler_patch
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_req_handler_patch
</UL>

<P><STRONG><a name="[3a1]"></a>ke_msg_forward</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_sdu_recv_ind_handler_patch
</UL>

<P><STRONG><a name="[39f]"></a>ke_msg_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_sdu_recv_ind_handler_patch
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_instant_proc_end_patch
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_frm_isr_fcc_patch
</UL>

<P><STRONG><a name="[3d6]"></a>ke_msg_send_basic</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_instant_proc_end_patch
</UL>

<P><STRONG><a name="[36d]"></a>ke_state_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disc_cmp_evt_handler_patch
</UL>

<P><STRONG><a name="[3b0]"></a>ke_timer_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_trans_timer_set_func_patch
</UL>

<P><STRONG><a name="[3af]"></a>ke_timer_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_trans_timer_set_func_patch
</UL>

<P><STRONG><a name="[340]"></a>ll_i2c_deinit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_deinit_ext
</UL>

<P><STRONG><a name="[3b7]"></a>llc_disconnect</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_llcp_rx_ind_handler_patch
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_continue_patch
</UL>

<P><STRONG><a name="[3c0]"></a>llc_hci_enc_evt_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_continue_patch
</UL>

<P><STRONG><a name="[3bc]"></a>llc_hci_ltk_request_evt_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_continue_patch
</UL>

<P><STRONG><a name="[3c3]"></a>llc_le_ping_restart</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_llcp_rx_ind_handler_patch
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_finish_patch
</UL>

<P><STRONG><a name="[fa]"></a>llc_ll_start_enc_rsp_ack_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llc_encrypt_patch.o(i.llc_rem_wait_start_enc_rsp_patch)
</UL>
<P><STRONG><a name="[3c8]"></a>llc_ll_start_enc_rsp_pdu_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_wait_start_enc_rsp_patch
</UL>

<P><STRONG><a name="[3c2]"></a>llc_llcp_state_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_wait_start_enc_rsp_patch
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_finish_patch
</UL>

<P><STRONG><a name="[3b1]"></a>llc_loc_ch_class_en_proc_continue_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_loc_ch_class_en_proc_continue_func_patch
</UL>

<P><STRONG><a name="[3b2]"></a>llc_loc_ch_class_rep_proc_continue_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_loc_ch_class_rep_proc_continue_func_patch
</UL>

<P><STRONG><a name="[3b6]"></a>llc_loc_con_upd_proc_stop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_collision_check_slave_patch
</UL>

<P><STRONG><a name="[3b3]"></a>llc_op_ch_class_ind_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_ch_class_rep_ind_handler_patch
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_ch_class_en_ind_handler_patch
</UL>

<P><STRONG><a name="[3b4]"></a>llc_op_dl_upd_ind_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_dl_upd_ind_handler_patch
</UL>

<P><STRONG><a name="[3a4]"></a>llc_proc_collision_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_req_handler_patch
</UL>

<P><STRONG><a name="[3a9]"></a>llc_proc_collision_check_slave</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler_patch
</UL>

<P><STRONG><a name="[3aa]"></a>llc_proc_collision_status_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler_patch
</UL>

<P><STRONG><a name="[3ac]"></a>llc_proc_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_finish_patch
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_continue_patch
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler_patch
</UL>

<P><STRONG><a name="[3a2]"></a>llc_proc_id_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_local_remote_collision_check
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_collision_check_slave_patch
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_loc_ch_class_rep_proc_continue_func_patch
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_loc_ch_class_en_proc_continue_func_patch
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler_patch
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_req_handler_patch
</UL>

<P><STRONG><a name="[3a6]"></a>llc_proc_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler_patch
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_req_handler_patch
</UL>

<P><STRONG><a name="[3a8]"></a>llc_proc_reg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler_patch
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_req_handler_patch
</UL>

<P><STRONG><a name="[3ad]"></a>llc_proc_state_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_continue_patch
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler_patch
</UL>

<P><STRONG><a name="[3a7]"></a>llc_proc_state_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_wait_start_enc_rsp_patch
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_continue_patch
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler_patch
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_req_handler_patch
</UL>

<P><STRONG><a name="[3c4]"></a>llc_proc_timer_pause_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_finish_patch
</UL>

<P><STRONG><a name="[3c6]"></a>llc_proc_timer_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_wait_start_enc_rsp_patch
</UL>

<P><STRONG><a name="[3c5]"></a>llc_proc_unreg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_finish_patch
</UL>

<P><STRONG><a name="[f3]"></a>llc_rem_con_upd_proc_err_cb</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 2]<UL><LI> llc_con_upd_patch.o(i.ll_connection_param_req_handler_patch)
<LI> llc_con_upd_patch.o(i.ll_connection_update_ind_handler_patch)
</UL>
<P><STRONG><a name="[3b8]"></a>llc_rem_enc_proc_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_continue_patch
</UL>

<P><STRONG><a name="[3ba]"></a>llc_rem_wait_enc_req</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_continue_patch
</UL>

<P><STRONG><a name="[3bb]"></a>llc_rem_wait_ivs_skds_gen</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_continue_patch
</UL>

<P><STRONG><a name="[3b9]"></a>llc_rem_wait_pause_enc_rsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_continue_patch
</UL>

<P><STRONG><a name="[3be]"></a>llc_rem_wait_sk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_continue_patch
</UL>

<P><STRONG><a name="[3bd]"></a>llc_rem_waite_ltk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_continue_patch
</UL>

<P><STRONG><a name="[3eb]"></a>lld_check_llcp_pdu_process</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_llcp_rx_ind_handler_patch
</UL>

<P><STRONG><a name="[3ca]"></a>lld_con_check_instant_proc_done</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_check_instant_proc_done_patch
</UL>

<P><STRONG><a name="[3ce]"></a>lld_con_cleanup</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_sched_patch
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_evt_canceled_patch
</UL>

<P><STRONG><a name="[3e2]"></a>lld_con_clear_ccm_counter</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_sched_patch
</UL>

<P><STRONG><a name="[3e1]"></a>lld_con_compute_new_bit_offset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_sched_patch
</UL>

<P><STRONG><a name="[3d2]"></a>lld_con_config_tx_gain_value</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_evt_start_cbk_patch
</UL>

<P><STRONG><a name="[3c1]"></a>lld_con_data_flow_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_finish_patch
</UL>

<P><STRONG><a name="[3e6]"></a>lld_con_env_is_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_llcp_rx_ind_handler_patch
</UL>

<P><STRONG><a name="[3d3]"></a>lld_con_fill_env_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_fill_env_func_patch
</UL>

<P><STRONG><a name="[aa]"></a>lld_con_frm_cbk_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> lld_con_patch.o(.data)
</UL>
<P><STRONG><a name="[3d4]"></a>lld_con_instant_proc_end</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_instant_proc_end_patch
</UL>

<P><STRONG><a name="[3b5]"></a>lld_con_instant_proc_type_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_collision_check_slave_patch
</UL>

<P><STRONG><a name="[3e3]"></a>lld_con_max_lat_calc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_upd_con_param_while_instant_done
</UL>

<P><STRONG><a name="[3cd]"></a>lld_con_prio_idx_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_sched_patch
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_evt_canceled_patch
</UL>

<P><STRONG><a name="[3dc]"></a>lld_con_rssi_update</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_rx_func_patch
</UL>

<P><STRONG><a name="[3d9]"></a>lld_con_rx_check_packet_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_rx_func_patch
</UL>

<P><STRONG><a name="[3da]"></a>lld_con_rx_proc_cte</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_rx_func_patch
</UL>

<P><STRONG><a name="[3d7]"></a>lld_con_rx_update_sync_timestamp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_rx_func_patch
</UL>

<P><STRONG><a name="[3c7]"></a>lld_con_tx_enc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_wait_start_enc_rsp_patch
</UL>

<P><STRONG><a name="[3d5]"></a>lld_con_tx_len_update</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_instant_proc_end_patch
</UL>

<P><STRONG><a name="[3cf]"></a>lld_con_update_next_ch</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_evt_start_cbk_patch
</UL>

<P><STRONG><a name="[4d2]"></a>lld_iso_hop_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_func_patch
</UL>

<P><STRONG><a name="[3e5]"></a>lld_lcp_pkt_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_lcp_data_tx_patch
</UL>

<P><STRONG><a name="[3e9]"></a>lld_llcp_opcode_is_invalid</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_llcp_rx_ind_handler_patch
</UL>

<P><STRONG><a name="[3cb]"></a>lld_read_clock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_evt_canceled_patch
</UL>

<P><STRONG><a name="[374]"></a>lld_res_list_add</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_add_dev_to_rslv_list_cmd_handler_patch
</UL>

<P><STRONG><a name="[376]"></a>lld_res_list_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_clear_rslv_list_cmd_handler_patch
</UL>

<P><STRONG><a name="[379]"></a>lld_res_list_priv_mode_update</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_priv_mode_cmd_handler_patch
</UL>

<P><STRONG><a name="[377]"></a>lld_res_list_rem</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rmv_dev_from_rslv_list_cmd_handler_patch
</UL>

<P><STRONG><a name="[3de]"></a>lld_rxdesc_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_rx_func_patch
</UL>

<P><STRONG><a name="[3dd]"></a>lld_rxdesc_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_rx_func_patch
</UL>

<P><STRONG><a name="[101]"></a>lld_supervision_to_cb</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> lld_con_patch.o(i.lld_con_sched_patch)
</UL>
<P><STRONG><a name="[3e0]"></a>lld_sync_win_compute</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_sched_patch
</UL>

<P><STRONG><a name="[3f1]"></a>lld_test_cleanup</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_frm_isr_fcc_patch
</UL>

<P><STRONG><a name="[3ee]"></a>lld_test_rx_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_frm_cbk_fcc_patch
</UL>

<P><STRONG><a name="[375]"></a>llm_cmd_cmp_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_priv_mode_cmd_handler_patch
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_addr_resol_en_cmd_handler_patch
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rmv_dev_from_rslv_list_cmd_handler_patch
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_clear_rslv_list_cmd_handler_patch
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_add_dev_to_rslv_list_cmd_handler_patch
</UL>

<P><STRONG><a name="[372]"></a>llm_dev_list_search</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_add_dev_to_rslv_list_cmd_handler_patch
</UL>

<P><STRONG><a name="[3a3]"></a>llm_le_evt_mask_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_req_handler_patch
</UL>

<P><STRONG><a name="[373]"></a>llm_ral_search</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_priv_mode_cmd_handler_patch
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rmv_dev_from_rslv_list_cmd_handler_patch
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_add_dev_to_rslv_list_cmd_handler_patch
</UL>

<P><STRONG><a name="[57c]"></a>prevent_sleep_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remain_sleep_dur
</UL>

<P><STRONG><a name="[31e]"></a>prf_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler_patch
</UL>

<P><STRONG><a name="[3a0]"></a>rwble_hl_get_main_task</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_sdu_recv_ind_handler_patch
</UL>

<P><STRONG><a name="[4d1]"></a>rwip_bts_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_func_patch
</UL>

<P><STRONG><a name="[3db]"></a>rwip_channel_assess_ble</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_rx_func_patch
</UL>

<P><STRONG><a name="[37c]"></a>rwip_prevent_sleep_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_param_set_func_patch
</UL>

<P><STRONG><a name="[37b]"></a>rwip_prevent_sleep_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_param_set_func_patch
</UL>

<P><STRONG><a name="[242]"></a>rwip_time_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_get
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wait_for_wakeup_state
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep_successfully_without_stack_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_watch_timer_start_fcc_patch
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_insert_func_patch
</UL>

<P><STRONG><a name="[57a]"></a>rwip_wakeup_end</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rwip_wakeup_patch
</UL>

<P><STRONG><a name="[243]"></a>sch_alarm_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_watch_timer_start_fcc_patch
</UL>

<P><STRONG><a name="[244]"></a>sch_alarm_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_sched_patch
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_watch_timer_start_fcc_patch
</UL>

<P><STRONG><a name="[4d3]"></a>sch_arb_conflict_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_insert_func_patch
</UL>

<P><STRONG><a name="[4d9]"></a>sch_arb_elt_cancel</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_insert_func_patch
</UL>

<P><STRONG><a name="[4d8]"></a>sch_arb_idle_time_notify</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_insert_func_patch
</UL>

<P><STRONG><a name="[4d7]"></a>sch_arb_prog_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_insert_func_patch
</UL>

<P><STRONG><a name="[3ef]"></a>sch_arb_remove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_frm_isr_fcc_patch
</UL>

<P><STRONG><a name="[57f]"></a>sch_prog_fifo_isr_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_prog_fifo_isr_func_patch
</UL>

<P><STRONG><a name="[57e]"></a>sch_prog_push_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_prog_push_patch
</UL>

<P><STRONG><a name="[23e]"></a>stack_raw_log_output</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_encrypt_req_ind_handler_patch
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_bond_req_ind_handler_patch
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_hci_command_handler_patch
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_llcp_rx_ind_handler_patch
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_sdu_recv_ind_handler_patch
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect_ind_handler_patch
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connection_req_ind_handler_patch
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_activity_stopped_ind_handler_patch
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_item
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replace_item
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put_replace
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init_replace
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_used_nvds
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_item
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_check_param_func_patch
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_init_fsm_next_func_patch
</UL>

<P><STRONG><a name="[552]"></a>sys_context_save</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_ultra_sleep
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_shutdown_local_patch
</UL>

<P><STRONG><a name="[4e4]"></a>sys_security_enable_status_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_recovery
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_disable
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_mgmt_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_init_patch
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_xqspi_init_patch
</UL>

<P><STRONG><a name="[ea]"></a>uart_dma_abort_on_error</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_uart_patch.o(i.hal_uart_irq_handler)
</UL>
<P><STRONG><a name="[36c]"></a>uart_end_rx_transfer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_irq_handler
</UL>

<P><STRONG><a name="[500]"></a>uart_end_tx_transfer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_it
</UL>

<P><STRONG><a name="[36b]"></a>uart_receive_it</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_irq_handler
</UL>

<P><STRONG><a name="[501]"></a>uart_wait_line_flag_until_timeout</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_it
</UL>

<P><STRONG><a name="[56c]"></a>pwr_mgmt_load_context</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_boot
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_boot_first
</UL>

<P><STRONG><a name="[cc]"></a>BLE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> system_sdk_patch.o(i.ble_stack_inner_init)
</UL>
<P><STRONG><a name="[123]"></a>BLE_IRQHandler_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> rwip_sleep_patch.o(i.rwip_sleep_init_with_stack_init)
</UL>
<P><STRONG><a name="[109]"></a>BLE_PWR_ON_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> platform_sdk.o(i.platform_sdk_init)
</UL>
<P><STRONG><a name="[1b0]"></a>BLE_PWR_ON_IRQHandler_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_PWR_ON_IRQHandler_func_patch
</UL>

<P><STRONG><a name="[cb]"></a>BLE_SDK_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> system_sdk_patch.o(i.ble_stack_inner_init)
</UL>
<P><STRONG><a name="[124]"></a>BLE_SDK_Handler_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> rwip_sleep_patch.o(i.rwip_sleep_init_with_stack_init)
</UL>
<P><STRONG><a name="[4cf]"></a>ble_core_is_powered_on</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_wakeup_init_patch
</UL>

<P><STRONG><a name="[550]"></a>ble_core_sleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_shutdown_local_patch
</UL>

<P><STRONG><a name="[125]"></a>ble_core_sleep_ori</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> rwip_sleep_patch.o(i.rwip_sleep_init_with_stack_init)
</UL>
<P><STRONG><a name="[249]"></a>ble_gap_addr_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_init
</UL>

<P><STRONG><a name="[30a]"></a>ble_gap_adv_data_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
</UL>

<P><STRONG><a name="[309]"></a>ble_gap_adv_param_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
</UL>

<P><STRONG><a name="[1ed]"></a>ble_gap_adv_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconnected_handler
</UL>

<P><STRONG><a name="[26a]"></a>ble_gap_conn_param_update_reply</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[308]"></a>ble_gap_device_name_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
</UL>

<P><STRONG><a name="[307]"></a>ble_gap_pair_enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
</UL>

<P><STRONG><a name="[30b]"></a>ble_gap_per_sync_stop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_per_sync_cancel_check
</UL>

<P><STRONG><a name="[4e0]"></a>ble_gapc_auth_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_encrypt_req_ind_handler_patch
</UL>

<P><STRONG><a name="[4dc]"></a>ble_gapc_enc_keysize_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_bond_req_ind_handler_patch
</UL>

<P><STRONG><a name="[2f5]"></a>ble_gapc_role_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connection_req_ind_handler_patch
</UL>

<P><STRONG><a name="[4db]"></a>ble_gapm_irk_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_bond_req_ind_handler_patch
</UL>

<P><STRONG><a name="[26b]"></a>ble_gattc_indicate_cfm</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[423]"></a>ble_gatts_noti_ind</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_notify_tx_data
</UL>

<P><STRONG><a name="[424]"></a>ble_gatts_read_cfm</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_read_att_evt_handler
</UL>

<P><STRONG><a name="[459]"></a>ble_gatts_service_changed</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_end_replace
</UL>

<P><STRONG><a name="[288]"></a>ble_gatts_srvc_db_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_service_load_cb
</UL>

<P><STRONG><a name="[425]"></a>ble_gatts_write_cfm</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_write_att_evt_handler
</UL>

<P><STRONG><a name="[55a]"></a>ble_is_allowed_srpg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultra_srpg_patch
</UL>

<P><STRONG><a name="[576]"></a>ble_iso_bts_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wait_for_wakeup_state
</UL>

<P><STRONG><a name="[4da]"></a>ble_ke_msg_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_encrypt_req_ind_handler_patch
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_bond_req_ind_handler_patch
</UL>

<P><STRONG><a name="[4df]"></a>ble_ke_msg_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_encrypt_req_ind_handler_patch
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_bond_req_ind_handler_patch
</UL>

<P><STRONG><a name="[28d]"></a>ble_manual_power_off</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep_successfully_without_stack_init
</UL>

<P><STRONG><a name="[2ae]"></a>ble_nvds_put</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_slave_md_set
</UL>

<P><STRONG><a name="[281]"></a>ble_prf_get_id_from_task</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_gattc_record_profile_id_by_dest_id
</UL>

<P><STRONG><a name="[ef]"></a>ble_sdk_common_timeout_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> ble_sdk_task_patch.o(i.host_to_sdk_msg_handler_patch)
</UL>
<P><STRONG><a name="[27e]"></a>ble_sdk_gattc_extend_prf_cmp_evt_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_gattc_extend_prf_cmp_evt_handler_patch
</UL>

<P><STRONG><a name="[27f]"></a>ble_sdk_gattc_extend_prf_event_ind_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_gattc_extend_prf_event_ind_handler_patch
</UL>

<P><STRONG><a name="[280]"></a>ble_sdk_gattc_extend_prf_sdp_srvc_ind_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_gattc_extend_prf_sdp_srvc_ind_handler_patch
</UL>

<P><STRONG><a name="[570]"></a>ble_sdk_rf_wakeup_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwr_on_wakeup_reset_core
</UL>

<P><STRONG><a name="[26d]"></a>ble_server_prf_add</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_prf_add
</UL>

<P><STRONG><a name="[291]"></a>ble_stack_init_origin</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_inner_init
</UL>

<P><STRONG><a name="[387]"></a>check_iso_msg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_to_sdk_msg_handler_patch
</UL>

<P><STRONG><a name="[2aa]"></a>dec_flash_read</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_nvds
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init_replace
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_power_loss
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_nvds
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conti_read_sector
</UL>

<P><STRONG><a name="[39b]"></a>dec_flash_trunc_read</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replace_item
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put_replace
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_power_loss
</UL>

<P><STRONG><a name="[4b9]"></a>dec_flash_trunc_write</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_item
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replace_item
</UL>

<P><STRONG><a name="[328]"></a>dec_flash_write</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_unwr_info
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_nvds
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_item
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_nvds
</UL>

<P><STRONG><a name="[513]"></a>dec_flash_write_incr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_nvds
</UL>

<P><STRONG><a name="[420]"></a>dfu_ble_receive_data_process</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_evt_process
</UL>

<P><STRONG><a name="[421]"></a>dfu_ble_send_data_cmpl_process</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_evt_process
</UL>

<P><STRONG><a name="[41f]"></a>dfu_cmd_parse_state_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_evt_process
</UL>

<P><STRONG><a name="[45f]"></a>dfu_flash_cal_check_sum</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash_replace
</UL>

<P><STRONG><a name="[2db]"></a>dfu_flash_erase</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_start_replace
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash_replace
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_erase_flash
</UL>

<P><STRONG><a name="[460]"></a>dfu_flash_programe</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash_replace
</UL>

<P><STRONG><a name="[2d9]"></a>dfu_flash_read</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_cal_check_sum
</UL>

<P><STRONG><a name="[45b]"></a>dfu_flash_type_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_start_replace
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash_replace
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_end_replace
</UL>

<P><STRONG><a name="[2de]"></a>dfu_flash_write</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash_replace
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_program_schedule
</UL>

<P><STRONG><a name="[2b4]"></a>dfu_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_port_init
</UL>

<P><STRONG><a name="[45a]"></a>dfu_program_end</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_end_replace
</UL>

<P><STRONG><a name="[462]"></a>dfu_program_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_start_replace
</UL>

<P><STRONG><a name="[2df]"></a>dfu_programing</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash_replace
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_program_schedule
</UL>

<P><STRONG><a name="[2b7]"></a>normal_dfu_schedule</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_schedule
</UL>

<P><STRONG><a name="[45e]"></a>dfu_security_check_enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_start_replace
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash_replace
</UL>

<P><STRONG><a name="[2b0]"></a>dfu_send_frame</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_start_replace
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash_replace
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_end_replace
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_info_replace
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_program_schedule
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_erase_flash
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_fw_info_get
</UL>

<P><STRONG><a name="[2b5]"></a>dfu_set_cmd_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_port_init
</UL>

<P><STRONG><a name="[410]"></a>find_item</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put_replace
</UL>

<P><STRONG><a name="[2f8]"></a>fpb_load_state</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_encrypt_req_ind_handler_patch
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_bond_req_ind_handler_patch
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect_ind_handler_patch
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connection_req_ind_handler_patch
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_init_fsm_next_func_patch
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_handler_proc
</UL>

<P><STRONG><a name="[2f9]"></a>fpb_save_state</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_encrypt_req_ind_handler_patch
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_bond_req_ind_handler_patch
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect_ind_handler_patch
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connection_req_ind_handler_patch
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_init_fsm_next_func_patch
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_handler_proc
</UL>

<P><STRONG><a name="[302]"></a>gap_activity_opera_end</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_init_fsm_next_func_patch
</UL>

<P><STRONG><a name="[301]"></a>gap_create_initiating</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_init_fsm_next_func_patch
</UL>

<P><STRONG><a name="[303]"></a>gap_delete_initiating</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_init_fsm_next_func_patch
</UL>

<P><STRONG><a name="[2f3]"></a>gap_get_adv_idx_by_actv_idx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_activity_stopped_ind_handler_patch
</UL>

<P><STRONG><a name="[2f4]"></a>gap_get_per_sync_idx_by_actv_idx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_activity_stopped_ind_handler_patch
</UL>

<P><STRONG><a name="[2fa]"></a>gap_reslv_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connection_req_ind_handler_patch
</UL>

<P><STRONG><a name="[304]"></a>gap_start_initiating</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_init_fsm_next_func_patch
</UL>

<P><STRONG><a name="[305]"></a>gap_stop_initiating</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_init_fsm_next_func_patch
</UL>

<P><STRONG><a name="[2f7]"></a>gatt_on_connection</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connection_req_ind_handler_patch
</UL>

<P><STRONG><a name="[2fc]"></a>gatt_on_disconnection</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect_ind_handler_patch
</UL>

<P><STRONG><a name="[50f]"></a>gen_hdr_checksum</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_item
</UL>

<P><STRONG><a name="[510]"></a>gen_value_checksum</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_item
</UL>

<P><STRONG><a name="[23d]"></a>get_align_bytes</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_unwr_info
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_nvds
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_item
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replace_item
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_power_loss
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_used_nvds
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_nvds
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_del_item
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_item
</UL>

<P><STRONG><a name="[306]"></a>get_conn_idx_by_hdl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_init_fsm_next_func_patch
</UL>

<P><STRONG><a name="[388]"></a>get_msg_handler_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_to_sdk_msg_handler_patch
</UL>

<P><STRONG><a name="[2e7]"></a>get_next_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put_replace
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_power_loss
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_used_nvds
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_del_item
</UL>

<P><STRONG><a name="[2c]"></a>hal_flash_erase</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_setup
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_end_replace
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_port.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>hal_flash_erase_chip</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> dfu_port.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>hal_flash_get_info</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> dfu_port.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>hal_flash_get_security</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_disable
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash_replace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_port.o(.data)
</UL>
<P><STRONG><a name="[440]"></a>hal_flash_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_flash_init
</UL>

<P><STRONG><a name="[2a]"></a>hal_flash_read</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_end_replace
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_judge_security
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_port.o(.data)
</UL>
<P><STRONG><a name="[416]"></a>hal_flash_sector_size</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_setup
</UL>

<P><STRONG><a name="[2e]"></a>hal_flash_set_security</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_recovery
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_disable
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash_replace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_port.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>hal_flash_write</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_end_replace
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_port.o(.data)
</UL>
<P><STRONG><a name="[40f]"></a>init_unused_nvds</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init_replace
</UL>

<P><STRONG><a name="[456]"></a>is_io_ldo_use_3p3_v</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ioldo_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_io_ldo_bypass_by_vbatt
</UL>

<P><STRONG><a name="[411]"></a>is_item_same</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put_replace
</UL>

<P><STRONG><a name="[511]"></a>is_truncated</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_item
</UL>

<P><STRONG><a name="[323]"></a>local_flash_erase</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_nvds
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_nvds
</UL>

<P><STRONG><a name="[40b]"></a>local_flash_get_info</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init_replace
</UL>

<P><STRONG><a name="[40c]"></a>local_flash_get_security</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init_replace
</UL>

<P><STRONG><a name="[2e5]"></a>local_flash_set_security</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_used_nvds
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_del_item
</UL>

<P><STRONG><a name="[2e6]"></a>local_flash_trunc_read</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_nvds
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_used_nvds
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_del_item
</UL>

<P><STRONG><a name="[50e]"></a>local_flash_trunc_write_incr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_nvds
</UL>

<P><STRONG><a name="[512]"></a>local_flash_trunc_write_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_item
</UL>

<P><STRONG><a name="[408]"></a>mem_pwr_mgmt_sleep_state_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pwr_mgmt_mode_set
</UL>

<P><STRONG><a name="[407]"></a>mem_pwr_mgmt_work_state_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pwr_mgmt_mode_set
</UL>

<P><STRONG><a name="[584]"></a>memcpy_ram</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_load_nvic
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_save_nvic
</UL>

<P><STRONG><a name="[415]"></a>nvds_get_start_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_setup
</UL>

<P><STRONG><a name="[414]"></a>nvds_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_setup
</UL>

<P><STRONG><a name="[20c]"></a>nvds_put</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_sdk_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_periph_init
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_ble_clk
</UL>

<P><STRONG><a name="[413]"></a>nvds_retention_size</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_setup
</UL>

<P><STRONG><a name="[2ed]"></a>platform_flash_enable_quad</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_class_task
</UL>

<P><STRONG><a name="[538]"></a>pwr_mgmt_ble_wakeup</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_get
</UL>

<P><STRONG><a name="[553]"></a>pwr_mgmt_check_ext_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_shutdown_local_patch
</UL>

<P><STRONG><a name="[211]"></a>pwr_mgmt_dev_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwr_mgmt_init
</UL>

<P><STRONG><a name="[56b]"></a>pwr_mgmt_dev_resume</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_boot
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_boot_first
</UL>

<P><STRONG><a name="[549]"></a>pwr_mgmt_dev_suspend</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_enter_sleep_with_cond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultra_srpg_patch
</UL>

<P><STRONG><a name="[43c]"></a>pwr_mgmt_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_init
</UL>

<P><STRONG><a name="[558]"></a>pwr_mgmt_locker</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_ultra_sleep
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultra_srpg_patch
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultra_wfi_patch
</UL>

<P><STRONG><a name="[547]"></a>pwr_mgmt_mode_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_enter_sleep_with_cond
</UL>

<P><STRONG><a name="[212]"></a>pwr_mgmt_set_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwr_mgmt_init
</UL>

<P><STRONG><a name="[551]"></a>pwr_mgmt_set_wakeup_flag</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_shutdown_local_patch
</UL>

<P><STRONG><a name="[542]"></a>pwr_mgmt_sleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_system_sleep
</UL>

<P><STRONG><a name="[559]"></a>pwr_mgmt_unlocker</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultra_srpg_patch
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultra_wfi_patch
</UL>

<P><STRONG><a name="[442]"></a>pwr_mgmt_warm_boot_reg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_sdk_init
</UL>

<P><STRONG><a name="[44f]"></a>rf_set_recalibration_flag</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_by_sw
</UL>

<P><STRONG><a name="[438]"></a>rf_xo_offset_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_init
</UL>

<P><STRONG><a name="[575]"></a>rwip_clkn_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wait_for_wakeup_state
</UL>

<P><STRONG><a name="[574]"></a>rwip_lpcycles_2_hus</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remain_sleep_dur
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wait_for_wakeup_state
</UL>

<P><STRONG><a name="[28c]"></a>rwip_us_2_lpcycles</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep_successfully_without_stack_init
</UL>

<P><STRONG><a name="[4f7]"></a>sdk_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_platform_init
</UL>

<P><STRONG><a name="[4de]"></a>sec_build_rand16</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_bond_req_ind_handler_patch
</UL>

<P><STRONG><a name="[2fd]"></a>sec_clear_bond_info_env</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect_ind_handler_patch
</UL>

<P><STRONG><a name="[2f6]"></a>sec_on_conn_complete</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connection_req_ind_handler_patch
</UL>

<P><STRONG><a name="[2fb]"></a>sec_on_disconn</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect_ind_handler_patch
</UL>

<P><STRONG><a name="[45d]"></a>send_frame_state</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash_replace
</UL>

<P><STRONG><a name="[55b]"></a>srpg_is_allowed</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultra_srpg_patch
</UL>

<P><STRONG><a name="[450]"></a>sys_adc_trim_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_by_sw
</UL>

<P><STRONG><a name="[1e7]"></a>sys_assert_cb_register</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_init
</UL>

<P><STRONG><a name="[28b]"></a>sys_ble_heartbeat_period_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep_successfully_without_stack_init
</UL>

<P><STRONG><a name="[2bb]"></a>sys_efuse_info_sync</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_pmu_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_io_ldo_bypass_by_vbatt
</UL>

<P><STRONG><a name="[2e1]"></a>sys_lld_max_msg_usage_ratio_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_program_schedule
</UL>

<P><STRONG><a name="[3fd]"></a>sys_lpclk_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_clock_freq_update
</UL>

<P><STRONG><a name="[26e]"></a>sys_malloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_prf_add
</UL>

<P><STRONG><a name="[333]"></a>sys_next_wakeup_src_is_ble</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_switch_sys_clk_to_hf_osc_patch
</UL>

<P><STRONG><a name="[4d0]"></a>sys_rf_trim_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rssi_adjust_according_to_rx_parameters
</UL>

<P><STRONG><a name="[325]"></a>tags_cache_clean</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_nvds
</UL>

<P><STRONG><a name="[39a]"></a>tags_cache_rec_add</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_item
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_used_nvds
</UL>

<P><STRONG><a name="[4ba]"></a>tags_cache_rec_del</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replace_item
</UL>

<P><STRONG><a name="[399]"></a>verify_hdr_checksum</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put_replace
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_used_nvds
</UL>

<P><STRONG><a name="[327]"></a>write_to_gc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_gc_match_buffer
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_nvds
</UL>

<P><STRONG><a name="[1e]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gr_interrupt.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; hardfault_trace_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardfault_trace_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup.o(RESET)
<LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gr_interrupt.o(RAM_CODE))
<BR>[Address Reference Count : 2]<UL><LI> startup.o(RESET)
<LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[532]"></a>hardfault_trace_handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, gr_interrupt.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = hardfault_trace_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_flush
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[587]"></a>cortex_backtrace_fault_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gr_interrupt.o(RAM_CODE), UNUSED)

<P><STRONG><a name="[be]"></a>EXT2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_io.o(RAM_CODE))
<BR><BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_exti_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_io.o(i.app_io_init)
</UL>
<P><STRONG><a name="[bd]"></a>AON_EXT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_io.o(RAM_CODE))
<BR><BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_aon_gpio_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_io.o(i.app_io_init)
</UL>
<P><STRONG><a name="[bc]"></a>EXT1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_io.o(RAM_CODE))
<BR><BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_exti_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_io.o(i.app_io_init)
</UL>
<P><STRONG><a name="[bb]"></a>EXT0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_io.o(RAM_CODE))
<BR><BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_exti_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_io.o(i.app_io_init)
</UL>
<P><STRONG><a name="[bf]"></a>pwr_wake_up_ind_new</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app_pwr_mgmt.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pwr_wake_up_ind_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_pwr_mgmt.o(i.app_pwr_mgmt_init)
</UL>
<P><STRONG><a name="[588]"></a>pwr_wake_up_ind</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_pwr_mgmt.o(RAM_CODE), UNUSED)

<P><STRONG><a name="[c2]"></a>SPI_M_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_spi.o(RAM_CODE))
<BR><BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_spi.o(i.app_spi_init)
</UL>
<P><STRONG><a name="[c1]"></a>SPI_S_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_spi.o(RAM_CODE))
<BR><BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_spi.o(i.app_spi_init)
</UL>
<P><STRONG><a name="[ba]"></a>I2C5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_i2c.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C5_IRQHandler &rArr; hal_i2c_irq_handler &rArr; i2c_it_error &rArr; hal_i2c_error_callback &rArr; app_i2c_event_call
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_i2c.o(i.app_i2c_init)
</UL>
<P><STRONG><a name="[b9]"></a>I2C4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_i2c.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C4_IRQHandler &rArr; hal_i2c_irq_handler &rArr; i2c_it_error &rArr; hal_i2c_error_callback &rArr; app_i2c_event_call
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_i2c.o(i.app_i2c_init)
</UL>
<P><STRONG><a name="[b8]"></a>I2C3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_i2c.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C3_IRQHandler &rArr; hal_i2c_irq_handler &rArr; i2c_it_error &rArr; hal_i2c_error_callback &rArr; app_i2c_event_call
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_i2c.o(i.app_i2c_init)
</UL>
<P><STRONG><a name="[b7]"></a>I2C2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_i2c.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C2_IRQHandler &rArr; hal_i2c_irq_handler &rArr; i2c_it_error &rArr; hal_i2c_error_callback &rArr; app_i2c_event_call
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_i2c.o(i.app_i2c_init)
</UL>
<P><STRONG><a name="[b6]"></a>I2C1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_i2c.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C1_IRQHandler &rArr; hal_i2c_irq_handler &rArr; i2c_it_error &rArr; hal_i2c_error_callback &rArr; app_i2c_event_call
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_i2c.o(i.app_i2c_init)
</UL>
<P><STRONG><a name="[b5]"></a>I2C0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_i2c.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C0_IRQHandler &rArr; hal_i2c_irq_handler &rArr; i2c_it_error &rArr; hal_i2c_error_callback &rArr; app_i2c_event_call
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_i2c.o(i.app_i2c_init)
</UL>
<P><STRONG><a name="[218]"></a>ble_time_get</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, ble_time.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_time_get
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_time_get
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_ble_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_time_sync
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rtc_init_time
</UL>

<P><STRONG><a name="[54a]"></a>wfe_func</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port_pm.o(RAM_CODE))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_enter_sleep_with_cond
</UL>

<P><STRONG><a name="[132]"></a>RTC1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port_pm.o(RAM_CODE))
<BR><BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port_pm.o(i.vPortSetupTimerInterrupt)
</UL>
<P><STRONG><a name="[97]"></a>hal_rtc_tick_callback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port_pm.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_rtc_tick_callback &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_rtc.o(.data)
</UL>
<P><STRONG><a name="[478]"></a>vPortEnterDeepSleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_pm.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vPortEnterDeepSleep &rArr; pwr_mgmt_enter_sleep_with_cond &rArr; systick_compensate_restart &rArr; system_sleep_tick_compensate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_enter_sleep_with_cond
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[143]"></a>gr5xx_svc_process</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, svc_handler.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gr5xx_svc_process &rArr; SVC_handler_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_handler_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_interrupt.o(RAM_CODE)
</UL>
<P><STRONG><a name="[54d]"></a>SVC_handler_proc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, svc_handler.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SVC_handler_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_user_handler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_save_state
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_load_state
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_patch_rep_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr5xx_svc_process
</UL>

<P><STRONG><a name="[112]"></a>pwr_mgmt_shutdown_local_patch</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, sdk_pwr_mgmt_patch.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pwr_mgmt_shutdown_local_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_sys_context
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_set_wakeup_flag
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_check_ext_timer
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_core_sleep
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_context_save
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_enter_chip_deepsleep
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_init_ext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdk_pwr_mgmt_patch.o(i.pwr_mgmt_shutdown_replace)
</UL>
<P><STRONG><a name="[557]"></a>ultra_wfi_patch</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sdk_pwr_mgmt_patch.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ultra_wfi_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_unlocker
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_locker
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultra_srpg_patch
</UL>

<P><STRONG><a name="[131]"></a>ultra_srpg_patch</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sdk_pwr_mgmt_patch.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ultra_srpg_patch &rArr; ultra_wfi_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_dev_suspend
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_unlocker
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_locker
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_is_allowed_srpg
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srpg_is_allowed
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultra_wfi_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdk_pwr_mgmt_patch.o(i.ultra_wfi_replace)
</UL>
<P><STRONG><a name="[55c]"></a>pwr_mgmt_ultra_sleep</STRONG> (Thumb, 338 bytes, Stack size 0 bytes, sdk_pwr_mgmt_patch.o(RAM_CODE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_locker
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_context_save
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_deepsleep
</UL>

<P><STRONG><a name="[2b3]"></a>hal_nvic_system_reset</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, gr55xx_hal_cortex_patch.o(RAM_CODE))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_end_replace
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mode_set
</UL>

<P><STRONG><a name="[55e]"></a>exflash_enable_quad_patch</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, gr55xx_hal_exflash_patch.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = exflash_enable_quad_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_xqspi_command_receive
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exflash_write_status
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_enable_quad_patch
</UL>

<P><STRONG><a name="[110]"></a>hal_exflash_init_patch</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, gr55xx_hal_exflash_patch.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_exflash_init_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_security_enable_status_check
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_xqspi_init_ext
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exflash_wakeup
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exflash_check_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_exflash_patch.o(i.platform_xqspi_env_init)
</UL>
<P><STRONG><a name="[111]"></a>hal_exflash_enable_quad_patch</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gr55xx_hal_exflash_patch.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hal_exflash_enable_quad_patch &rArr; exflash_enable_quad_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_xqspi_init_ext
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exflash_enable_quad_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_exflash_patch.o(i.platform_xqspi_env_init)
</UL>
<P><STRONG><a name="[564]"></a>exflash_read_uid</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, gr55xx_hal_exflash_patch.o(RAM_CODE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_xqspi_init_ext
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_xqspi_command_receive
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exflash_read_uid
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exflash_read_uid
</UL>

<P><STRONG><a name="[565]"></a>exflash_read_status_reg</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, gr55xx_hal_exflash_patch.o(RAM_CODE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_xqspi_command_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_read_status_reg
</UL>

<P><STRONG><a name="[566]"></a>hal_exflash_read_status_reg</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gr55xx_hal_exflash_patch.o(RAM_CODE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_xqspi_init_ext
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exflash_read_status_reg
</UL>

<P><STRONG><a name="[567]"></a>hal_exflash_write_status_reg</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gr55xx_hal_exflash_patch.o(RAM_CODE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_xqspi_init_ext
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exflash_write_status
</UL>

<P><STRONG><a name="[10e]"></a>warm_boot_second</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, platform_sdk.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = warm_boot_second &rArr; fast_load_nvic
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_load_nvic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_sdk.o(i.platform_sdk_init)
</UL>
<P><STRONG><a name="[569]"></a>warm_boot_first</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, platform_sdk.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = warm_boot_first
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_dev_resume
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_load_context
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_warm_boot
</UL>

<P><STRONG><a name="[56d]"></a>warm_boot</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, platform_sdk.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = warm_boot &rArr; fast_load_nvic
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_load_nvic
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_dev_resume
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_load_context
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_warm_boot
</UL>

<P><STRONG><a name="[50b]"></a>pwr_mgmt_warm_boot</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, platform_sdk.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pwr_mgmt_warm_boot &rArr; warm_boot &rArr; fast_load_nvic
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_boot
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_boot_first
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_boot_process
</UL>

<P><STRONG><a name="[56e]"></a>ble_pwr_on_wakeup_reset_core</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, rwip_sleep_common.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_pwr_on_wakeup_reset_core
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_int_enable
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_int_disable
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecore_register_settings_reload
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_rf_wakeup_init
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwr_on_wakeup_workaround_check
</UL>

<P><STRONG><a name="[573]"></a>ble_pwr_on_wakeup_workaround_check</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rwip_sleep_common.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_pwr_on_wakeup_workaround_check &rArr; ble_pwr_on_wakeup_reset_core
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwr_on_wakeup_reset_core
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wait_for_wakeup_state
</UL>

<P><STRONG><a name="[27a]"></a>ble_wait_for_wakeup_state</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, rwip_sleep_common.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_wait_for_wakeup_state &rArr; ble_pwr_on_wakeup_workaround_check &rArr; ble_pwr_on_wakeup_reset_core
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_iso_bts_set
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_time_get
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwr_on_wakeup_workaround_check
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_lpcycles_2_hus
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_clkn_set
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rwip_wakeup_patch
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwr_on_handler_without_stack_init
</UL>

<P><STRONG><a name="[589]"></a>ble_wait_for_sleep_state</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rwip_sleep_common.o(RAM_CODE), UNUSED)

<P><STRONG><a name="[129]"></a>ble_sdk_handler_without_stack_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rwip_sleep_common.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_sdk_handler_without_stack_init
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwip_sleep_common.o(i.rwip_sleep_init_without_stack_init)
</UL>
<P><STRONG><a name="[108]"></a>BLESLP_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rwip_sleep_common.o(RAM_CODE))
<BR><BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_sdk.o(i.platform_sdk_init)
</UL>
<P><STRONG><a name="[128]"></a>ble_irq_handler_without_stack_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rwip_sleep_common.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_irq_handler_without_stack_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQ_Handler_without_stack_init
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_suspend
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwip_sleep_common.o(i.rwip_sleep_init_without_stack_init)
</UL>
<P><STRONG><a name="[28e]"></a>ble_release_xo_osc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rwip_sleep_common.o(RAM_CODE))
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_release_xo_osc
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep_successfully_without_stack_init
</UL>

<P><STRONG><a name="[121]"></a>ble_rwip_wakeup_patch</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rwip_sleep_patch.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ble_rwip_wakeup_patch &rArr; ble_wait_for_wakeup_state &rArr; ble_pwr_on_wakeup_workaround_check &rArr; ble_pwr_on_wakeup_reset_core
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wait_for_wakeup_state
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwip_sleep_patch.o(i.rwip_sleep_init_with_stack_init)
</UL>
<P><STRONG><a name="[57b]"></a>get_remain_sleep_dur</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rwip_sleep_patch.o(RAM_CODE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prevent_sleep_get
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_lpcycles_2_hus
</UL>

<P><STRONG><a name="[57d]"></a>sys_srpg_set_sys_clock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, srpg_manager_patch.o(RAM_CODE))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srpg_sleep_local_patch
</UL>

<P><STRONG><a name="[12d]"></a>srpg_sleep_local_patch</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, srpg_manager_patch.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = srpg_sleep_local_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_srpg_set_sys_clock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> srpg_manager_patch.o(i.srpg_sleep_replace)
</UL>
<P><STRONG><a name="[da]"></a>sch_prog_push_patch</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sch_prog_patch.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sch_prog_push_patch &rArr; para_adjust_before_ble_event_start &rArr; pmu_adjust_before_ble_event_start &rArr; pmu_dcdc_dcore_info_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_adjust_before_ble_event_start
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_prog_push_func
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sch_prog_patch.o(i.sch_prog_replace)
<LI> lld_test_patch.o(i.dtm_test_init_patch)
</UL>
<P><STRONG><a name="[12b]"></a>sch_prog_fifo_isr_func_patch</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sch_prog_patch.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sch_prog_fifo_isr_func_patch &rArr; para_adjust_after_ble_event_end &rArr; pmu_adjust_after_ble_event_end &rArr; pmu_dcdc_dcore_info_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_adjust_after_ble_event_end
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_prog_fifo_isr_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sch_prog_patch.o(i.sch_prog_replace)
</UL>
<P><STRONG><a name="[580]"></a>ll_xqspi_clear_xip_rx_fifo_full</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, gr55xx_ll_xqspi_patch.o(RAM_CODE))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_xqspi_init_patch
</UL>

<P><STRONG><a name="[10f]"></a>ll_xqspi_init_patch</STRONG> (Thumb, 770 bytes, Stack size 16 bytes, gr55xx_ll_xqspi_patch.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_xqspi_init_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_security_enable_status_check
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_xqspi_clear_xip_rx_fifo_full
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_xqspi_disable_cache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_exflash_patch.o(i.platform_xqspi_env_init)
</UL>
<P><STRONG><a name="[e7]"></a>warm_boot_clock_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gr55xx_hal_clock_patch.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = warm_boot_clock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_encrypt_clock_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_clock_patch.o(i.hal_clock_function_replace)
</UL>
<P><STRONG><a name="[d2]"></a>delay_us_dwt_patch</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gr55xx_delay_patch.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_us_dwt_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dwt_enable
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dwt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_delay_patch.o(i.delay_function_replace)
</UL>
<P><STRONG><a name="[582]"></a>sys_encrypt_clock_set</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, platform_sys_context.o(RAM_CODE))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_context_srpg_save_func
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_context_save_func
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_boot_clock_init
</UL>

<P><STRONG><a name="[585]"></a>aon_msio_not_ret_workaround</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, platform_sys_context.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aon_msio_not_ret_workaround
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_context_srpg_save_func
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_context_save_func
</UL>

<P><STRONG><a name="[583]"></a>fast_save_nvic</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, platform_sys_context.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fast_save_nvic
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_context_save_func
</UL>

<P><STRONG><a name="[568]"></a>fast_load_nvic</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, platform_sys_context.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fast_load_nvic
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_boot_second
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_boot
</UL>

<P><STRONG><a name="[10a]"></a>sys_context_save_func</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, platform_sys_context.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sys_context_save_func &rArr; aon_msio_not_ret_workaround
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_save_nvic
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aon_msio_not_ret_workaround
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_encrypt_clock_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_sdk.o(i.platform_sdk_init)
</UL>
<P><STRONG><a name="[10b]"></a>sys_context_restore_func</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, platform_sys_context.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_context_restore_func
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;force_dpad_le_high
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_sdk.o(i.platform_sdk_init)
</UL>
<P><STRONG><a name="[10c]"></a>sys_context_srpg_save_func</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, platform_sys_context.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sys_context_srpg_save_func &rArr; aon_msio_not_ret_workaround
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aon_msio_not_ret_workaround
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_encrypt_clock_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_sdk.o(i.platform_sdk_init)
</UL>
<P><STRONG><a name="[10d]"></a>sys_context_srpg_restore_func</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, platform_sys_context.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_context_srpg_restore_func
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;force_dpad_le_high
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_sdk.o(i.platform_sdk_init)
</UL>
<P><STRONG><a name="[144]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_init
</UL>

<P><STRONG><a name="[146]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[148]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[58a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[58b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[58c]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[58d]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[149]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[58e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[14a]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[191]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[14c]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[14e]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[150]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[151]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[152]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[58f]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[154]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[156]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[157]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[158]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[15a]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[15c]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[15e]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[15f]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[160]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[162]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[590]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[164]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[166]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[168]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[16a]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[591]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[177]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[16c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[592]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[593]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[16e]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[594]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[170]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[595]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[596]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[172]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[597]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[598]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[173]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[599]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[59a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[59b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[59c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[175]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[59d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[59e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[59f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[5a0]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[5a1]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[5a2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[5a3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[5a4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[5a5]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[17c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[5a6]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[5a7]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[5a8]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[5a9]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[5aa]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[5ab]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[5ac]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[147]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[5ad]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[5ae]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[176]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[5af]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[178]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ads1299_init &rArr; ads1299_all_reg_read &rArr; ads1299_read_reg &rArr; ads1299_hw_spi_transmit_receive &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5b0]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1a8]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[17b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[5b1]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[17d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_service_load_cb
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_write_cb
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_read_cb
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_prep_write_cb
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_ntf_ind_cb
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_mult_ntf_cb
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_enh_write_cb
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_enh_read_cb
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_enh_prep_write_cb
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_enh_ntf_ind_cb
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_enh_mult_ntf_cb
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_enh_cccd_set_cb
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_cccd_set_cb
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cb
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_srvc_disc_cb
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_srvc_browse_cb
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cb
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_ntf_ind_cb
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_inc_srvc_disc_cb
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_write_cb
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_srvc_disc_cb
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_srvc_browse_cb
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_read_cb
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_ntf_ind_cb
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_inc_srvc_disc_cb
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_char_disc_cb
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_char_desc_disc_cb
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_char_disc_cb
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_char_desc_disc_cb
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cache_update_cb
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_keypress_notify_cb
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_key_missing_cb
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_enc_req_cb
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_enc_ind_cb
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_lecb_sdu_send_cb
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_lecb_sdu_recv_cb
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_lecb_disconn_cb
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_lecb_credit_add_cmp_cb
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_lecb_conn_req_cb
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_lecb_conn_cb
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_lecb_add_credits_ind_cb
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_enh_lecb_reconfig_ind_cb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_enh_lecb_reconfig_cmp_cb
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_enh_lecb_conn_req_cb
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_enh_lecb_conn_cb
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_prf_register_cb
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_mtu_exchange_cb
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_tx_power_change_report_cb
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sync_lost_cb
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sync_establish_cb
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_subrate_chg_ind_cb
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_stop_sync_cb
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_scan_stop_cb
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_scan_start_cb
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_scan_req_ind_cb
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_rslv_addr_read_cb
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_remote_tx_power_read_cb
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_ranging_sample_report_cb
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_ranging_ind_cb
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_ranging_cmp_ind_cb
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_psm_manager_cb
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_phy_update_cb
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_peer_name_ind_cb
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_peer_info_get_cb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_path_loss_threshold_report_cb
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_param_set_cb
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_local_tx_power_read_cb
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_le_pkt_size_info_cb
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect_cb
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_dft_subrate_set_cb
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_device_info_set_cb
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_dev_info_get_cb
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connless_iq_report_cb
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connection_update_req_cb
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connection_update_cb
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connection_info_get_cb
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connect_cb
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connect_cancel_cb
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_conn_iq_report_cb
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_auto_connection_timeout_cb
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_adv_stop_cb
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_adv_start_cb
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_adv_report_ind_cb
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_adv_data_update_cb
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init_cplt_callback
</UL>

<P><STRONG><a name="[136]"></a>vPortSVCHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.xPortStartScheduler)
</UL>
<P><STRONG><a name="[517]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[515]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[24]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup.o(RESET)
<LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[5b2]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[3cc]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_sched_patch
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_evt_canceled_patch
</UL>

<P><STRONG><a name="[1c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup.o(RESET)
<LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup.o(RESET)
<LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup.o(RESET)
<LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup.o(RESET)
<LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[215]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rtc_get_time
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sleep_tick_compensate
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_sleep_timeout_set
</UL>

<P><STRONG><a name="[5b3]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
</UL>

<P><STRONG><a name="[184]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardfault_trace_handler
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_xyz
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_init
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_mag_xyz
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_init
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_i2c_scan
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_hw_init
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_soft_reset
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_set_range
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_recover
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_reg
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_mag_raw
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_get_chipid
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_enable
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_dump_reg
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_disable
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_hw_init
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_send_ctl9cmd
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_on_demand_cali
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_get_id
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_get_gyro_gain
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_dump_reg
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_soft_reset
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_reg
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_get_chip_info
</UL>

<P><STRONG><a name="[186]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_info_output
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[187]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
</UL>

<P><STRONG><a name="[189]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[18a]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[188]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[155]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[18e]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[15b]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[163]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[14d]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[18f]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[192]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[16f]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[321]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_encrypt_req_ind_handler_patch
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init_replace
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_srvc_browse_evt_handle
</UL>

<P><STRONG><a name="[1e2]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_warn_cb
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_param_cb
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_err_cb
</UL>

<P><STRONG><a name="[1e3]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_encrypt_req_ind_handler_patch
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_bond_req_ind_handler_patch
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_llcp_rx_ind_handler_patch
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_add_dev_to_rslv_list_cmd_handler_patch
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler_patch
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_warn_cb
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_param_cb
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_err_cb
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_start_replace
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_freq_table_init
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_low_power_auto_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_srvc_browse_cb
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_srvc_browse_cb
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_enc_req_cb
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_enh_lecb_reconfig_ind_cb
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_enh_lecb_conn_req_cb
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_enh_lecb_conn_cb
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sync_establish_cb
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_dev_info_get_cb
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connless_iq_report_cb
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connect_cb
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_conn_iq_report_cb
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_adv_report_ind_cb
</UL>

<P><STRONG><a name="[193]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[5b4]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seconds2_calendar_time
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_init
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr5xx_fpb_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconnected_handler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_save_state_local
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_patch_reg_resume
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_load_state_local
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr5xx_fpb_func_register
</UL>

<P><STRONG><a name="[5b5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[5b6]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[5b7]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[195]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[180]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1c6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_init
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_warn_cb
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_param_cb
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_err_cb
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_info_output
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_service_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_port_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init_replace
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_by_sw
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_data_from_adc
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_period_cali_start
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_fine_code_start
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_coarse_code_start
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_binary_search_fine_code_start
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_boot_cali_start
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_req_handler_patch
</UL>

<P><STRONG><a name="[5b8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[5b9]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[145]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[18b]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[18c]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[18d]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[14b]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[183]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[b0]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __2snprintf.o(.text)
<LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[197]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[165]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[167]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[185]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[199]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[15d]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[19c]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[159]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[161]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[19b]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[5ba]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1a5]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[1a6]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[169]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[16b]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[198]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[19a]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[1a7]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[171]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[1a4]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[19e]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17a]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[51f]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[19f]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1aa]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1a9]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1ab]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1ac]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1a0]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a1]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ad]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1ae]"></a>BLE_IRQ_Handler_without_stack_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rwip_sleep_common.o(i.BLE_IRQ_Handler_without_stack_init))
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_irq_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_irq_handler_without_stack_init
</UL>

<P><STRONG><a name="[122]"></a>BLE_PWR_ON_IRQHandler_func_patch</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rwip_sleep_patch.o(i.BLE_PWR_ON_IRQHandler_func_patch))
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_PWR_ON_IRQHandler_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwip_sleep_patch.o(i.rwip_sleep_init_with_stack_init)
</UL>
<P><STRONG><a name="[20]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gr_interrupt.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup.o(RESET)
<LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[cd]"></a>CLK_CALIB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, platform_clock_calib.o(i.CLK_CALIB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CLK_CALIB_IRQHandler &rArr; clock_calibration_irq_handler &rArr; slow_clock_calib_handler &rArr; boot_clock_freq_update &rArr; system_boot_timing_set &rArr; __hardfp_ceil &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_calibration_irq_handler
</UL>
<BR>[Address Reference Count : 3]<UL><LI> platform_clock_calib.o(i.hfosc_clk_calib_inner_start_new)
<LI> platform_clock_calib.o(i.low_power_clock_calib_start)
<LI> platform_clock_calib.o(i.boot_clock_calib_start)
</UL>
<P><STRONG><a name="[d1]"></a>CPLL_DRIFT_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, platform_pmu.o(i.CPLL_DRIFT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CPLL_DRIFT_IRQHandler &rArr; cpll_reset &rArr; SystemCoreSetClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpll_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_pmu.o(i.cpll_calibration_init)
</UL>
<P><STRONG><a name="[347]"></a>GetSerialClock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, platform_clock.o(i.GetSerialClock))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init_ext
</UL>

<P><STRONG><a name="[1f]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gr_interrupt.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup.o(RESET)
<LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[12c]"></a>SLPTIMER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer.o(i.SLPTIMER_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_sleep_timer_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer.o(i.sleep_timer_handler_register)
</UL>
<P><STRONG><a name="[4e3]"></a>SetSerialClock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, platform_clock.o(i.SetSerialClock))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_class_task
</UL>

<P><STRONG><a name="[2ac]"></a>SystemCoreGetClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, platform_clock.o(i.SystemCoreGetClock))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpll_reset
</UL>

<P><STRONG><a name="[1b4]"></a>SystemCoreSetClock</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, platform_clock.o(i.SystemCoreSetClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreSetClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_clk_set_sys_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_class_task
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_digcore_code_get
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpll_reset
</UL>

<P><STRONG><a name="[390]"></a>SystemCoreUpdateClock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, platform_clock.o(i.SystemCoreUpdateClock))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_flag_until_timeout
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_start_transmit
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_start_receive
</UL>

<P><STRONG><a name="[ad]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gr_system.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>UART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART0_IRQHandler &rArr; hal_uart_irq_handler &rArr; uart_transmit_it &rArr; hal_uart_tx_cplt_callback &rArr; app_uart_start_transmit_async &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[c4]"></a>UART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_uart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART1_IRQHandler &rArr; hal_uart_irq_handler &rArr; uart_transmit_it &rArr; hal_uart_tx_cplt_callback &rArr; app_uart_start_transmit_async &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[c5]"></a>UART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_uart.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART2_IRQHandler &rArr; hal_uart_irq_handler &rArr; uart_transmit_it &rArr; hal_uart_tx_cplt_callback &rArr; app_uart_start_transmit_async &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[c6]"></a>UART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_uart.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART3_IRQHandler &rArr; hal_uart_irq_handler &rArr; uart_transmit_it &rArr; hal_uart_tx_cplt_callback &rArr; app_uart_start_transmit_async &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[c7]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_uart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART4_IRQHandler &rArr; hal_uart_irq_handler &rArr; uart_transmit_it &rArr; hal_uart_tx_cplt_callback &rArr; app_uart_start_transmit_async &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[c8]"></a>UART5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_uart.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART5_IRQHandler &rArr; hal_uart_irq_handler &rArr; uart_transmit_it &rArr; hal_uart_tx_cplt_callback &rArr; app_uart_start_transmit_async &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[21]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gr_interrupt.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup.o(RESET)
<LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[1a3]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1b7]"></a>__hardfp_ceil</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __hardfp_ceil &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_boot_timing_set
</UL>

<P><STRONG><a name="[1bb]"></a>__hardfp_round</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, round.o(i.__hardfp_round))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __hardfp_round &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ch_hp_gain_get
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_hp_gain_calibration
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_band_hp_gain_calibration
</UL>

<P><STRONG><a name="[1c3]"></a>_free_dma_llp_resource</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_spi_dma.o(i._free_dma_llp_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _free_dma_llp_resource
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_v_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_tx_cplt_callback
</UL>

<P><STRONG><a name="[190]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[17e]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_log.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1c4]"></a>_v_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_spi_dma.o(i._v_free))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_dma_llp_resource
</UL>

<P><STRONG><a name="[1d7]"></a>ads1299_delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ads1299_gr55xx.o(i.ads1299_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ads1299_delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_device_reset
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_init
</UL>

<P><STRONG><a name="[1db]"></a>ads1299_hw_init</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, ads1299_gr55xx.o(i.ads1299_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ads1299_hw_init &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_write_pin
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_init
</UL>

<P><STRONG><a name="[1da]"></a>ads1299_hw_reset_pin_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ads1299_gr55xx.o(i.ads1299_hw_reset_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ads1299_hw_reset_pin_set &rArr; app_io_write_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_write_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_device_reset
</UL>

<P><STRONG><a name="[1df]"></a>ads1299_hw_spi_transmit_receive</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ads1299_gr55xx.o(i.ads1299_hw_spi_transmit_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ads1299_hw_spi_transmit_receive &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_transmit_receive_sync
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_write_cmd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_read_reg
</UL>

<P><STRONG><a name="[1e1]"></a>ads1299_init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ads1299.o(i.ads1299_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ads1299_init &rArr; ads1299_all_reg_read &rArr; ads1299_read_reg &rArr; ads1299_hw_spi_transmit_receive &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_write_cmd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_read_reg
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_device_reset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_all_reg_read
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_hw_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_delay_ms
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2eb]"></a>aon_pmu_set_rng_freq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, platform_clock.o(i.aon_pmu_set_rng_freq))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_class_task
</UL>

<P><STRONG><a name="[26]"></a>app_assert_err_cb</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, app_assert.o(i.app_assert_err_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = app_assert_err_cb &rArr; app_assert_info_output &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_info_output
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_assert.o(.data)
</UL>
<P><STRONG><a name="[1e6]"></a>app_assert_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_assert.o(i.app_assert_init))
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert_cb_register
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_log_init
</UL>

<P><STRONG><a name="[27]"></a>app_assert_param_cb</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, app_assert.o(i.app_assert_param_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = app_assert_param_cb &rArr; app_assert_info_output &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_info_output
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_assert.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>app_assert_warn_cb</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, app_assert.o(i.app_assert_warn_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = app_assert_warn_cb &rArr; app_assert_info_output &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_info_output
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_assert.o(.data)
</UL>
<P><STRONG><a name="[1ee]"></a>app_error_fault_handler</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, app_error.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = app_error_fault_handler &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_flush
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconnected_handler
</UL>

<P><STRONG><a name="[540]"></a>app_graphics_dc_sleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_pm.o(i.app_graphics_dc_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_system_sleep
</UL>

<P><STRONG><a name="[53f]"></a>app_graphics_gpu_sleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_pm.o(i.app_graphics_gpu_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_system_sleep
</UL>

<P><STRONG><a name="[541]"></a>app_graphics_ospi_sleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_pm.o(i.app_graphics_ospi_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_system_sleep
</UL>

<P><STRONG><a name="[543]"></a>app_graphics_ospi_wakeup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_pm.o(i.app_graphics_ospi_wakeup))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_system_sleep
</UL>

<P><STRONG><a name="[1f2]"></a>app_i2c_init</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, app_i2c.o(i.app_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_i2c_init &rArr; i2c_gpio_config &rArr; app_io_init &rArr; hal_msio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_gpio_config
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_register_sleep_cb
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_clear_pending_irq
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_register_nvic
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_deinit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_hw_init
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_hw_init
</UL>

<P><STRONG><a name="[1fa]"></a>app_i2c_receive_sync</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, app_i2c.o(i.app_i2c_receive_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_i2c_receive_sync &rArr; hal_i2c_slave_receive &rArr; i2c_slave_start_receive &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_slave_receive
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_i2c_read
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_i2c_read
</UL>

<P><STRONG><a name="[1fd]"></a>app_i2c_transmit_sync</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, app_i2c.o(i.app_i2c_transmit_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_slave_transmit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_i2c_scan
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_i2c_write
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_i2c_write
</UL>

<P><STRONG><a name="[1dc]"></a>app_io_init</STRONG> (Thumb, 294 bytes, Stack size 72 bytes, app_io.o(i.app_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_io_init &rArr; hal_msio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_msio_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_aon_gpio_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_register_nvic
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_gpio_config
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_config
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gpio_config
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_hw_init
</UL>

<P><STRONG><a name="[1dd]"></a>app_io_write_pin</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, app_io.o(i.app_io_write_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_io_write_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_msio_write_pin
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_write_pin
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_aon_gpio_write_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_soft_cs_deassert
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_soft_cs_assert
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_config
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_hw_reset_pin_set
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_hw_init
</UL>

<P><STRONG><a name="[1e5]"></a>app_log_flush</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_log.o(i.app_log_flush))
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardfault_trace_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_test_task
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_info_output
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[206]"></a>app_log_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, app_log.o(i.app_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = app_log_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_log_init
</UL>

<P><STRONG><a name="[1d6]"></a>app_log_output</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, app_log.o(i.app_log_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_strcpy
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_is_fmt_set
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_data_trans
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriority
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_read_reg
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_all_reg_read
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconnected_handler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connected_handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_hw_spi_transmit_receive
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_hw_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_info_output
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[20b]"></a>app_periph_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, user_periph_setup.o(i.app_periph_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = app_periph_init &rArr; board_init &rArr; bsp_log_init &rArr; bsp_uart_init &rArr; app_uart_init &rArr; uart_gpio_config &rArr; app_io_init &rArr; hal_msio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_mode_set
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[210]"></a>app_pwr_mgmt_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_pwr_mgmt.o(i.app_pwr_mgmt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_pwr_mgmt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_set_callback
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_dev_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_register_sleep_cb
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_class_task
</UL>

<P><STRONG><a name="[213]"></a>app_rtc_get_time</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_rtc.o(i.app_rtc_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_rtc_get_time &rArr; seconds2_calendar_time &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seconds2_calendar_time
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_time_sync
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_test_task
</UL>

<P><STRONG><a name="[1e9]"></a>app_rtc_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_rtc.o(i.app_rtc_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calendar_init
</UL>

<P><STRONG><a name="[1ea]"></a>app_rtc_init_time</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, app_rtc.o(i.app_rtc_init_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_rtc_init_time &rArr; ble_time_get
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_get
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_time2seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calendar_init
</UL>

<P><STRONG><a name="[1de]"></a>app_spi_init</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, app_spi.o(i.app_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = app_spi_init &rArr; spi_gpio_config &rArr; app_io_init &rArr; hal_msio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_deinit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_config
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_register_sleep_cb
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_clear_pending_irq
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_register_nvic
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_hw_init
</UL>

<P><STRONG><a name="[1e0]"></a>app_spi_transmit_receive_sync</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app_spi.o(i.app_spi_transmit_receive_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_spi_transmit_receive_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_transmit_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_hw_spi_transmit_receive
</UL>

<P><STRONG><a name="[21d]"></a>app_timer_create</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_pmu_calibration_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_timer_handler
</UL>

<P><STRONG><a name="[220]"></a>app_timer_delete</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_timer_delete &rArr; app_timer_stop_api &rArr; low_level_timer_startup &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop_api
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_pmu_calibration_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_timer_handler
</UL>

<P><STRONG><a name="[224]"></a>app_timer_start_api</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, app_timer.o(i.app_timer_start_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_timer_start_api &rArr; low_level_timer_startup &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_timer_handler_register
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_stop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_startup
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_rest_get
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_timer_node_created
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_need_insert_front
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_running_queue_insert
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_node_init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_pmu_calibration_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_timer_handler
</UL>

<P><STRONG><a name="[221]"></a>app_timer_stop_api</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_stop_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_timer_stop_api &rArr; low_level_timer_startup &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_stop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_startup
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_rest_get
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_running_queue_remove
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_delete
</UL>

<P><STRONG><a name="[22c]"></a>app_uart_dma_start_transmit_async</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, app_uart_dma.o(i.app_uart_dma_start_transmit_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_uart_dma_start_transmit_async &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_transmit_dma
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_items_count_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_tx_cplt_callback
</UL>

<P><STRONG><a name="[d0]"></a>app_uart_evt_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_bc.o(i.app_uart_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> board_bc.o(i.bsp_uart_init)
</UL>
<P><STRONG><a name="[230]"></a>app_uart_flush</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, app_uart.o(i.app_uart_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_uart_flush &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_items_count_get
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_transmit
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_state
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_abort_transmit_it
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_flush
</UL>

<P><STRONG><a name="[234]"></a>app_uart_init</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, app_uart.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = app_uart_init &rArr; uart_gpio_config &rArr; app_io_init &rArr; hal_msio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gpio_config
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_register_sleep_cb
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_clear_pending_irq
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_register_nvic
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
</UL>

<P><STRONG><a name="[23b]"></a>app_uart_transmit_sync</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, app_uart.o(i.app_uart_transmit_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_uart_transmit_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_send
</UL>

<P><STRONG><a name="[df]"></a>bb_watch_timer_cbk_fcc_patch</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lld_test_patch.o(i.bb_watch_timer_cbk_fcc_patch))
<BR>[Address Reference Count : 1]<UL><LI> lld_test_patch.o(i.fcc_test_init_patch)
</UL>
<P><STRONG><a name="[de]"></a>bb_watch_timer_start_fcc_patch</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, lld_test_patch.o(i.bb_watch_timer_start_fcc_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bb_watch_timer_start_fcc_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_time_get
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_alarm_set
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_alarm_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lld_test_patch.o(i.fcc_test_init_patch)
</UL>
<P><STRONG><a name="[245]"></a>ble_adv_env_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cold_patch.o(i.ble_adv_env_init))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_replace
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_patch_env_init
</UL>

<P><STRONG><a name="[247]"></a>ble_app_init</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, user_app.o(i.ble_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ble_app_init &rArr; gap_params_init &rArr; app_error_fault_handler &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_addr_get
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sdk_verison_get
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[24c]"></a>ble_common_env_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cold_patch.o(i.ble_common_env_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_common_env_init
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultra_wfi_replace
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srpg_sleep_replace
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_prog_replace
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_replace
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep_init_with_stack_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_replace
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_gdx_replace
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_lcp_replace
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_func_replace
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_param_set_func_replace
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_patch_env_init
</UL>

<P><STRONG><a name="[257]"></a>ble_communication_core_init</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, rf_gdx_bali_b1_patch.o(i.ble_communication_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_communication_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_core_init_without_stack_init
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[259]"></a>ble_con_env_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cold_patch.o(i.ble_con_env_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_con_env_init &rArr; lld_con_replace &rArr; default_slave_md_set
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_replace
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_trans_timer_set_func_replace
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_replace
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ch_class_replace
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_init_fsm_next_func_replace
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_patch_env_init
</UL>

<P><STRONG><a name="[25f]"></a>ble_core_init_without_stack_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rwip_sleep_common.o(i.ble_core_init_without_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_core_init_without_stack_init &rArr; ble_communication_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_core_power_off
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_communication_core_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_request_xo_osc
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep_init_without_stack_init
</UL>

<P><STRONG><a name="[260]"></a>ble_core_power_off</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.ble_core_power_off))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_core_init_without_stack_init
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[262]"></a>ble_dcdc_dcore_param_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, platform_pmu.o(i.ble_dcdc_dcore_param_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_dcdc_dcore_param_init &rArr; sys_pmu_digcore_set &rArr; sys_pmu_dcore_mv2code &rArr; sys_pmu_mv2code
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_is_ss_chip
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_digcore_set
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_dcore_code2mv
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_dcdc_set
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_dcdc_dcore_info_record
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dcdc_dcore_init
</UL>

<P><STRONG><a name="[103]"></a>ble_evt_handler</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, user_app.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ble_evt_handler &rArr; ble_app_init &rArr; gap_params_init &rArr; app_error_fault_handler &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_cfm
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_param_update_reply
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconnected_handler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connected_handler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4dd]"></a>ble_gap_get_local_addr_by_conidx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gapc_patch.o(i.ble_gap_get_local_addr_by_conidx))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_bond_req_ind_handler_patch
</UL>

<P><STRONG><a name="[26c]"></a>ble_gatts_prf_add</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_profile_patch.o(i.ble_gatts_prf_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gatts_prf_add
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_server_prf_add
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_service_init
</UL>

<P><STRONG><a name="[1af]"></a>ble_irq_clear</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rwip_sleep_common.o(i.ble_irq_clear))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwr_on_handler_without_stack_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQ_Handler_without_stack_init
</UL>

<P><STRONG><a name="[271]"></a>ble_patch_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_sdk_patch.o(i.ble_patch_enable))
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_register_patch_function
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_inner_init
</UL>

<P><STRONG><a name="[269]"></a>ble_profile_evt_handle</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, ble_profile_patch.o(i.ble_profile_evt_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_evt_handle
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_connect_state_evt
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_srvc_browse_evt_handle
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_evt_handle
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_evt_handle
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_connect_state_evt
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_common_evt_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>

<P><STRONG><a name="[127]"></a>ble_pwr_on_handler_without_stack_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rwip_sleep_common.o(i.ble_pwr_on_handler_without_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ble_pwr_on_handler_without_stack_init &rArr; ble_wait_for_wakeup_state &rArr; ble_pwr_on_wakeup_workaround_check &rArr; ble_pwr_on_wakeup_reset_core
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wait_for_wakeup_state
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_irq_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwip_sleep_common.o(i.rwip_sleep_init_without_stack_init)
</UL>
<P><STRONG><a name="[27b]"></a>ble_rf_rx_performance_selection</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rf_gdx_bali_b1_patch.o(i.ble_rf_rx_performance_selection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_rf_rx_performance_selection
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rssi_gain_set_cali_for_agc_gain_code
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_wakeup_init_patch
</UL>

<P><STRONG><a name="[14]"></a>ble_sdk_gattc_extend_prf_cmp_evt_handler_patch</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ble_sdk_prf_client_enh_patch.o(i.ble_sdk_gattc_extend_prf_cmp_evt_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_sdk_gattc_extend_prf_cmp_evt_handler_patch &rArr; ble_sdk_gattc_record_profile_id_by_dest_id
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_gattc_extend_prf_cmp_evt_handler
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_gattc_record_profile_id_by_dest_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>ble_sdk_gattc_extend_prf_event_ind_handler_patch</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ble_sdk_prf_client_enh_patch.o(i.ble_sdk_gattc_extend_prf_event_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_sdk_gattc_extend_prf_event_ind_handler_patch &rArr; ble_sdk_gattc_record_profile_id_by_dest_id
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_gattc_extend_prf_event_ind_handler
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_gattc_record_profile_id_by_dest_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>ble_sdk_gattc_extend_prf_sdp_srvc_ind_handler_patch</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ble_sdk_prf_client_enh_patch.o(i.ble_sdk_gattc_extend_prf_sdp_srvc_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_sdk_gattc_extend_prf_sdp_srvc_ind_handler_patch &rArr; ble_sdk_gattc_record_profile_id_by_dest_id
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_gattc_extend_prf_sdp_srvc_ind_handler
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_gattc_record_profile_id_by_dest_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[320]"></a>ble_sdk_gattc_get_record_profile_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_sdk_prf_cllient_patch.o(i.ble_sdk_gattc_get_record_profile_id))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_evt_handle
</UL>

<P><STRONG><a name="[27d]"></a>ble_sdk_gattc_record_profile_id_by_dest_id</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_sdk_prf_cllient_patch.o(i.ble_sdk_gattc_record_profile_id_by_dest_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_sdk_gattc_record_profile_id_by_dest_id
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_prf_get_id_from_task
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_gattc_extend_prf_sdp_srvc_ind_handler_patch
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_gattc_extend_prf_event_ind_handler_patch
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_gattc_extend_prf_cmp_evt_handler_patch
</UL>

<P><STRONG><a name="[282]"></a>ble_sdk_patch_env_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gr_soc.o(i.ble_sdk_patch_env_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_sdk_patch_env_init &rArr; ble_con_env_init &rArr; lld_con_replace &rArr; default_slave_md_set
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_llm_hci_cmd_patch_tab
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_ke_msg_patch_tab
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_gapm_hci_evt_patch_tab
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_con_env_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_env_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_env_init
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_inner_init
</UL>

<P><STRONG><a name="[28a]"></a>ble_sleep_successfully_without_stack_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, rwip_sleep_common.o(i.ble_sleep_successfully_without_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_sleep_successfully_without_stack_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ble_heartbeat_period_get
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_manual_power_off
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_time_get
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_release_xo_osc
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_us_2_lpcycles
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep_without_stack_init
</UL>

<P><STRONG><a name="[126]"></a>ble_sleep_without_stack_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rwip_sleep_common.o(i.ble_sleep_without_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_sleep_without_stack_init &rArr; ble_sleep_successfully_without_stack_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep_successfully_without_stack_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwip_sleep_common.o(i.rwip_sleep_init_without_stack_init)
</UL>
<P><STRONG><a name="[28f]"></a>ble_stack_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_event_patch.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_stack_init &rArr; ble_stack_inner_init &rArr; ble_sdk_patch_env_init &rArr; ble_con_env_init &rArr; lld_con_replace &rArr; default_slave_md_set
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_inner_init
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[290]"></a>ble_stack_inner_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, system_sdk_patch.o(i.ble_stack_inner_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_stack_inner_init &rArr; ble_sdk_patch_env_init &rArr; ble_con_env_init &rArr; lld_con_replace &rArr; default_slave_md_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_register_nvic
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_patch_env_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_patch_enable
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init_origin
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[20d]"></a>board_init</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, board_bc.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = board_init &rArr; bsp_log_init &rArr; bsp_uart_init &rArr; app_uart_init &rArr; uart_gpio_config &rArr; app_io_init &rArr; hal_msio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_write_pin
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_log_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_periph_init
</UL>

<P><STRONG><a name="[293]"></a>boot_clock_calib_start</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, platform_clock_calib.o(i.boot_clock_calib_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = boot_clock_calib_start &rArr; slow_clock_calib_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_register_nvic
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_mgmt_set_extra_device_state
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_request_xo_osc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_clock_calib_config
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_clock_calib_handler
</UL>

<P><STRONG><a name="[297]"></a>boot_clock_freq_update</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, platform_clock_calib.o(i.boot_clock_freq_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = boot_clock_freq_update &rArr; system_boot_timing_set &rArr; __hardfp_ceil &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_boot_timing_set
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_boot_clk_scale_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_clock_calib_handler
</UL>

<P><STRONG><a name="[292]"></a>bsp_log_init</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, board_bc.o(i.bsp_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bsp_log_init &rArr; bsp_uart_init &rArr; app_uart_init &rArr; uart_gpio_config &rArr; app_io_init &rArr; hal_msio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[ce]"></a>bsp_uart_flush</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_bc.o(i.bsp_uart_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_uart_flush &rArr; app_uart_flush &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_bc.o(i.bsp_log_init)
</UL>
<P><STRONG><a name="[29a]"></a>bsp_uart_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, board_bc.o(i.bsp_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bsp_uart_init &rArr; app_uart_init &rArr; uart_gpio_config &rArr; app_io_init &rArr; hal_msio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_log_init
</UL>

<P><STRONG><a name="[cf]"></a>bsp_uart_send</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board_bc.o(i.bsp_uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_uart_send &rArr; app_uart_transmit_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_transmit_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_bc.o(i.bsp_log_init)
</UL>
<P><STRONG><a name="[217]"></a>calendar_time2seconds</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, app_rtc.o(i.calendar_time2seconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calendar_time2seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rtc_init_time
</UL>

<P><STRONG><a name="[214]"></a>calendar_time_sync</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, app_rtc.o(i.calendar_time_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = calendar_time_sync &rArr; ble_time_get
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rtc_get_time
</UL>

<P><STRONG><a name="[4bd]"></a>ch_idx_2_rf_freq</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.ch_idx_2_rf_freq))
<BR><BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_hopping_table_init
</UL>

<P><STRONG><a name="[1cc]"></a>clk_period_lv_set</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, platform_pmu.o(i.clk_period_lv_set))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_temperature_calibrations
</UL>

<P><STRONG><a name="[29b]"></a>clock_calib_state_clear</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, platform_clock_calib.o(i.clock_calib_state_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clock_calib_state_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_mgmt_set_extra_device_state
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_release_xo_osc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_calibration_irq_handler
</UL>

<P><STRONG><a name="[1b1]"></a>clock_calibration_irq_handler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, platform_clock_calib.o(i.clock_calibration_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = clock_calibration_irq_handler &rArr; slow_clock_calib_handler &rArr; boot_clock_freq_update &rArr; system_boot_timing_set &rArr; __hardfp_ceil &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_calib_target_is_meet
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_clock_calib_handler
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_clock_calib_is_idle
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clock_calib_handler_new
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_calib_state_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_CALIB_IRQHandler
</UL>

<P><STRONG><a name="[2a1]"></a>clock_calibration_trigger</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, platform_clock_calib.o(i.clock_calibration_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clock_calibration_trigger &rArr; fast_clk_calib_start &rArr; fast_clk_period_cali_start &rArr; fast_clk_cali_easy_find_fine_code_start &rArr; hfosc_clk_calib_inner_start_new
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_calib_start
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_clock_calib_start
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_calibration_handler
</UL>

<P><STRONG><a name="[2a4]"></a>cold_patch_apply</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cold_patch.o(i.cold_patch_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cold_patch_apply &rArr; hal_clock_function_replace
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_shutdown_replace
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_replace
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_function_replace
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_function_replace
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_sdk_init
</UL>

<P><STRONG><a name="[2ab]"></a>cpll_calibration_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, platform_pmu.o(i.cpll_calibration_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cpll_calibration_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_register_nvic
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_sdk_init
</UL>

<P><STRONG><a name="[1b2]"></a>cpll_reset</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, platform_pmu.o(i.cpll_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cpll_reset &rArr; SystemCoreSetClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreSetClock
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreGetClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPLL_DRIFT_IRQHandler
</UL>

<P><STRONG><a name="[2ad]"></a>default_slave_md_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lld_con_patch.o(i.default_slave_md_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = default_slave_md_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nvds_put
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_replace
</UL>

<P><STRONG><a name="[2a8]"></a>delay_function_replace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gr55xx_delay_patch.o(i.delay_function_replace))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cold_patch_apply
</UL>

<P><STRONG><a name="[20e]"></a>dfu_port_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, dfu_port.o(i.dfu_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dfu_port_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_set_cmd_handler
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_periph_init
</UL>

<P><STRONG><a name="[2b6]"></a>dfu_schedule</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dfu_port.o(i.dfu_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dfu_schedule &rArr; fast_dfu_schedule &rArr; fast_dfu_program_schedule &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normal_dfu_schedule
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_schedule_task
</UL>

<P><STRONG><a name="[2b9]"></a>dfu_service_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dfu_port.o(i.dfu_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dfu_service_init &rArr; otas_service_init &rArr; ble_gatts_prf_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_service_init
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[37d]"></a>dtm_test_init_patch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lld_test_patch.o(i.dtm_test_init_patch))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_param_set_func_patch
</UL>

<P><STRONG><a name="[546]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tasks.o(i.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_enter_sleep_with_cond
</UL>

<P><STRONG><a name="[13a]"></a>efuse_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gr_soc.o(i.efuse_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = efuse_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_efuse_info_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>efuse_xo_offset_get_func</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llm_hci_patch.o(i.efuse_xo_offset_get_func))
<BR>[Address Reference Count : 1]<UL><LI> llm_hci_patch.o(i.hci_le_test_param_set_func_replace)
</UL>
<P><STRONG><a name="[ee]"></a>efuse_xo_offset_set_func</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, llm_hci_patch.o(i.efuse_xo_offset_set_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = efuse_xo_offset_set_func &rArr; hal_efuse_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_read
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_write
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci_patch.o(i.hci_le_test_param_set_func_replace)
</UL>
<P><STRONG><a name="[2c0]"></a>em_ble_rxwincntl_pack_patch</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rf_gdx_bali_b1_patch.o(i.em_ble_rxwincntl_pack_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = em_ble_rxwincntl_pack_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_force_agc_enable
</UL>

<P><STRONG><a name="[2c3]"></a>fast_clk_boot_cali_done</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, platform_clock_calib.o(i.fast_clk_boot_cali_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fast_clk_boot_cali_done &rArr; fast_clk_boot_cali_result_update
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_freq_cali_done
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_boot_cali_result_update
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_coarse_code_cb
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_binary_search_fine_code_cb
</UL>

<P><STRONG><a name="[2d3]"></a>fast_clk_boot_cali_is_done</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, platform_clock_calib.o(i.fast_clk_boot_cali_is_done))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_calib_start
</UL>

<P><STRONG><a name="[2c4]"></a>fast_clk_boot_cali_result_update</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, platform_clock_calib.o(i.fast_clk_boot_cali_result_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fast_clk_boot_cali_result_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_boot_cali_done
</UL>

<P><STRONG><a name="[2c6]"></a>fast_clk_boot_cali_start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, platform_clock_calib.o(i.fast_clk_boot_cali_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fast_clk_boot_cali_start &rArr; fast_clk_cali_easy_find_coarse_code_start &rArr; fast_clk_cali_easy_find_coarse_code_retry &rArr; hfosc_clk_calib_inner_start_new
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_coarse_code_get
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_coarse_code_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_calib_start
</UL>

<P><STRONG><a name="[db]"></a>fast_clk_cali_binary_search_fine_code_cb</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, platform_clock_calib.o(i.fast_clk_cali_binary_search_fine_code_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fast_clk_cali_binary_search_fine_code_cb &rArr; fast_clk_cali_binary_search_fine_code_retry &rArr; hfosc_clk_calib_inner_start_new
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_binary_search_fine_code_retry
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_boot_cali_done
</UL>
<BR>[Address Reference Count : 2]<UL><LI> platform_clock_calib.o(i.fast_clk_cali_binary_search_fine_code_retry)
<LI> platform_clock_calib.o(i.fast_clk_cali_binary_search_fine_code_start)
</UL>
<P><STRONG><a name="[2c9]"></a>fast_clk_cali_binary_search_fine_code_retry</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, platform_clock_calib.o(i.fast_clk_cali_binary_search_fine_code_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fast_clk_cali_binary_search_fine_code_retry &rArr; hfosc_clk_calib_inner_start_new
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_clk_calib_inner_start_new
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_binary_search_fine_code_cb
</UL>

<P><STRONG><a name="[2cb]"></a>fast_clk_cali_binary_search_fine_code_start</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, platform_clock_calib.o(i.fast_clk_cali_binary_search_fine_code_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fast_clk_cali_binary_search_fine_code_start &rArr; hfosc_clk_calib_inner_start_new
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_clk_calib_inner_start_new
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_coarse_code_cb
</UL>

<P><STRONG><a name="[dc]"></a>fast_clk_cali_easy_find_coarse_code_cb</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, platform_clock_calib.o(i.fast_clk_cali_easy_find_coarse_code_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fast_clk_cali_easy_find_coarse_code_cb &rArr; fast_clk_cali_binary_search_fine_code_start &rArr; hfosc_clk_calib_inner_start_new
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_coarse_code_retry
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_coarse_code_check_freq
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_binary_search_fine_code_start
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_boot_cali_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_clock_calib.o(i.fast_clk_cali_easy_find_coarse_code_retry)
</UL>
<P><STRONG><a name="[2cd]"></a>fast_clk_cali_easy_find_coarse_code_check_freq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, platform_clock_calib.o(i.fast_clk_cali_easy_find_coarse_code_check_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fast_clk_cali_easy_find_coarse_code_check_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_coarse_code_cb
</UL>

<P><STRONG><a name="[2cc]"></a>fast_clk_cali_easy_find_coarse_code_retry</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, platform_clock_calib.o(i.fast_clk_cali_easy_find_coarse_code_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fast_clk_cali_easy_find_coarse_code_retry &rArr; hfosc_clk_calib_inner_start_new
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_clk_calib_inner_start_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_coarse_code_start
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_coarse_code_cb
</UL>

<P><STRONG><a name="[2c8]"></a>fast_clk_cali_easy_find_coarse_code_start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, platform_clock_calib.o(i.fast_clk_cali_easy_find_coarse_code_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fast_clk_cali_easy_find_coarse_code_start &rArr; fast_clk_cali_easy_find_coarse_code_retry &rArr; hfosc_clk_calib_inner_start_new
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_coarse_code_retry
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_boot_cali_start
</UL>

<P><STRONG><a name="[dd]"></a>fast_clk_cali_easy_find_fine_code_cb</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, platform_clock_calib.o(i.fast_clk_cali_easy_find_fine_code_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fast_clk_cali_easy_find_fine_code_cb &rArr; fast_clk_cali_easy_find_fine_code_check_freq
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_period_cali_done
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_fine_code_retry
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_fine_code_check_freq
</UL>
<BR>[Address Reference Count : 2]<UL><LI> platform_clock_calib.o(i.fast_clk_cali_easy_find_fine_code_retry)
<LI> platform_clock_calib.o(i.fast_clk_cali_easy_find_fine_code_start)
</UL>
<P><STRONG><a name="[2ce]"></a>fast_clk_cali_easy_find_fine_code_check_freq</STRONG> (Thumb, 194 bytes, Stack size 28 bytes, platform_clock_calib.o(i.fast_clk_cali_easy_find_fine_code_check_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fast_clk_cali_easy_find_fine_code_check_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_fine_code_cb
</UL>

<P><STRONG><a name="[2d0]"></a>fast_clk_cali_easy_find_fine_code_retry</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, platform_clock_calib.o(i.fast_clk_cali_easy_find_fine_code_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fast_clk_cali_easy_find_fine_code_retry &rArr; hfosc_clk_calib_inner_start_new
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_clk_calib_inner_start_new
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_fine_code_cb
</UL>

<P><STRONG><a name="[2d1]"></a>fast_clk_cali_easy_find_fine_code_start</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, platform_clock_calib.o(i.fast_clk_cali_easy_find_fine_code_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fast_clk_cali_easy_find_fine_code_start &rArr; hfosc_clk_calib_inner_start_new
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_clk_calib_inner_start_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_period_cali_start
</UL>

<P><STRONG><a name="[2a3]"></a>fast_clk_calib_start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, platform_clock_calib.o(i.fast_clk_calib_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fast_clk_calib_start &rArr; fast_clk_period_cali_start &rArr; fast_clk_cali_easy_find_fine_code_start &rArr; hfosc_clk_calib_inner_start_new
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_clock_calib_is_idle
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_period_cali_start
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_boot_cali_start
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_boot_cali_is_done
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_calibration_trigger
</UL>

<P><STRONG><a name="[2cf]"></a>fast_clk_period_cali_done</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, platform_clock_calib.o(i.fast_clk_period_cali_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fast_clk_period_cali_done
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_freq_cali_done
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_period_cali_result_update
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_fine_code_cb
</UL>

<P><STRONG><a name="[2d5]"></a>fast_clk_period_cali_result_update</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, platform_clock_calib.o(i.fast_clk_period_cali_result_update))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_period_cali_done
</UL>

<P><STRONG><a name="[2d4]"></a>fast_clk_period_cali_start</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, platform_clock_calib.o(i.fast_clk_period_cali_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fast_clk_period_cali_start &rArr; fast_clk_cali_easy_find_fine_code_start &rArr; hfosc_clk_calib_inner_start_new
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_fine_code_get
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_coarse_code_get
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_fine_code_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_calib_start
</UL>

<P><STRONG><a name="[29e]"></a>fast_clock_calib_handler_new</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, platform_clock_calib.o(i.fast_clock_calib_handler_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fast_clock_calib_handler_new &rArr; hfosc_freq_update
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_freq_update
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_freq_cali_done
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_fine_code_get
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_coarse_code_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_calibration_irq_handler
</UL>

<P><STRONG><a name="[2b8]"></a>fast_dfu_schedule</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dfu_port.o(i.fast_dfu_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fast_dfu_schedule &rArr; fast_dfu_program_schedule &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_program_schedule
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_erase_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_schedule
</UL>

<P><STRONG><a name="[2dc]"></a>fast_dfu_state_machine_reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dfu_port.o(i.fast_dfu_state_machine_reset))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_evt_process
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_program_schedule
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_erase_flash
</UL>

<P><STRONG><a name="[37e]"></a>fcc_test_init_patch</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lld_test_patch.o(i.fcc_test_init_patch))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_param_set_func_patch
</UL>

<P><STRONG><a name="[f2]"></a>find_new_msg_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ke_task_patch.o(i.find_new_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_new_msg_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_to_sdk_msg_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ke_task_patch.o(i.ke_task_func_replace)
</UL>
<P><STRONG><a name="[2e8]"></a>finish_encryt_check_by_llcp_patch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llc_encrypt_patch.o(i.finish_encryt_check_by_llcp_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = finish_encryt_check_by_llcp_patch &rArr; llc_rem_encrypt_proc_finish_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_finish_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_llcp_rx_ind_handler_patch
</UL>

<P><STRONG><a name="[13b]"></a>first_class_task</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, gr_soc.o(i.first_class_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = first_class_task &rArr; mem_pwr_mgmt_mode_set &rArr; mem_low_power_auto_init &rArr; mem_pwr_mgmt_trans_addr_to_section
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_setup
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_sdk_init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_flash_enable_quad
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pwr_mgmt_mode_set
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aon_pmu_set_rng_freq
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_flash_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.constdata)
</UL>
<P><STRONG><a name="[272]"></a>fpb_register_patch_function</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fpb_patch_init.o(i.fpb_register_patch_function))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_patch_enable
</UL>

<P><STRONG><a name="[b2]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, app_log.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_data_trans
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>gap_activity_stopped_ind_handler_patch</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, ble_sdk_gapm_patch.o(i.gap_activity_stopped_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gap_activity_stopped_ind_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_raw_log_output
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_per_sync_idx_by_actv_idx
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_adv_idx_by_actv_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>gap_connection_req_ind_handler_patch</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, ble_sdk_gapc_patch.o(i.gap_connection_req_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gap_connection_req_ind_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapc_role_get
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_raw_log_output
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_save_state
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_load_state
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_on_conn_complete
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_on_connection
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_reslv_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>gap_disconnect_ind_handler_patch</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ble_sdk_gapc_patch.o(i.gap_disconnect_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gap_disconnect_ind_handler_patch &rArr; gap_per_sync_cancel_check
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_raw_log_output
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_save_state
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_load_state
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_on_disconn
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_clear_bond_info_env
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_on_disconnection
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_per_sync_cancel_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[e0]"></a>gap_init_fsm_next_func_patch</STRONG> (Thumb, 470 bytes, Stack size 64 bytes, ble_sdk_gapm_patch.o(i.gap_init_fsm_next_func_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gap_init_fsm_next_func_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_raw_log_output
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_save_state
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_load_state
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conn_idx_by_hdl
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_stop_initiating
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_start_initiating
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_delete_initiating
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_create_initiating
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_activity_opera_end
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sdk_gapm_patch.o(i.gap_init_fsm_next_func_replace)
</UL>
<P><STRONG><a name="[25c]"></a>gap_init_fsm_next_func_replace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_sdk_gapm_patch.o(i.gap_init_fsm_next_func_replace))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_con_env_init
</UL>

<P><STRONG><a name="[2fe]"></a>gap_per_sync_cancel_check</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_sdk_gapm_patch.o(i.gap_per_sync_cancel_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gap_per_sync_cancel_check
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_per_sync_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect_ind_handler_patch
</UL>

<P><STRONG><a name="[7]"></a>gapc_hci_handler_patch</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gapc_hci_patch.o(i.gapc_hci_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapc_hci_handler_patch &rArr; hci_disc_cmp_evt_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disc_cmp_evt_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>gapm_activity_create_cmd_handler_patch</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, gapm_actv_patch.o(i.gapm_activity_create_cmd_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapm_activity_create_cmd_handler_patch &rArr; gapm_per_sync_create_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_create
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_create
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_create
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_get_free_idx
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_check_create_param
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_create_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[246]"></a>gapm_adv_replace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gapm_adv_patch.o(i.gapm_adv_replace))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_env_init
</UL>

<P><STRONG><a name="[8]"></a>gapm_hci_handler_patch</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gapm_task_patch.o(i.gapm_hci_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapm_hci_handler_patch &rArr; find_new_hci_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_new_hci_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[312]"></a>gapm_per_sync_create_patch</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gapm_per_sync_patch.o(i.gapm_per_sync_create_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_per_sync_create_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_created
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_create_cmd_handler_patch
</UL>

<P><STRONG><a name="[9]"></a>gapm_set_dev_config_cmd_handler_patch</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, gapm_cfg_patch.o(i.gapm_set_dev_config_cmd_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapm_set_dev_config_cmd_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_destroy
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_le_psm_cleanup
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_dle_val_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>gattc_cache_update_cb</STRONG> (Thumb, 78 bytes, Stack size 200 bytes, ble_event_patch.o(i.gattc_cache_update_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gattc_cache_update_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>gattc_char_desc_disc_cb</STRONG> (Thumb, 70 bytes, Stack size 200 bytes, ble_event_patch.o(i.gattc_char_desc_disc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gattc_char_desc_disc_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_profile_patch.o(.data)
<LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>gattc_char_disc_cb</STRONG> (Thumb, 68 bytes, Stack size 200 bytes, ble_event_patch.o(i.gattc_char_disc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gattc_char_disc_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_profile_patch.o(.data)
<LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>gattc_enh_char_desc_disc_cb</STRONG> (Thumb, 74 bytes, Stack size 208 bytes, ble_event_patch.o(i.gattc_enh_char_desc_disc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = gattc_enh_char_desc_disc_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>gattc_enh_char_disc_cb</STRONG> (Thumb, 74 bytes, Stack size 208 bytes, ble_event_patch.o(i.gattc_enh_char_disc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = gattc_enh_char_disc_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>gattc_enh_inc_srvc_disc_cb</STRONG> (Thumb, 74 bytes, Stack size 208 bytes, ble_event_patch.o(i.gattc_enh_inc_srvc_disc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = gattc_enh_inc_srvc_disc_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>gattc_enh_ntf_ind_cb</STRONG> (Thumb, 74 bytes, Stack size 200 bytes, ble_event_patch.o(i.gattc_enh_ntf_ind_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gattc_enh_ntf_ind_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>gattc_enh_read_cb</STRONG> (Thumb, 74 bytes, Stack size 208 bytes, ble_event_patch.o(i.gattc_enh_read_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = gattc_enh_read_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>gattc_enh_srvc_browse_cb</STRONG> (Thumb, 116 bytes, Stack size 208 bytes, ble_event_patch.o(i.gattc_enh_srvc_browse_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = gattc_enh_srvc_browse_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>gattc_enh_srvc_disc_cb</STRONG> (Thumb, 74 bytes, Stack size 208 bytes, ble_event_patch.o(i.gattc_enh_srvc_disc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = gattc_enh_srvc_disc_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>gattc_enh_write_cb</STRONG> (Thumb, 56 bytes, Stack size 208 bytes, ble_event_patch.o(i.gattc_enh_write_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = gattc_enh_write_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>gattc_inc_srvc_disc_cb</STRONG> (Thumb, 68 bytes, Stack size 200 bytes, ble_event_patch.o(i.gattc_inc_srvc_disc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gattc_inc_srvc_disc_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_profile_patch.o(.data)
<LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>gattc_ntf_ind_cb</STRONG> (Thumb, 58 bytes, Stack size 200 bytes, ble_event_patch.o(i.gattc_ntf_ind_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gattc_ntf_ind_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_profile_patch.o(.data)
<LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>gattc_read_cb</STRONG> (Thumb, 68 bytes, Stack size 200 bytes, ble_event_patch.o(i.gattc_read_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gattc_read_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_profile_patch.o(.data)
<LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>gattc_srvc_browse_cb</STRONG> (Thumb, 68 bytes, Stack size 200 bytes, ble_event_patch.o(i.gattc_srvc_browse_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gattc_srvc_browse_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_profile_patch.o(.data)
<LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>gattc_srvc_disc_cb</STRONG> (Thumb, 68 bytes, Stack size 200 bytes, ble_event_patch.o(i.gattc_srvc_disc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gattc_srvc_disc_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_profile_patch.o(.data)
<LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>gattc_write_cb</STRONG> (Thumb, 50 bytes, Stack size 200 bytes, ble_event_patch.o(i.gattc_write_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gattc_write_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_profile_patch.o(.data)
<LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>gatts_cccd_set_cb</STRONG> (Thumb, 76 bytes, Stack size 208 bytes, ble_event_patch.o(i.gatts_cccd_set_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = gatts_cccd_set_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>gatts_enh_cccd_set_cb</STRONG> (Thumb, 76 bytes, Stack size 208 bytes, ble_event_patch.o(i.gatts_enh_cccd_set_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = gatts_enh_cccd_set_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>gatts_enh_mult_ntf_cb</STRONG> (Thumb, 58 bytes, Stack size 208 bytes, ble_event_patch.o(i.gatts_enh_mult_ntf_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = gatts_enh_mult_ntf_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>gatts_enh_ntf_ind_cb</STRONG> (Thumb, 64 bytes, Stack size 208 bytes, ble_event_patch.o(i.gatts_enh_ntf_ind_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = gatts_enh_ntf_ind_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>gatts_enh_prep_write_cb</STRONG> (Thumb, 58 bytes, Stack size 200 bytes, ble_event_patch.o(i.gatts_enh_prep_write_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gatts_enh_prep_write_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>gatts_enh_read_cb</STRONG> (Thumb, 58 bytes, Stack size 200 bytes, ble_event_patch.o(i.gatts_enh_read_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gatts_enh_read_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>gatts_enh_write_cb</STRONG> (Thumb, 66 bytes, Stack size 200 bytes, ble_event_patch.o(i.gatts_enh_write_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gatts_enh_write_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>gatts_mult_ntf_cb</STRONG> (Thumb, 52 bytes, Stack size 200 bytes, ble_event_patch.o(i.gatts_mult_ntf_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gatts_mult_ntf_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>gatts_ntf_ind_cb</STRONG> (Thumb, 50 bytes, Stack size 200 bytes, ble_event_patch.o(i.gatts_ntf_ind_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gatts_ntf_ind_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>gatts_prep_write_cb</STRONG> (Thumb, 52 bytes, Stack size 200 bytes, ble_event_patch.o(i.gatts_prep_write_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gatts_prep_write_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>gatts_read_cb</STRONG> (Thumb, 52 bytes, Stack size 200 bytes, ble_event_patch.o(i.gatts_read_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gatts_read_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>gatts_write_cb</STRONG> (Thumb, 60 bytes, Stack size 200 bytes, ble_event_patch.o(i.gatts_write_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gatts_write_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[42c]"></a>get_F_value</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.get_F_value))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ch_hp_gain_get
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_hp_gain_calibration
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_band_hp_gain_calibration
</UL>

<P><STRONG><a name="[54f]"></a>get_patch_rep_addr</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sdk_fpb_mgmt.o(i.get_patch_rep_addr))
<BR><BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_handler_proc
</UL>

<P><STRONG><a name="[402]"></a>get_wakeup_flag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gr_soc.o(i.get_wakeup_flag))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_init
</UL>

<P><STRONG><a name="[32a]"></a>gpu_dcdc_dcore_param_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, platform_pmu.o(i.gpu_dcdc_dcore_param_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpu_dcdc_dcore_param_init &rArr; sys_pmu_digcore_set &rArr; sys_pmu_dcore_mv2code &rArr; sys_pmu_mv2code
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_is_ss_chip
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_digcore_set
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_dcdc_set
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_dcdc_dcore_info_record
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dcdc_dcore_init
</UL>

<P><STRONG><a name="[445]"></a>gpu_is_working</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, platform_pmu.o(i.gpu_is_working))
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_dcore_code_adjust
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_adjust_before_ble_event_start
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_adjust_after_ble_event_end
</UL>

<P><STRONG><a name="[32b]"></a>gr5xx_fpb_func_register</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, sdk_fpb_mgmt.o(i.gr5xx_fpb_func_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gr5xx_fpb_func_register &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_driver_patch_enable
</UL>

<P><STRONG><a name="[32c]"></a>gr5xx_fpb_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sdk_fpb_mgmt.o(i.gr5xx_fpb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gr5xx_fpb_init &rArr; system_driver_patch_enable &rArr; gr5xx_fpb_func_register &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_driver_patch_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init
</UL>

<P><STRONG><a name="[8b]"></a>hal_aon_gpio_callback</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, app_io.o(i.hal_aon_gpio_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_aon_gpio_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_aon_gpio.o(.data)
</UL>
<P><STRONG><a name="[201]"></a>hal_aon_gpio_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gr55xx_hal_aon_gpio.o(i.hal_aon_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_aon_gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_aon_gpio_register_callback
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_aon_gpio_init_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_init
</UL>

<P><STRONG><a name="[2a5]"></a>hal_clock_function_replace</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gr55xx_hal_clock_patch.o(i.hal_clock_function_replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hal_clock_function_replace
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_xo_hf_clock_switch_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cold_patch_apply
</UL>

<P><STRONG><a name="[12e]"></a>hal_clock_release_xo_osc_patch</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gr55xx_hal_clock_patch.o(i.hal_clock_release_xo_osc_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_clock_release_xo_osc_patch &rArr; hal_clock_switch_sys_clk_to_hf_osc_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_switch_sys_clk_to_hf_osc_patch
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_clear_device_xo_request_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_clock_patch.o(i.sys_xo_hf_clock_switch_enable)
</UL>
<P><STRONG><a name="[332]"></a>hal_clock_switch_sys_clk_to_hf_osc_patch</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gr55xx_hal_clock_patch.o(i.hal_clock_switch_sys_clk_to_hf_osc_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_clock_switch_sys_clk_to_hf_osc_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_next_wakeup_src_is_ble
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xo_16m_clock_switch_to_pll_16m_patch
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_clk_select_source
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_release_xo_osc_patch
</UL>

<P><STRONG><a name="[2bc]"></a>hal_efuse_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gr55xx_hal_efuse.o(i.hal_efuse_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_efuse_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_register_callback
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_deinit_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_xo_offset_set_func
</UL>

<P><STRONG><a name="[2bd]"></a>hal_efuse_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gr55xx_hal_efuse.o(i.hal_efuse_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_efuse_init &rArr; hal_efuse_init_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_init_ext
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_register_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_xo_offset_set_func
</UL>

<P><STRONG><a name="[338]"></a>hal_efuse_init_ext</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, gr55xx_hal_efuse_patch.o(i.hal_efuse_init_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_efuse_init_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_msp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_init
</UL>

<P><STRONG><a name="[ac]"></a>hal_efuse_msp_deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gr55xx_hal_efuse.o(i.hal_efuse_msp_deinit))
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_efuse.o(.data)
</UL>
<P><STRONG><a name="[ab]"></a>hal_efuse_msp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gr55xx_hal_efuse.o(i.hal_efuse_msp_init))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_init_ext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_efuse.o(.data)
</UL>
<P><STRONG><a name="[2be]"></a>hal_efuse_write</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, gr55xx_hal_efuse_patch.o(i.hal_efuse_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_efuse_write
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_efuse_is_controller_power_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_xo_offset_set_func
</UL>

<P><STRONG><a name="[8c]"></a>hal_gpio_exti_callback</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, app_io.o(i.hal_gpio_exti_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_gpio_exti_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_gpio.o(.data)
</UL>
<P><STRONG><a name="[200]"></a>hal_gpio_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gr55xx_hal_gpio.o(i.hal_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_register_callback
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_init
</UL>

<P><STRONG><a name="[94]"></a>hal_i2c_abort_cplt_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_i2c.o(i.hal_i2c_abort_cplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_i2c_abort_cplt_callback &rArr; app_i2c_event_call
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_event_call
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_it_error
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_i2c.o(.data)
</UL>
<P><STRONG><a name="[1f4]"></a>hal_i2c_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gr55xx_hal_i2c.o(i.hal_i2c_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_i2c_deinit &rArr; hal_i2c_deinit_ext &rArr; hal_i2c_master_abort_it &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_deinit_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_init
</UL>

<P><STRONG><a name="[33d]"></a>hal_i2c_deinit_ext</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, gr55xx_hal_i2c_patch.o(i.hal_i2c_deinit_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_i2c_deinit_ext &rArr; hal_i2c_master_abort_it &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_abort_it
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_deinit
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_mgmt_device_resume_release
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_msp_deinit
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_updata_suspend_cb
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_device_state
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_resume_before_using
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_dev_num
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_deinit
</UL>

<P><STRONG><a name="[93]"></a>hal_i2c_error_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_i2c.o(i.hal_i2c_error_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_i2c_error_callback &rArr; app_i2c_event_call
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_event_call
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_it_error
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_i2c.o(.data)
</UL>
<P><STRONG><a name="[38b]"></a>hal_i2c_get_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gr55xx_hal_i2c_patch.o(i.hal_i2c_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_prepare_for_sleep
</UL>

<P><STRONG><a name="[1f5]"></a>hal_i2c_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gr55xx_hal_i2c.o(i.hal_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_i2c_init &rArr; hal_i2c_init_ext &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_register_callback
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_init
</UL>

<P><STRONG><a name="[346]"></a>hal_i2c_init_ext</STRONG> (Thumb, 620 bytes, Stack size 32 bytes, gr55xx_hal_i2c_patch.o(i.hal_i2c_init_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_i2c_init_ext &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_mgmt_device_resume_register
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_msp_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSerialClock
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_updata_suspend_cb
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_renew_flag
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_device_state
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_resume_before_using
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_dev_num
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init
</UL>

<P><STRONG><a name="[34a]"></a>hal_i2c_irq_handler</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, gr55xx_hal_i2c_patch.o(i.hal_i2c_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_i2c_irq_handler &rArr; i2c_it_error &rArr; hal_i2c_error_callback &rArr; app_i2c_event_call
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_it_error
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_is_enabled_dma_req_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_IRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_IRQHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C5_IRQHandler
</UL>

<P><STRONG><a name="[33e]"></a>hal_i2c_master_abort_it</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, gr55xx_hal_i2c_patch.o(i.hal_i2c_master_abort_it))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_i2c_master_abort_it &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_abort_it
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_device_state
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_is_enabled_dma_req_tx
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_is_enabled_dma_req_rx
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dma_get_source_address
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dma_get_destination_address
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_deinit_ext
</UL>

<P><STRONG><a name="[1fb]"></a>hal_i2c_master_receive</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, gr55xx_hal_i2c_patch.o(i.hal_i2c_master_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hal_i2c_master_receive &rArr; i2c_master_start_receive &rArr; i2c_wait_on_sta_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_sta_flag_until_timeout
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_renew_flag
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_device_state
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_resume_before_using
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_start_receive
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_transfer_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_receive_sync
</UL>

<P><STRONG><a name="[90]"></a>hal_i2c_master_rx_cplt_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_i2c.o(i.hal_i2c_master_rx_cplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_i2c_master_rx_cplt_callback &rArr; app_i2c_event_call
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_event_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_i2c.o(.data)
</UL>
<P><STRONG><a name="[1fe]"></a>hal_i2c_master_transmit</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, gr55xx_hal_i2c_patch.o(i.hal_i2c_master_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hal_i2c_master_transmit &rArr; i2c_master_start_transmit &rArr; i2c_wait_on_sta_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_sta_flag_until_timeout
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_renew_flag
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_device_state
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_resume_before_using
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_start_transmit
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_transfer_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_transmit_sync
</UL>

<P><STRONG><a name="[8f]"></a>hal_i2c_master_tx_cplt_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_i2c.o(i.hal_i2c_master_tx_cplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_i2c_master_tx_cplt_callback &rArr; app_i2c_event_call
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_event_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_i2c.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>hal_i2c_msp_deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gr55xx_hal_i2c.o(i.hal_i2c_msp_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_deinit_ext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_i2c.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>hal_i2c_msp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gr55xx_hal_i2c.o(i.hal_i2c_msp_init))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init_ext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_i2c.o(.data)
</UL>
<P><STRONG><a name="[e8]"></a>hal_i2c_resume_reg</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gr55xx_hal_i2c_patch.o(i.hal_i2c_resume_reg))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wake_up_ind
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_resume_before_using
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_i2c_patch.o(i.hal_i2c_init_ext)
</UL>
<P><STRONG><a name="[1fc]"></a>hal_i2c_slave_receive</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, gr55xx_hal_i2c_patch.o(i.hal_i2c_slave_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hal_i2c_slave_receive &rArr; i2c_slave_start_receive &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_start_receive
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_renew_flag
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_device_state
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_resume_before_using
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_transfer_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_receive_sync
</UL>

<P><STRONG><a name="[92]"></a>hal_i2c_slave_rx_cplt_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_i2c.o(i.hal_i2c_slave_rx_cplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_i2c_slave_rx_cplt_callback &rArr; app_i2c_event_call
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_event_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_i2c.o(.data)
</UL>
<P><STRONG><a name="[1ff]"></a>hal_i2c_slave_transmit</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, gr55xx_hal_i2c_patch.o(i.hal_i2c_slave_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_sta_flag_until_timeout
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_start_transmit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_renew_flag
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_device_state
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_resume_before_using
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_transfer_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_transmit_sync
</UL>

<P><STRONG><a name="[91]"></a>hal_i2c_slave_tx_cplt_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_i2c.o(i.hal_i2c_slave_tx_cplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_i2c_slave_tx_cplt_callback &rArr; app_i2c_event_call
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_event_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_i2c.o(.data)
</UL>
<P><STRONG><a name="[f1]"></a>hal_i2c_suspend_reg</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gr55xx_hal_i2c_patch.o(i.hal_i2c_suspend_reg))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_prepare_for_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_i2c_patch.o(i.i2c_updata_suspend_cb_local)
</UL>
<P><STRONG><a name="[95]"></a>hal_msio_exti_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gr55xx_hal_msio.o(i.hal_msio_exti_callback))
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_msio.o(.data)
</UL>
<P><STRONG><a name="[202]"></a>hal_msio_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gr55xx_hal_msio.o(i.hal_msio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_msio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_msio_register_callback
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_msio_init_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_init
</UL>

<P><STRONG><a name="[e9]"></a>hal_pwr_sleep_timer_elapsed_callback</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, app_timer.o(i.hal_pwr_sleep_timer_elapsed_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_pwr_sleep_timer_elapsed_callback &rArr; low_level_timer_startup &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_startup
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_running_queue_remove
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_running_queue_insert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_pwr.o(i.hal_sleep_timer_config_and_start)
</UL>
<P><STRONG><a name="[96]"></a>hal_rtc_alarm_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gr55xx_hal_rtc.o(i.hal_rtc_alarm_callback))
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_rtc.o(.data)
</UL>
<P><STRONG><a name="[35a]"></a>hal_rtc_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gr55xx_hal_rtc.o(i.hal_rtc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_rtc_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_register_callback
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_deinit_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>

<P><STRONG><a name="[35d]"></a>hal_rtc_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gr55xx_hal_rtc.o(i.hal_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_rtc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_register_callback
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>

<P><STRONG><a name="[98]"></a>hal_rtc_overflow_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gr55xx_hal_rtc.o(i.hal_rtc_overflow_callback))
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_rtc.o(.data)
</UL>
<P><STRONG><a name="[35f]"></a>hal_sleep_timer_config_and_start</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gr55xx_hal_pwr.o(i.hal_sleep_timer_config_and_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_sleep_timer_config_and_start
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_register_timer_elaspsed_handler
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_config_timer_wakeup_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_startup
</UL>

<P><STRONG><a name="[3f4]"></a>hal_sleep_timer_get_clock_freq</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gr55xx_hal_sleep_timer_patch.o(i.hal_sleep_timer_get_clock_freq))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_startup
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_rest_get
</UL>

<P><STRONG><a name="[9c]"></a>hal_spi_abort_cplt_callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, app_spi.o(i.hal_spi_abort_cplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_spi_abort_cplt_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_spi.o(.data)
</UL>
<P><STRONG><a name="[21a]"></a>hal_spi_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gr55xx_hal_spi.o(i.hal_spi_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_spi_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_register_callback
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_deinit_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_init
</UL>

<P><STRONG><a name="[9b]"></a>hal_spi_error_callback</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_spi.o(i.hal_spi_error_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_spi_error_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_spi.o(.data)
</UL>
<P><STRONG><a name="[21b]"></a>hal_spi_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gr55xx_hal_spi.o(i.hal_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_spi_init
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_register_callback
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_init_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_init
</UL>

<P><STRONG><a name="[9a]"></a>hal_spi_msp_deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gr55xx_hal_spi.o(i.hal_spi_msp_deinit))
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_spi.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>hal_spi_msp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gr55xx_hal_spi.o(i.hal_spi_msp_init))
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_spi.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>hal_spi_rx_cplt_callback</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app_spi.o(i.hal_spi_rx_cplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_spi_rx_cplt_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_spi.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>hal_spi_soft_cs_assert</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_spi.o(i.hal_spi_soft_cs_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_spi_soft_cs_assert &rArr; app_io_write_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_id
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_write_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_spi.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>hal_spi_soft_cs_deassert</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_spi.o(i.hal_spi_soft_cs_deassert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_spi_soft_cs_deassert &rArr; app_io_write_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_id
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_write_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_spi.o(.data)
</UL>
<P><STRONG><a name="[9e]"></a>hal_spi_tx_cplt_callback</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_spi.o(i.hal_spi_tx_cplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_spi_tx_cplt_callback &rArr; _free_dma_llp_resource
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_dma_llp_resource
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_spi.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>hal_spi_tx_rx_cplt_callback</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app_spi.o(i.hal_spi_tx_rx_cplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_spi_tx_rx_cplt_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_spi.o(.data)
</UL>
<P><STRONG><a name="[a7]"></a>hal_uart_abort_cplt_callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, app_uart.o(i.hal_uart_abort_cplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_uart_abort_cplt_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_uart.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>hal_uart_abort_rx_cplt_callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, app_uart.o(i.hal_uart_abort_rx_cplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_uart_abort_rx_cplt_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_uart.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>hal_uart_abort_tx_cplt_callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, app_uart.o(i.hal_uart_abort_tx_cplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_uart_abort_tx_cplt_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_uart.o(.data)
</UL>
<P><STRONG><a name="[237]"></a>hal_uart_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gr55xx_hal_uart.o(i.hal_uart_deinit))
<BR><BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[a6]"></a>hal_uart_error_callback</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_uart.o(i.hal_uart_error_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_uart_error_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_id
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_uart.o(.data)
</UL>
<P><STRONG><a name="[238]"></a>hal_uart_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gr55xx_hal_uart.o(i.hal_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[1b6]"></a>hal_uart_irq_handler</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, gr55xx_hal_uart_patch.o(i.hal_uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hal_uart_irq_handler &rArr; uart_transmit_it &rArr; hal_uart_tx_cplt_callback &rArr; app_uart_start_transmit_async &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_error_callback
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_it
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_end_rx_transfer
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_abort_it
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_it
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>hal_uart_msp_deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gr55xx_hal_uart.o(i.hal_uart_msp_deinit))
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_uart.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>hal_uart_msp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gr55xx_hal_uart.o(i.hal_uart_msp_init))
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_uart.o(.data)
</UL>
<P><STRONG><a name="[a5]"></a>hal_uart_rx_cplt_callback</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_uart.o(i.hal_uart_rx_cplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_uart_rx_cplt_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_uart.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>hal_uart_tx_cplt_callback</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, app_uart.o(i.hal_uart_tx_cplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_uart_tx_cplt_callback &rArr; app_uart_start_transmit_async &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_dma_start_transmit_async
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_id
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_start_transmit_async
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_it
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_uart.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>hci_le_add_dev_to_rslv_list_cmd_handler_patch</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, llm_hci_patch.o(i.hci_le_add_dev_to_rslv_list_cmd_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hci_le_add_dev_to_rslv_list_cmd_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_search
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_dev_list_search
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_res_list_add
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>hci_le_clear_rslv_list_cmd_handler_patch</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, llm_hci_patch.o(i.hci_le_clear_rslv_list_cmd_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_le_clear_rslv_list_cmd_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_res_list_clear
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[381]"></a>hci_le_get_xo_offset_patch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llm_hci_patch.o(i.hci_le_get_xo_offset_patch))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_xo_param_operate_func_patch
</UL>

<P><STRONG><a name="[18]"></a>hci_le_rmv_dev_from_rslv_list_cmd_handler_patch</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, llm_hci_patch.o(i.hci_le_rmv_dev_from_rslv_list_cmd_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_le_rmv_dev_from_rslv_list_cmd_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_search
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_res_list_rem
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[378]"></a>hci_le_send_signal_carrier_wave_patch</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, llm_hci_patch.o(i.hci_le_send_signal_carrier_wave_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hci_le_send_signal_carrier_wave_patch &rArr; rf_txpwr_cs_get
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_txpwr_cs_get
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_param_set_func_patch
</UL>

<P><STRONG><a name="[1a]"></a>hci_le_set_addr_resol_en_cmd_handler_patch</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, llm_hci_patch.o(i.hci_le_set_addr_resol_en_cmd_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_le_set_addr_resol_en_cmd_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>hci_le_set_priv_mode_cmd_handler_patch</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, llm_hci_patch.o(i.hci_le_set_priv_mode_cmd_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_le_set_priv_mode_cmd_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_res_list_priv_mode_update
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_search
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[380]"></a>hci_le_set_xo_offset_patch</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llm_hci_patch.o(i.hci_le_set_xo_offset_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_le_set_xo_offset_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_xo_param_operate_func_patch
</UL>

<P><STRONG><a name="[eb]"></a>hci_le_test_param_set_func_patch</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, llm_hci_patch.o(i.hci_le_test_param_set_func_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hci_le_test_param_set_func_patch &rArr; hci_le_send_signal_carrier_wave_patch &rArr; rf_txpwr_cs_get
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_param_set_func
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcc_test_init_patch
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_test_init_patch
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_send_signal_carrier_wave_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci_patch.o(i.hci_le_test_param_set_func_replace)
</UL>
<P><STRONG><a name="[255]"></a>hci_le_test_param_set_func_replace</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, llm_hci_patch.o(i.hci_le_test_param_set_func_replace))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_env_init
</UL>

<P><STRONG><a name="[ec]"></a>hci_le_xo_param_operate_func_patch</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llm_hci_patch.o(i.hci_le_xo_param_operate_func_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_le_xo_param_operate_func_patch &rArr; hci_le_set_xo_offset_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_xo_param_operate_func
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_xo_offset_patch
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_get_xo_offset_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci_patch.o(i.hci_le_test_param_set_func_replace)
</UL>
<P><STRONG><a name="[2d2]"></a>hf_clock_calib_is_idle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, platform_clock_calib.o(i.hf_clock_calib_is_idle))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_calib_target_is_meet
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_calib_start
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_clk_calib_inner_start_new
</UL>

<P><STRONG><a name="[2a0]"></a>hfosc_calib_target_is_meet</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, platform_clock_calib.o(i.hfosc_calib_target_is_meet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hfosc_calib_target_is_meet
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_clock_calib_is_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_calibration_irq_handler
</UL>

<P><STRONG><a name="[2ca]"></a>hfosc_clk_calib_inner_start_new</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, platform_clock_calib.o(i.hfosc_clk_calib_inner_start_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hfosc_clk_calib_inner_start_new
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_register_nvic
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_mgmt_set_extra_device_state
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_request_xo_osc
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_fine_code_set
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_coarse_code_set
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_clock_calib_is_idle
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hs_clk_cal_set_slow_count
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hs_clk_cal_set_clk_source
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_fine_code_start
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_fine_code_retry
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_easy_find_coarse_code_retry
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_binary_search_fine_code_start
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_cali_binary_search_fine_code_retry
</UL>

<P><STRONG><a name="[2c7]"></a>hfosc_coarse_code_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, platform_clock_calib.o(i.hfosc_coarse_code_get))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clock_calib_handler_new
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_period_cali_start
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_boot_cali_start
</UL>

<P><STRONG><a name="[382]"></a>hfosc_coarse_code_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, platform_clock_calib.o(i.hfosc_coarse_code_set))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_clk_calib_inner_start_new
</UL>

<P><STRONG><a name="[2d6]"></a>hfosc_fine_code_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, platform_clock_calib.o(i.hfosc_fine_code_get))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clock_calib_handler_new
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_period_cali_start
</UL>

<P><STRONG><a name="[383]"></a>hfosc_fine_code_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, platform_clock_calib.o(i.hfosc_fine_code_set))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_clk_calib_inner_start_new
</UL>

<P><STRONG><a name="[2c5]"></a>hfosc_freq_cali_done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, platform_clock_calib.o(i.hfosc_freq_cali_done))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clock_calib_handler_new
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_period_cali_done
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clk_boot_cali_done
</UL>

<P><STRONG><a name="[2d7]"></a>hfosc_freq_update</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, platform_clock_calib.o(i.hfosc_freq_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hfosc_freq_update
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_clock_calib_handler_new
</UL>

<P><STRONG><a name="[4]"></a>host_to_sdk_msg_handler_patch</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ble_sdk_task_patch.o(i.host_to_sdk_msg_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = host_to_sdk_msg_handler_patch &rArr; find_new_msg_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msg_handler_func
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_iso_msg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_new_msg_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[4c0]"></a>hp_gain_1M_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.hp_gain_1M_get))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ch_hp_gain_get
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_hp_gain_calibration
</UL>

<P><STRONG><a name="[4c1]"></a>hp_gain_2M_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.hp_gain_2M_get))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_hp_gain_calibration
</UL>

<P><STRONG><a name="[432]"></a>htable_ospi_wa_for_rf_is_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.htable_ospi_wa_for_rf_is_enable))
<BR><BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_hopping_table_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_adjust_after_ble_event_end
</UL>

<P><STRONG><a name="[f0]"></a>i2c_dma_abort</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, gr55xx_hal_i2c_patch.o(i.i2c_dma_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_dma_abort &rArr; hal_i2c_error_callback &rArr; app_i2c_event_call
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_error_callback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_abort_cplt_callback
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_device_state
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dma_get_source_address
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dma_get_destination_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_i2c_patch.o(i.i2c_it_error)
</UL>
<P><STRONG><a name="[342]"></a>i2c_get_dev_num</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, gr55xx_hal_i2c_patch.o(i.i2c_get_dev_num))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init_ext
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_deinit_ext
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_updata_suspend_cb_local
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_renew_flag
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_device_state
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_resume_before_using
</UL>

<P><STRONG><a name="[34c]"></a>i2c_it_error</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, gr55xx_hal_i2c_patch.o(i.i2c_it_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c_it_error &rArr; hal_i2c_error_callback &rArr; app_i2c_event_call
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_error_callback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_abort_cplt_callback
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_abort_it
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_device_state
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_is_enabled_dma_req_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_irq_handler
</UL>

<P><STRONG><a name="[389]"></a>i2c_master_check_error</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, gr55xx_hal_i2c_patch.o(i.i2c_master_check_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_master_check_error
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_start_transmit
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_start_receive
</UL>

<P><STRONG><a name="[353]"></a>i2c_master_start_receive</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, gr55xx_hal_i2c_patch.o(i.i2c_master_start_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = i2c_master_start_receive &rArr; i2c_wait_on_sta_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_sta_flag_until_timeout
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_raw_flag_until_timeout
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_check_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive
</UL>

<P><STRONG><a name="[354]"></a>i2c_master_start_transmit</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gr55xx_hal_i2c_patch.o(i.i2c_master_start_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = i2c_master_start_transmit &rArr; i2c_wait_on_sta_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_sta_flag_until_timeout
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_raw_flag_until_timeout
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_check_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_transmit
</UL>

<P><STRONG><a name="[344]"></a>i2c_resume_before_using</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gr55xx_hal_i2c_patch.o(i.i2c_resume_before_using))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_resume_before_using
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_resume_reg
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_mgmt_clear_device_sleep_flag
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_dev_num
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_slave_transmit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_slave_receive
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_transmit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init_ext
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_deinit_ext
</UL>

<P><STRONG><a name="[33f]"></a>i2c_set_device_state</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gr55xx_hal_i2c_patch.o(i.i2c_set_device_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_mgmt_set_device_state
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_dev_num
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_slave_transmit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_slave_receive
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_transmit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_abort_it
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init_ext
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_deinit_ext
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_flag_until_timeout
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_it_error
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_abort
</UL>

<P><STRONG><a name="[348]"></a>i2c_set_renew_flag</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gr55xx_hal_i2c_patch.o(i.i2c_set_renew_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_set_renew_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_mgmt_set_device_renew_flag
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_dev_num
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_slave_transmit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_slave_receive
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_transmit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init_ext
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_transfer_config
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_transfer_config
</UL>

<P><STRONG><a name="[391]"></a>i2c_slave_check_error</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gr55xx_hal_i2c_patch.o(i.i2c_slave_check_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_slave_check_error
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_start_transmit
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_start_receive
</UL>

<P><STRONG><a name="[356]"></a>i2c_slave_start_receive</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, gr55xx_hal_i2c_patch.o(i.i2c_slave_start_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = i2c_slave_start_receive &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dwt_enable
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dwt_disable
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreUpdateClock
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_raw_flag_until_timeout
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_check_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_slave_receive
</UL>

<P><STRONG><a name="[357]"></a>i2c_slave_start_transmit</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, gr55xx_hal_i2c_patch.o(i.i2c_slave_start_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dwt_enable
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dwt_disable
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreUpdateClock
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_raw_flag_until_timeout
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_check_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_slave_transmit
</UL>

<P><STRONG><a name="[341]"></a>i2c_updata_suspend_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gr55xx_hal_i2c_patch.o(i.i2c_updata_suspend_cb))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init_ext
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_deinit_ext
</UL>

<P><STRONG><a name="[8a]"></a>i2c_updata_suspend_cb_local</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gr55xx_hal_i2c_patch.o(i.i2c_updata_suspend_cb_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_updata_suspend_cb_local
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_mgmt_save_device_handle
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_mgmt_device_suspend_release
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_mgmt_device_suspend_register
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_mgmt_clear_device_handle
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_dev_num
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr55xx_hal_i2c_patch.o(.data)
</UL>
<P><STRONG><a name="[397]"></a>i2c_wait_on_flag_until_timeout</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, gr55xx_hal_i2c_patch.o(i.i2c_wait_on_flag_until_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dwt_enable
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dwt_disable
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreUpdateClock
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_device_state
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_sta_flag_until_timeout
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_raw_flag_until_timeout
</UL>

<P><STRONG><a name="[38a]"></a>i2c_wait_on_raw_flag_until_timeout</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gr55xx_hal_i2c_patch.o(i.i2c_wait_on_raw_flag_until_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_flag_until_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_start_transmit
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_start_receive
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_start_transmit
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_start_receive
</UL>

<P><STRONG><a name="[351]"></a>i2c_wait_on_sta_flag_until_timeout</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gr55xx_hal_i2c_patch.o(i.i2c_wait_on_sta_flag_until_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = i2c_wait_on_sta_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_on_flag_until_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_slave_transmit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_transmit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_start_transmit
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_start_receive
</UL>

<P><STRONG><a name="[252]"></a>ke_task_func_replace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ke_task_patch.o(i.ke_task_func_replace))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_env_init
</UL>

<P><STRONG><a name="[13]"></a>l2cc_lecb_sdu_recv_ind_handler_patch</STRONG> (Thumb, 230 bytes, Stack size 88 bytes, gattc_task_patch.o(i.l2cc_lecb_sdu_recv_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = l2cc_lecb_sdu_recv_ind_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_raw_log_output
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_get_main_task
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_eatt_cid_index_get
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eatt_chan_rx_credit_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[426]"></a>le16toh</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, utility.o(i.le16toh))
<BR><BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_write_att_evt_handler
</UL>

<P><STRONG><a name="[41e]"></a>le32toh</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, utility.o(i.le32toh))
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_control_point_handler
</UL>

<P><STRONG><a name="[88]"></a>ll_connection_param_req_handler_patch</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, llc_con_upd_patch.o(i.ll_connection_param_req_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ll_connection_param_req_handler_patch &rArr; llc_proc_collision_check_slave_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_collision_check_slave_patch
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_state_set
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_reg
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_init
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_id_get
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_collision_check
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_evt_mask_check
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp_patch.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>ll_connection_update_ind_handler_patch</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, llc_con_upd_patch.o(i.ll_connection_update_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ll_connection_update_ind_handler_patch &rArr; llc_proc_local_remote_collision_check
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_local_remote_collision_check
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_state_set
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_state_get
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_reg
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_init
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_id_get
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_get
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_collision_status_get
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_collision_check_slave
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp_patch.o(.data)
</UL>
<P><STRONG><a name="[f8]"></a>llc_ch_class_en_proc_err_cb_patch</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llc_ch_class_patch.o(i.llc_ch_class_en_proc_err_cb_patch))
<BR><BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_ch_class_patch.o(i.llc_op_ch_class_en_ind_handler_patch)
</UL>
<P><STRONG><a name="[f9]"></a>llc_ch_class_rep_proc_err_cb_patch</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llc_ch_class_patch.o(i.llc_ch_class_rep_proc_err_cb_patch))
<BR><BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_ch_class_patch.o(i.llc_op_ch_class_rep_ind_handler_patch)
</UL>
<P><STRONG><a name="[25d]"></a>llc_ch_class_replace</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llc_ch_class_patch.o(i.llc_ch_class_replace))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_con_env_init
</UL>

<P><STRONG><a name="[25b]"></a>llc_llcp_replace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llc_llcp_patch.o(i.llc_llcp_replace))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_con_env_init
</UL>

<P><STRONG><a name="[f7]"></a>llc_llcp_trans_timer_set_func_patch</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, llc_patch.o(i.llc_llcp_trans_timer_set_func_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llc_llcp_trans_timer_set_func_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_patch.o(i.llc_llcp_trans_timer_set_func_replace)
</UL>
<P><STRONG><a name="[25a]"></a>llc_llcp_trans_timer_set_func_replace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llc_patch.o(i.llc_llcp_trans_timer_set_func_replace))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_con_env_init
</UL>

<P><STRONG><a name="[f4]"></a>llc_loc_ch_class_en_proc_continue_func_patch</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, llc_ch_class_patch.o(i.llc_loc_ch_class_en_proc_continue_func_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llc_loc_ch_class_en_proc_continue_func_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_id_get
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_loc_ch_class_en_proc_continue_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_ch_class_patch.o(i.llc_ch_class_replace)
</UL>
<P><STRONG><a name="[f5]"></a>llc_loc_ch_class_rep_proc_continue_func_patch</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, llc_ch_class_patch.o(i.llc_loc_ch_class_rep_proc_continue_func_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llc_loc_ch_class_rep_proc_continue_func_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_id_get
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_loc_ch_class_rep_proc_continue_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_ch_class_patch.o(i.llc_ch_class_replace)
</UL>
<P><STRONG><a name="[11]"></a>llc_op_ch_class_en_ind_handler_patch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llc_ch_class_patch.o(i.llc_op_ch_class_en_ind_handler_patch))
<BR><BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_ch_class_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>llc_op_ch_class_rep_ind_handler_patch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llc_ch_class_patch.o(i.llc_op_ch_class_rep_ind_handler_patch))
<BR><BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_ch_class_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>llc_op_dl_upd_ind_handler_patch</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, llc_dl_upd_patch.o(i.llc_op_dl_upd_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llc_op_dl_upd_ind_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_dl_upd_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[3a5]"></a>llc_proc_collision_check_slave_patch</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, llc_con_upd_patch.o(i.llc_proc_collision_check_slave_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llc_proc_collision_check_slave_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_instant_proc_type_reset
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_loc_con_upd_proc_stop
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_req_handler_patch
</UL>

<P><STRONG><a name="[3ab]"></a>llc_proc_local_remote_collision_check</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, llc_con_upd_patch.o(i.llc_proc_local_remote_collision_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llc_proc_local_remote_collision_check
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler_patch
</UL>

<P><STRONG><a name="[ca]"></a>llc_rem_encrypt_proc_continue_patch</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, llc_encrypt_patch.o(i.llc_rem_encrypt_proc_continue_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = llc_rem_encrypt_proc_continue_patch &rArr; llc_rem_encrypt_proc_finish_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_wait_start_enc_rsp_patch
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_finish_patch
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_waite_ltk
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_wait_sk
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_wait_pause_enc_rsp
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_wait_ivs_skds_gen
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_wait_enc_req
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_enc_proc_start
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_state_set
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_state_get
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_get
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_hci_ltk_request_evt_send
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_hci_enc_evt_send
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_disconnect
</UL>
<BR>[Address Reference Count : 2]<UL><LI> fpb_patch_init.o(i.system_driver_patch_enable)
<LI> system_sdk_patch.o(i.ble_patch_enable)
</UL>
<P><STRONG><a name="[2e9]"></a>llc_rem_encrypt_proc_finish_patch</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, llc_encrypt_patch.o(i.llc_rem_encrypt_proc_finish_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llc_rem_encrypt_proc_finish_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_data_flow_set
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_unreg
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_timer_pause_set
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_get
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_state_set
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_le_ping_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_continue_patch
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_encryt_check_by_llcp_patch
</UL>

<P><STRONG><a name="[3bf]"></a>llc_rem_wait_start_enc_rsp_patch</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, llc_encrypt_patch.o(i.llc_rem_wait_start_enc_rsp_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llc_rem_wait_start_enc_rsp_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_tx_enc
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_timer_set
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_proc_state_set
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_state_set
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ll_start_enc_rsp_pdu_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_rem_encrypt_proc_continue_patch
</UL>

<P><STRONG><a name="[f6]"></a>llcp_handler_replace_patch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, llc_llcp_patch.o(i.llcp_handler_replace_patch))
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp_patch.o(i.llc_llcp_replace)
</UL>
<P><STRONG><a name="[ff]"></a>lld_con_check_con_param_upd_instant_func_patch</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lld_con_patch.o(i.lld_con_check_con_param_upd_instant_func_patch))
<BR>[Address Reference Count : 1]<UL><LI> lld_con_patch.o(i.lld_con_replace)
</UL>
<P><STRONG><a name="[3c9]"></a>lld_con_check_instant_proc_done_patch</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lld_con_patch.o(i.lld_con_check_instant_proc_done_patch))
<BR><BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_check_instant_proc_done
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_evt_start_cbk_patch
</UL>

<P><STRONG><a name="[fc]"></a>lld_con_evt_canceled_patch</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, lld_con_patch.o(i.lld_con_evt_canceled_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lld_con_evt_canceled_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_read_clock
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_prio_idx_get
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_cleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lld_con_patch.o(i.lld_con_fill_env_func_patch)
</UL>
<P><STRONG><a name="[fb]"></a>lld_con_evt_start_cbk_patch</STRONG> (Thumb, 422 bytes, Stack size 72 bytes, lld_con_patch.o(i.lld_con_evt_start_cbk_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lld_con_evt_start_cbk_patch &rArr; lld_con_instant_proc_end_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_upd_con_param_while_instant_done
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_instant_proc_end_patch
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_check_instant_proc_done_patch
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_next_ch
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_config_tx_gain_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lld_con_patch.o(i.lld_con_fill_env_func_patch)
</UL>
<P><STRONG><a name="[fe]"></a>lld_con_fill_env_func_patch</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lld_con_patch.o(i.lld_con_fill_env_func_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_con_fill_env_func_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_fill_env_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lld_con_patch.o(i.lld_con_replace)
</UL>
<P><STRONG><a name="[3df]"></a>lld_con_find_next_anchor_point_patch</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lld_con_patch.o(i.lld_con_find_next_anchor_point_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_con_find_next_anchor_point_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_sched_patch
</UL>

<P><STRONG><a name="[3d1]"></a>lld_con_instant_proc_end_patch</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, lld_con_patch.o(i.lld_con_instant_proc_end_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lld_con_instant_proc_end_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_tx_len_update
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_instant_proc_end
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_evt_start_cbk_patch
</UL>

<P><STRONG><a name="[25e]"></a>lld_con_replace</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lld_con_patch.o(i.lld_con_replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lld_con_replace &rArr; default_slave_md_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_slave_md_set
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_con_env_init
</UL>

<P><STRONG><a name="[fd]"></a>lld_con_rx_func_patch</STRONG> (Thumb, 434 bytes, Stack size 64 bytes, lld_con_patch.o(i.lld_con_rx_func_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lld_con_rx_func_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_class_enable_proc_start
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_channel_assess_ble
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_rxdesc_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_rxdesc_check
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_rssi_update
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_rx_update_sync_timestamp
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_rx_proc_cte
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_rx_check_packet_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lld_con_patch.o(i.lld_con_replace)
</UL>
<P><STRONG><a name="[100]"></a>lld_con_sched_patch</STRONG> (Thumb, 678 bytes, Stack size 64 bytes, lld_con_patch.o(i.lld_con_sched_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lld_con_sched_patch &rArr; lld_con_find_next_anchor_point_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_find_next_anchor_point_patch
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_alarm_set
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sync_win_compute
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_prio_idx_get
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_compute_new_bit_offset
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_clear_ccm_counter
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_cleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lld_con_patch.o(i.lld_con_replace)
</UL>
<P><STRONG><a name="[3d0]"></a>lld_con_upd_con_param_while_instant_done</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lld_con_patch.o(i.lld_con_upd_con_param_while_instant_done))
<BR><BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_max_lat_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_evt_start_cbk_patch
</UL>

<P><STRONG><a name="[102]"></a>lld_lcp_data_tx_patch</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lld_lcp_patch.o(i.lld_lcp_data_tx_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lld_lcp_data_tx_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_warn
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_lcp_pkt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lld_lcp_patch.o(i.lld_lcp_replace)
</UL>
<P><STRONG><a name="[251]"></a>lld_lcp_replace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lld_lcp_patch.o(i.lld_lcp_replace))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_env_init
</UL>

<P><STRONG><a name="[10]"></a>lld_llcp_rx_ind_handler_patch</STRONG> (Thumb, 358 bytes, Stack size 152 bytes, llc_llcp_patch.o(i.lld_llcp_rx_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lld_llcp_rx_ind_handler_patch &rArr; finish_encryt_check_by_llcp_patch &rArr; llc_rem_encrypt_proc_finish_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_is_tst_pt_en
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_util_unpack
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_util_buf_rx_free
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_raw_log_output
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_llcp_opcode_is_invalid
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_env_is_free
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_check_llcp_pdu_process
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_le_ping_restart
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_disconnect
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_tst_rcv_llcp_handler
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_encryt_check_by_llcp_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[c9]"></a>lld_test_frm_cbk_fcc_patch</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lld_test_patch.o(i.lld_test_frm_cbk_fcc_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lld_test_frm_cbk_fcc_patch &rArr; lld_test_frm_isr_fcc_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_frm_isr_fcc_patch
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_rx_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lld_test_patch.o(i.bb_watch_timer_start_fcc_patch)
</UL>
<P><STRONG><a name="[3ed]"></a>lld_test_frm_isr_fcc_patch</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, lld_test_patch.o(i.lld_test_frm_isr_fcc_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lld_test_frm_isr_fcc_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_util_buf_acl_tx_free
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_remove
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_cleanup
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_frm_cbk_fcc_patch
</UL>

<P><STRONG><a name="[6]"></a>llm_hci_command_handler_patch</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, llm_hci_patch.o(i.llm_hci_command_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = llm_hci_command_handler_patch &rArr; find_new_llm_hci_cmd_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_raw_log_output
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_new_llm_hci_cmd_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[3fa]"></a>low_power_clock_calib_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, platform_clock_calib.o(i.low_power_clock_calib_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = low_power_clock_calib_start &rArr; slow_clock_calib_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_register_nvic
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_mgmt_set_extra_device_state
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_request_xo_osc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_clock_calib_config
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_lp_clock_type_get
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_clock_calib_start
</UL>

<P><STRONG><a name="[3fc]"></a>low_power_clock_freq_update</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, platform_clock_calib.o(i.low_power_clock_freq_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = low_power_clock_freq_update
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_lpclk_set
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_clock_calib_handler
</UL>

<P><STRONG><a name="[1d1]"></a>lpd_voltage_set</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, platform_pmu.o(i.lpd_voltage_set))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_settings_depend_on_temp_vbatt
</UL>

<P><STRONG><a name="[179]"></a>main</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = main &rArr; ads1299_init &rArr; ads1299_all_reg_read &rArr; ads1299_read_reg &rArr; ads1299_hw_spi_transmit_receive &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_init
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_periph_init
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ae]"></a>main_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gr_platform.o(i.main_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = main_init &rArr; warm_boot_process &rArr; pwr_mgmt_warm_boot &rArr; warm_boot &rArr; fast_load_nvic
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_boot_process
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wakeup_flag
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[404]"></a>mcu_dcdc_dcore_param_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, platform_pmu.o(i.mcu_dcdc_dcore_param_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mcu_dcdc_dcore_param_init &rArr; sys_pmu_digcore_set &rArr; sys_pmu_dcore_mv2code &rArr; sys_pmu_mv2code
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_is_ss_chip
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_digcore_set
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_dcore_code2mv
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_dcdc_set
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_dcdc_dcore_info_record
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dcdc_dcore_init
</UL>

<P><STRONG><a name="[2ea]"></a>mem_pwr_mgmt_mode_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, platform_sram.o(i.mem_pwr_mgmt_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mem_pwr_mgmt_mode_set &rArr; mem_low_power_auto_init &rArr; mem_pwr_mgmt_trans_addr_to_section
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pwr_srpg_set
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_low_power_auto_init
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pwr_mgmt_work_state_set
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pwr_mgmt_sleep_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_class_task
</UL>

<P><STRONG><a name="[406]"></a>mem_pwr_mgmt_trans_addr_to_section</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, platform_sram.o(i.mem_pwr_mgmt_trans_addr_to_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_pwr_mgmt_trans_addr_to_section
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_low_power_auto_init
</UL>

<P><STRONG><a name="[409]"></a>mem_pwr_srpg_set</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, platform_sram.o(i.mem_pwr_srpg_set))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pwr_mgmt_mode_set
</UL>

<P><STRONG><a name="[1d2]"></a>mem_retention_voltage_set</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, platform_pmu.o(i.mem_retention_voltage_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_retention_voltage_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_aon_pmu_set_retention_level
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_settings_depend_on_temp_vbatt
</UL>

<P><STRONG><a name="[2a6]"></a>nvds_replace</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sdk_nvds_patch.o(i.nvds_replace))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cold_patch_apply
</UL>

<P><STRONG><a name="[433]"></a>ospi_freq_restore</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sch_prog_patch.o(i.ospi_freq_restore))
<BR><BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_adjust_after_ble_event_end
</UL>

<P><STRONG><a name="[286]"></a>otas_notify_tx_data</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, otas.o(i.otas_notify_tx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = otas_notify_tx_data &rArr; prf_find_handle_by_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_noti_ind
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_find_handle_by_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_data
</UL>

<P><STRONG><a name="[2ba]"></a>otas_service_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, otas.o(i.otas_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = otas_service_init &rArr; ble_gatts_prf_add
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_prf_add
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_init
</UL>

<P><STRONG><a name="[42e]"></a>out_of_band_hp_gain_1M_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.out_of_band_hp_gain_1M_get))
<BR><BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_band_hp_gain_calibration
</UL>

<P><STRONG><a name="[42f]"></a>out_of_band_hp_gain_2M_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.out_of_band_hp_gain_2M_get))
<BR><BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_band_hp_gain_calibration
</UL>

<P><STRONG><a name="[427]"></a>out_of_band_hp_gain_calibration</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, rf_gdx_bali_b1_patch.o(i.out_of_band_hp_gain_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = out_of_band_hp_gain_calibration &rArr; __hardfp_round &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_lcp_sx_tune
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SX_reset
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SX_enable
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SX_disable
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_band_hp_gain_2M_get
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_band_hp_gain_1M_get
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_F_value
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_patch
</UL>

<P><STRONG><a name="[430]"></a>para_adjust_after_ble_event_end</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sch_prog_patch.o(i.para_adjust_after_ble_event_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = para_adjust_after_ble_event_end &rArr; pmu_adjust_after_ble_event_end &rArr; pmu_dcdc_dcore_info_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htable_ospi_wa_for_rf_is_enable
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_adjust_after_ble_event_end
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ospi_freq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_prog_fifo_isr_func_patch
</UL>

<P><STRONG><a name="[434]"></a>para_adjust_before_ble_event_start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sch_prog_patch.o(i.para_adjust_before_ble_event_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = para_adjust_before_ble_event_start &rArr; pmu_adjust_before_ble_event_start &rArr; pmu_dcdc_dcore_info_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_adjust_before_ble_event_start
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_prog_push_patch
</UL>

<P><STRONG><a name="[436]"></a>platform_clock_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, platform_clock.o(i.platform_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = platform_clock_init &rArr; platform_set_ble_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_init
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_xo_offset_init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_mgmt_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_psc_clk
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_ble_clk
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_idle_clock_turn_off
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_init_with_rng2
</UL>

<P><STRONG><a name="[43d]"></a>platform_clock_init_with_rng2</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, platform_clock.o(i.platform_clock_init_with_rng2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = platform_clock_init_with_rng2 &rArr; platform_clock_init &rArr; platform_set_ble_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep_init_without_stack_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_class_task
</UL>

<P><STRONG><a name="[2ec]"></a>platform_flash_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gr_soc.o(i.platform_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = platform_flash_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_xqspi_env_init
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_class_task
</UL>

<P><STRONG><a name="[4e6]"></a>platform_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gr_soc.o(i.platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = platform_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init
</UL>

<P><STRONG><a name="[2ef]"></a>platform_sdk_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, platform_sdk.o(i.platform_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = platform_sdk_init &rArr; cold_patch_apply &rArr; hal_clock_function_replace
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_register_nvic
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_low_power_set
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpll_calibration_init
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_warm_boot_reg
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cold_patch_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_class_task
</UL>

<P><STRONG><a name="[43a]"></a>platform_set_psc_clk</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, platform_clock.o(i.platform_set_psc_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = platform_set_psc_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sleep_timer_set_clk
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_calendar_timer_set_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_init
</UL>

<P><STRONG><a name="[43f]"></a>platform_xqspi_env_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gr55xx_hal_exflash_patch.o(i.platform_xqspi_env_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_flash_init
</UL>

<P><STRONG><a name="[431]"></a>pmu_adjust_after_ble_event_end</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, platform_pmu.o(i.pmu_adjust_after_ble_event_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pmu_adjust_after_ble_event_end &rArr; pmu_dcdc_dcore_info_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_dcdc_dcore_info_apply
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_is_working
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_adjust_after_ble_event_end
</UL>

<P><STRONG><a name="[435]"></a>pmu_adjust_before_ble_event_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, platform_pmu.o(i.pmu_adjust_before_ble_event_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pmu_adjust_before_ble_event_start &rArr; pmu_dcdc_dcore_info_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_dcdc_dcore_info_apply
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_is_working
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_adjust_before_ble_event_start
</UL>

<P><STRONG><a name="[298]"></a>pmu_boot_clk_scale_calc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, platform_sdk.o(i.pmu_boot_clk_scale_calc))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_clock_freq_update
</UL>

<P><STRONG><a name="[447]"></a>pmu_calibration_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, platform_pmu.o(i.pmu_calibration_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pmu_calibration_handler &rArr; pmu_param_calib_handler &rArr; pmu_param_calib_by_sw &rArr; _get_data_from_adc &rArr; _adc_conversion &rArr; _adc_try_set_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_handler
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_calibration_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_class_task
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_timer_handler
</UL>

<P><STRONG><a name="[446]"></a>pmu_dcdc_dcore_info_apply</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, platform_pmu.o(i.pmu_dcdc_dcore_info_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pmu_dcdc_dcore_info_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_aon_pmu_set_dig_ldo_out
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_aon_pmu_set_dcdc_vreg
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_adjust_before_ble_event_start
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_adjust_after_ble_event_end
</UL>

<P><STRONG><a name="[267]"></a>pmu_dcdc_dcore_info_record</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, platform_pmu.o(i.pmu_dcdc_dcore_info_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pmu_dcdc_dcore_info_record &rArr; pmu_dcore_info_record
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_dcore_info_record
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcdc_dcore_param_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_dcdc_dcore_param_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dcdc_dcore_param_init
</UL>

<P><STRONG><a name="[44b]"></a>pmu_dcore_info_record</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, platform_pmu.o(i.pmu_dcore_info_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pmu_dcore_info_record
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_aon_pmu_get_dig_ldo_bypass
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_dcore_adjust
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_dcdc_dcore_info_record
</UL>

<P><STRONG><a name="[44d]"></a>pmu_param_calib_by_sw</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, platform_pmu.o(i.pmu_param_calib_by_sw))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pmu_param_calib_by_sw &rArr; _get_data_from_adc &rArr; _adc_conversion &rArr; _adc_try_set_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_dcore_adjust
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_version_is_b2
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_adc_trim_get
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_recalibration_flag
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_settings_depend_on_temp_vbatt
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vbatt_calibrations
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_temperature_calibrations
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_data_from_adc
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_restore_and_unlock
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_lock_and_save
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_handler
</UL>

<P><STRONG><a name="[448]"></a>pmu_param_calib_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, platform_pmu.o(i.pmu_param_calib_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pmu_param_calib_handler &rArr; pmu_param_calib_by_sw &rArr; _get_data_from_adc &rArr; _adc_conversion &rArr; _adc_try_set_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_by_sw
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_calibration_handler
</UL>

<P><STRONG><a name="[455]"></a>pmu_reset_dcdc_dcore_to_safe_value</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, platform_pmu.o(i.pmu_reset_dcdc_dcore_to_safe_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pmu_reset_dcdc_dcore_to_safe_value
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_aon_pmu_set_dig_ldo_out
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_aon_pmu_set_dcdc_vreg
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_pmu_init
</UL>

<P><STRONG><a name="[1ce]"></a>pmu_set_io_ldo_bypass_by_vbatt</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, platform_pmu.o(i.pmu_set_io_ldo_bypass_by_vbatt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pmu_set_io_ldo_bypass_by_vbatt
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_efuse_info_sync
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_io_ldo_use_3p3_v
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vbatt_calibrations
</UL>

<P><STRONG><a name="[130]"></a>pmu_timer_handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pmu_calibration.o(i.pmu_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pmu_timer_handler &rArr; pmu_calibration_handler &rArr; pmu_param_calib_handler &rArr; pmu_param_calib_by_sw &rArr; _get_data_from_adc &rArr; _adc_conversion &rArr; _adc_try_set_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_calibration_handler
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start_api
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_delete
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pmu_calibration.o(i.pmu_timer_handler)
<LI> pmu_calibration.o(i.system_pmu_calibration_init)
</UL>
<P><STRONG><a name="[422]"></a>prf_find_handle_by_idx</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_prf_utils.o(i.prf_find_handle_by_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prf_find_handle_by_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_notify_tx_data
</UL>

<P><STRONG><a name="[41c]"></a>prf_find_idx_by_handle</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, ble_prf_utils.o(i.prf_find_idx_by_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prf_find_idx_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_write_att_evt_handler
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_read_att_evt_handler
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_cccd_set_evt_handler
</UL>

<P><STRONG><a name="[41b]"></a>prf_is_cccd_value_valid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_prf_utils.o(i.prf_is_cccd_value_valid))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_cccd_set_evt_handler
</UL>

<P><STRONG><a name="[48e]"></a>pvPortMalloc</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[c0]"></a>pwr_enter_sleep_check_new</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, app_pwr_mgmt.o(i.pwr_enter_sleep_check_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pwr_enter_sleep_check_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_pwr_mgmt.o(i.app_pwr_mgmt_init)
</UL>
<P><STRONG><a name="[20f]"></a>pwr_mgmt_mode_set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sdk_pwr_mgmt_patch.o(i.pwr_mgmt_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pwr_mgmt_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_warn
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_periph_init
</UL>

<P><STRONG><a name="[2a7]"></a>pwr_mgmt_shutdown_replace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdk_pwr_mgmt_patch.o(i.pwr_mgmt_shutdown_replace))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cold_patch_apply
</UL>

<P><STRONG><a name="[1f6]"></a>pwr_register_sleep_cb</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_pwr_mgmt.o(i.pwr_register_sleep_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pwr_register_sleep_cb &rArr; app_pwr_mgmt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwr_mgmt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_init
</UL>

<P><STRONG><a name="[47e]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[4a1]"></a>qmc6309_axis_convert</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, qmc6309.o(i.qmc6309_axis_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qmc6309_axis_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_mag_xyz
</UL>

<P><STRONG><a name="[491]"></a>qmc6309_delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qmc6309_gr55xx.o(i.qmc6309_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = qmc6309_delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_soft_reset
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_mag_raw
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_enable
</UL>

<P><STRONG><a name="[492]"></a>qmc6309_disable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, qmc6309.o(i.qmc6309_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = qmc6309_disable &rArr; qmc6309_write_reg &rArr; qmc6309_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_write_reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_init
</UL>

<P><STRONG><a name="[494]"></a>qmc6309_dump_reg</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, qmc6309.o(i.qmc6309_dump_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = qmc6309_dump_reg &rArr; qmc6309_read_reg &rArr; qmc6309_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_init
</UL>

<P><STRONG><a name="[496]"></a>qmc6309_enable</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, qmc6309.o(i.qmc6309_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = qmc6309_enable &rArr; qmc6309_read_reg &rArr; qmc6309_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_delay_ms
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_write_reg
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_init
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_mag_raw
</UL>

<P><STRONG><a name="[497]"></a>qmc6309_get_chipid</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, qmc6309.o(i.qmc6309_get_chipid))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = qmc6309_get_chipid &rArr; qmc6309_read_reg &rArr; qmc6309_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_init
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_recover
</UL>

<P><STRONG><a name="[498]"></a>qmc6309_hw_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, qmc6309_gr55xx.o(i.qmc6309_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = qmc6309_hw_init &rArr; qmc6309_i2c_scan &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_i2c_scan
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_init
</UL>

<P><STRONG><a name="[49a]"></a>qmc6309_i2c_read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, qmc6309_gr55xx.o(i.qmc6309_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = qmc6309_i2c_read &rArr; app_i2c_receive_sync &rArr; hal_i2c_slave_receive &rArr; i2c_slave_start_receive &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_receive_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_reg
</UL>

<P><STRONG><a name="[499]"></a>qmc6309_i2c_scan</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, qmc6309_gr55xx.o(i.qmc6309_i2c_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = qmc6309_i2c_scan &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_transmit_sync
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_hw_init
</UL>

<P><STRONG><a name="[49b]"></a>qmc6309_i2c_write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, qmc6309_gr55xx.o(i.qmc6309_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = qmc6309_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_transmit_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_write_reg
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_reg
</UL>

<P><STRONG><a name="[3fe]"></a>qmc6309_init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, qmc6309.o(i.qmc6309_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = qmc6309_init &rArr; qmc6309_recover &rArr; qmc6309_soft_reset &rArr; qmc6309_read_reg &rArr; qmc6309_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_hw_init
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_soft_reset
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_recover
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_init_para
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_get_chipid
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_enable
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_dump_reg
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_disable
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49e]"></a>qmc6309_init_para</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, qmc6309.o(i.qmc6309_init_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = qmc6309_init_para &rArr; qmc6309_set_range &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_set_range
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_init
</UL>

<P><STRONG><a name="[4a0]"></a>qmc6309_read_mag_raw</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, qmc6309.o(i.qmc6309_read_mag_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = qmc6309_read_mag_raw &rArr; qmc6309_recover &rArr; qmc6309_soft_reset &rArr; qmc6309_read_reg &rArr; qmc6309_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_delay_ms
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_recover
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_reg
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_enable
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_mag_xyz
</UL>

<P><STRONG><a name="[458]"></a>qmc6309_read_mag_xyz</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, qmc6309.o(i.qmc6309_read_mag_xyz))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = qmc6309_read_mag_xyz &rArr; qmc6309_read_mag_raw &rArr; qmc6309_recover &rArr; qmc6309_soft_reset &rArr; qmc6309_read_reg &rArr; qmc6309_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_write_reg
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_mag_raw
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_axis_convert
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_test_task
</UL>

<P><STRONG><a name="[495]"></a>qmc6309_read_reg</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, qmc6309.o(i.qmc6309_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = qmc6309_read_reg &rArr; qmc6309_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_i2c_write
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_i2c_read
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_soft_reset
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_mag_raw
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_get_chipid
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_enable
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_dump_reg
</UL>

<P><STRONG><a name="[49c]"></a>qmc6309_recover</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, qmc6309.o(i.qmc6309_recover))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = qmc6309_recover &rArr; qmc6309_soft_reset &rArr; qmc6309_read_reg &rArr; qmc6309_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_soft_reset
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_get_chipid
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_init
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_mag_raw
</UL>

<P><STRONG><a name="[49f]"></a>qmc6309_set_range</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, qmc6309.o(i.qmc6309_set_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = qmc6309_set_range &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_init_para
</UL>

<P><STRONG><a name="[49d]"></a>qmc6309_soft_reset</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, qmc6309.o(i.qmc6309_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = qmc6309_soft_reset &rArr; qmc6309_read_reg &rArr; qmc6309_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_delay_ms
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_write_reg
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_init
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_recover
</UL>

<P><STRONG><a name="[493]"></a>qmc6309_write_reg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, qmc6309.o(i.qmc6309_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = qmc6309_write_reg &rArr; qmc6309_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_mag_xyz
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_soft_reset
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_enable
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_disable
</UL>

<P><STRONG><a name="[4a2]"></a>qmi8658_config_acc</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, qmi8658.o(i.qmi8658_config_acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = qmi8658_config_acc &rArr; qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_write_reg
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_config_reg
</UL>

<P><STRONG><a name="[4a5]"></a>qmi8658_config_gyro</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, qmi8658.o(i.qmi8658_config_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = qmi8658_config_gyro &rArr; qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_write_reg
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_config_reg
</UL>

<P><STRONG><a name="[4a8]"></a>qmi8658_delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qmi8658_gr55xx.o(i.qmi8658_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = qmi8658_delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_init
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_send_ctl9cmd
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_cgain
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_on_demand_cali
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readIndirectData
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_soft_reset
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_enableSensors
</UL>

<P><STRONG><a name="[4a9]"></a>qmi8658_delay_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qmi8658_gr55xx.o(i.qmi8658_delay_us))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_xyz
</UL>

<P><STRONG><a name="[4aa]"></a>qmi8658_dump_reg</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, qmi8658.o(i.qmi8658_dump_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = qmi8658_dump_reg &rArr; qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_init
</UL>

<P><STRONG><a name="[4ab]"></a>qmi8658_enable_AHB_clock</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, qmi8658.o(i.qmi8658_enable_AHB_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = qmi8658_enable_AHB_clock &rArr; qmi8658_send_ctl9cmd &rArr; qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_send_ctl9cmd
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_init
</UL>

<P><STRONG><a name="[4ae]"></a>qmi8658_get_gyro_gain</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, qmi8658.o(i.qmi8658_get_gyro_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = qmi8658_get_gyro_gain &rArr; qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_on_demand_cali
</UL>

<P><STRONG><a name="[4af]"></a>qmi8658_get_id</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, qmi8658.o(i.qmi8658_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = qmi8658_get_id &rArr; qmi8658_on_demand_cali &rArr; qmi8658_get_gyro_gain &rArr; qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_on_demand_cali
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_write_reg
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_soft_reset
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_reg
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_get_chip_info
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_init
</UL>

<P><STRONG><a name="[4b2]"></a>qmi8658_hw_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, qmi8658_gr55xx.o(i.qmi8658_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = qmi8658_hw_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_init
</UL>

<P><STRONG><a name="[4b3]"></a>qmi8658_i2c_read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, qmi8658_gr55xx.o(i.qmi8658_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = qmi8658_i2c_read &rArr; app_i2c_receive_sync &rArr; hal_i2c_slave_receive &rArr; i2c_slave_start_receive &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_receive_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_reg
</UL>

<P><STRONG><a name="[4b4]"></a>qmi8658_i2c_write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, qmi8658_gr55xx.o(i.qmi8658_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_transmit_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_write_reg
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_reg
</UL>

<P><STRONG><a name="[3ff]"></a>qmi8658_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, qmi8658.o(i.qmi8658_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = qmi8658_init &rArr; qmi8658_get_id &rArr; qmi8658_on_demand_cali &rArr; qmi8658_get_gyro_gain &rArr; qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_hw_init
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_delay_ms
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_get_id
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_enable_AHB_clock
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_dump_reg
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_enableSensors
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_config_reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b1]"></a>qmi8658_on_demand_cali</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, qmi8658.o(i.qmi8658_on_demand_cali))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = qmi8658_on_demand_cali &rArr; qmi8658_get_gyro_gain &rArr; qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_delay_ms
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_get_gyro_gain
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_write_reg
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_get_id
</UL>

<P><STRONG><a name="[4b5]"></a>qmi8658_read_cgain</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, qmi8658.o(i.qmi8658_read_cgain))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = qmi8658_read_cgain &rArr; readIndirectData &rArr; qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_delay_ms
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readIndirectData
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_write_reg
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_enableSensors
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_xyz
</UL>

<P><STRONG><a name="[457]"></a>qmi8658_read_xyz</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, qmi8658.o(i.qmi8658_read_xyz))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = qmi8658_read_xyz &rArr; qmi8658_read_sensor_data &rArr; qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_delay_us
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_cgain
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_sensor_data
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_test_task
</UL>

<P><STRONG><a name="[4ac]"></a>qmi8658_send_ctl9cmd</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, qmi8658.o(i.qmi8658_send_ctl9cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = qmi8658_send_ctl9cmd &rArr; qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_delay_ms
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_write_reg
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_enable_AHB_clock
</UL>

<P><STRONG><a name="[285]"></a>reg_gapm_hci_evt_patch_tab</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gapm_task_patch.o(i.reg_gapm_hci_evt_patch_tab))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_patch_env_init
</UL>

<P><STRONG><a name="[283]"></a>reg_ke_msg_patch_tab</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ke_task_patch.o(i.reg_ke_msg_patch_tab))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_patch_env_init
</UL>

<P><STRONG><a name="[284]"></a>reg_llm_hci_cmd_patch_tab</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llm_hci_patch.o(i.reg_llm_hci_cmd_patch_tab))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_patch_env_init
</UL>

<P><STRONG><a name="[42d]"></a>rf_SX_disable</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.rf_SX_disable))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ch_hp_gain_get
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_hp_gain_calibration
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_band_hp_gain_calibration
</UL>

<P><STRONG><a name="[429]"></a>rf_SX_enable</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.rf_SX_enable))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ch_hp_gain_get
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_hp_gain_calibration
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_band_hp_gain_calibration
</UL>

<P><STRONG><a name="[42a]"></a>rf_SX_reset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.rf_SX_reset))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ch_hp_gain_get
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_hp_gain_calibration
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_band_hp_gain_calibration
</UL>

<P><STRONG><a name="[4bf]"></a>rf_SX_tune</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rf_gdx_bali_b1_patch.o(i.rf_SX_tune))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_SX_tune
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ch_hp_gain_get
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_hp_gain_calibration
</UL>

<P><STRONG><a name="[4bb]"></a>rf_api_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rf_gdx_bali_b1_patch.o(i.rf_api_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rf_api_init &rArr; rf_txpwr_cs_get
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_txpwr_cs_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[4c4]"></a>rf_cte_sample_init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.rf_cte_sample_init))
<BR><BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[11a]"></a>rf_force_agc_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.rf_force_agc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_force_agc_enable &rArr; em_ble_rxwincntl_pack_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_ble_rxwincntl_pack_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_gdx_bali_b1_patch.o(i.rf_api_init)
</UL>
<P><STRONG><a name="[24e]"></a>rf_gdx_replace</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.rf_gdx_replace))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_env_init
</UL>

<P><STRONG><a name="[4bc]"></a>rf_hopping_table_init</STRONG> (Thumb, 658 bytes, Stack size 36 bytes, rf_gdx_bali_b1_patch.o(i.rf_hopping_table_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rf_hopping_table_init
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htable_ospi_wa_for_rf_is_enable
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_idx_2_rf_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_patch
</UL>

<P><STRONG><a name="[4be]"></a>rf_hp_gain_calibration</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, rf_gdx_bali_b1_patch.o(i.rf_hp_gain_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rf_hp_gain_calibration &rArr; __hardfp_round &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SX_tune
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SX_reset
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SX_enable
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SX_disable
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hp_gain_2M_get
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hp_gain_1M_get
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_F_value
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_patch
</UL>

<P><STRONG><a name="[4c2]"></a>rf_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rf_gdx_bali_b1_patch.o(i.rf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rf_init &rArr; ble_communication_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_misc_init
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_cte_sample_init
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_api_init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_core_power_off
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_communication_core_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_freq_table_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_patch
</UL>

<P><STRONG><a name="[11c]"></a>rf_init_patch</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rf_gdx_bali_b1_patch.o(i.rf_init_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rf_init_patch &rArr; out_of_band_hp_gain_calibration &rArr; __hardfp_round &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rssi_adjust_according_to_rx_parameters
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sx_vco_ldo_init
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_perform_enhance
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_path_delay_init
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_hp_gain_calibration
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_hopping_table_init
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_band_hp_gain_calibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_gdx_bali_b1_patch.o(i.rf_gdx_replace)
</UL>
<P><STRONG><a name="[11d]"></a>rf_lcp_api_init_patch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.rf_lcp_api_init_patch))
<BR>[Address Reference Count : 1]<UL><LI> rf_gdx_bali_b1_patch.o(i.rf_gdx_replace)
</UL>
<P><STRONG><a name="[428]"></a>rf_lcp_sx_tune</STRONG> (Thumb, 216 bytes, Stack size 12 bytes, rf_gdx_bali_b1_patch.o(i.rf_lcp_sx_tune))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rf_lcp_sx_tune
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_band_hp_gain_calibration
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_lcp_sx_init_patch
</UL>

<P><STRONG><a name="[4c3]"></a>rf_misc_init</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.rf_misc_init))
<BR><BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_wakeup_init
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[4c8]"></a>rf_path_delay_init</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.rf_path_delay_init))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_patch
</UL>

<P><STRONG><a name="[4c7]"></a>rf_perform_enhance</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, rf_gdx_bali_b1_patch.o(i.rf_perform_enhance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_perform_enhance
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rssi_gain_set_cali_for_agc_gain_code
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_wakeup_init_patch
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_patch
</UL>

<P><STRONG><a name="[4c6]"></a>rf_sx_vco_ldo_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rf_gdx_bali_b1_patch.o(i.rf_sx_vco_ldo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rf_sx_vco_ldo_init &rArr; sxpll_working_min_vco_ldo_vref_get &rArr; start_ch_hp_gain_get &rArr; __hardfp_round &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sxpll_working_min_vco_ldo_vref_get
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sx_vco_ldo_set
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_is_ss_chip
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_patch
</UL>

<P><STRONG><a name="[4cd]"></a>rf_sx_vco_ldo_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.rf_sx_vco_ldo_set))
<BR><BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sx_vco_ldo_init
</UL>

<P><STRONG><a name="[119]"></a>rf_txpwr_cs_get</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rf_gdx_bali_b1_patch.o(i.rf_txpwr_cs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rf_txpwr_cs_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_api_init
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_send_signal_carrier_wave_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_gdx_bali_b1_patch.o(i.rf_api_init)
</UL>
<P><STRONG><a name="[116]"></a>rf_txpwr_dbm_get</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, rf_gdx_bali_b1_patch.o(i.rf_txpwr_dbm_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rf_txpwr_dbm_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_gdx_bali_b1_patch.o(i.rf_api_init)
</UL>
<P><STRONG><a name="[4ce]"></a>rf_wakeup_init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.rf_wakeup_init))
<BR><BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_misc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_wakeup_init_patch
</UL>

<P><STRONG><a name="[11b]"></a>rf_wakeup_init_patch</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rf_gdx_bali_b1_patch.o(i.rf_wakeup_init_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_wakeup_init_patch &rArr; ble_rf_rx_performance_selection
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_wakeup_init
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_perform_enhance
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rf_rx_performance_selection
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_core_is_powered_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_gdx_bali_b1_patch.o(i.rf_gdx_replace)
</UL>
<P><STRONG><a name="[461]"></a>ring_buffer_clean</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ring_buffer.o(i.ring_buffer_clean))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_start_replace
</UL>

<P><STRONG><a name="[235]"></a>ring_buffer_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ring_buffer.o(i.ring_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ring_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_start_replace
</UL>

<P><STRONG><a name="[22d]"></a>ring_buffer_items_count_get</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ring_buffer.o(i.ring_buffer_items_count_get))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_dma_start_transmit_async
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_start_transmit_async
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_flush
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_program_schedule
</UL>

<P><STRONG><a name="[22e]"></a>ring_buffer_read</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ring_buffer.o(i.ring_buffer_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_dma_start_transmit_async
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_start_transmit_async
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_flush
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_program_schedule
</UL>

<P><STRONG><a name="[2e0]"></a>ring_buffer_surplus_space_get</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ring_buffer.o(i.ring_buffer_surplus_space_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ring_buffer_surplus_space_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_write_data_to_buffer
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_program_schedule
</UL>

<P><STRONG><a name="[2e3]"></a>ring_buffer_write</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, ring_buffer.o(i.ring_buffer_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ring_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_write_data_to_buffer
</UL>

<P><STRONG><a name="[4c5]"></a>rssi_adjust_according_to_rx_parameters</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rf_gdx_bali_b1_patch.o(i.rssi_adjust_according_to_rx_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rssi_adjust_according_to_rx_parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rssi_gain_set_cali_for_agc_gain_code
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_rf_trim_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_patch
</UL>

<P><STRONG><a name="[27c]"></a>rssi_gain_set_cali_for_agc_gain_code</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.rssi_gain_set_cali_for_agc_gain_code))
<BR><BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rssi_adjust_according_to_rx_parameters
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_perform_enhance
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rf_rx_performance_selection
</UL>

<P><STRONG><a name="[120]"></a>rwble_isr_func_patch</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, rwble_patch.o(i.rwble_isr_func_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rwble_isr_func_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_iso_hop_isr
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_bts_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwble_patch.o(i.rwble_isr_replace)
</UL>
<P><STRONG><a name="[256]"></a>rwble_isr_replace</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rwble_patch.o(i.rwble_isr_replace))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_env_init
</UL>

<P><STRONG><a name="[24d]"></a>rwip_sleep_init_with_stack_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rwip_sleep_patch.o(i.rwip_sleep_init_with_stack_init))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_env_init
</UL>

<P><STRONG><a name="[43e]"></a>rwip_sleep_init_without_stack_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rwip_sleep_common.o(i.rwip_sleep_init_without_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rwip_sleep_init_without_stack_init &rArr; ble_core_init_without_stack_init &rArr; ble_communication_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_core_init_without_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_init_with_rng2
</UL>

<P><STRONG><a name="[12a]"></a>sch_arb_insert_func_patch</STRONG> (Thumb, 726 bytes, Stack size 64 bytes, sch_arb_patch.o(i.sch_arb_insert_func_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sch_arb_insert_func_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_front
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_insert_after
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract_sublist
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_time_get
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_prog_timer
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_idle_time_notify
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_elt_cancel
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_conflict_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sch_arb_patch.o(i.sch_arb_replace)
</UL>
<P><STRONG><a name="[253]"></a>sch_arb_replace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sch_arb_patch.o(i.sch_arb_replace))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_env_init
</UL>

<P><STRONG><a name="[254]"></a>sch_prog_replace</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sch_prog_patch.o(i.sch_prog_replace))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_env_init
</UL>

<P><STRONG><a name="[c]"></a>sec_rcv_bond_req_ind_handler_patch</STRONG> (Thumb, 472 bytes, Stack size 80 bytes, ble_sdk_sec_patch.o(i.sec_rcv_bond_req_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sec_rcv_bond_req_ind_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ke_msg_send
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ke_msg_alloc
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_raw_log_output
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_save_state
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_load_state
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapm_irk_get
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapc_enc_keysize_get
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_build_rand16
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_get_local_addr_by_conidx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>sec_rcv_encrypt_req_ind_handler_patch</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, ble_sdk_sec_patch.o(i.sec_rcv_encrypt_req_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sec_rcv_encrypt_req_ind_handler_patch &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ke_msg_send
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ke_msg_alloc
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_raw_log_output
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_save_state
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_load_state
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapc_auth_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.data)
</UL>
<P><STRONG><a name="[138]"></a>second_class_task</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gr_soc.o(i.second_class_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = second_class_task &rArr; pmu_calibration_handler &rArr; pmu_param_calib_handler &rArr; pmu_param_calib_by_sw &rArr; _get_data_from_adc &rArr; _adc_conversion &rArr; _adc_try_set_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_pmu_init
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_pmu_calibration_init
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_calibration_handler
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_init_with_rng2
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwr_mgmt_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreSetClock
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSerialClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.constdata)
</UL>
<P><STRONG><a name="[216]"></a>seconds2_calendar_time</STRONG> (Thumb, 254 bytes, Stack size 80 bytes, app_rtc.o(i.seconds2_calendar_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = seconds2_calendar_time &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rtc_get_time
</UL>

<P><STRONG><a name="[29f]"></a>sl_clock_calib_is_idle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, platform_clock_calib.o(i.sl_clock_calib_is_idle))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_calibration_irq_handler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_clock_calib_start
</UL>

<P><STRONG><a name="[295]"></a>slow_clock_calib_config</STRONG> (Thumb, 164 bytes, Stack size 28 bytes, platform_clock_calib.o(i.slow_clock_calib_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = slow_clock_calib_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_clock_calib_start
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_clock_calib_start
</UL>

<P><STRONG><a name="[29d]"></a>slow_clock_calib_handler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, platform_clock_calib.o(i.slow_clock_calib_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = slow_clock_calib_handler &rArr; boot_clock_freq_update &rArr; system_boot_timing_set &rArr; __hardfp_ceil &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_clock_freq_update
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_clock_freq_update
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_clock_calib_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_calibration_irq_handler
</UL>

<P><STRONG><a name="[2a2]"></a>slow_clock_calib_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, platform_clock_calib.o(i.slow_clock_calib_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = slow_clock_calib_start &rArr; low_power_clock_calib_start &rArr; slow_clock_calib_config
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_clock_calib_is_idle
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_clock_calib_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_calibration_trigger
</UL>

<P><STRONG><a name="[4e5]"></a>soc_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gr_soc.o(i.soc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = soc_init &rArr; platform_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_platform_init
</UL>

<P><STRONG><a name="[1f7]"></a>soc_register_nvic</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gr_soc.o(i.soc_register_nvic))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_sdk_init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_timer_handler_register
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_init
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpll_calibration_init
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_clock_calib_start
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_clk_calib_inner_start_new
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_clock_calib_start
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_inner_init
</UL>

<P><STRONG><a name="[24f]"></a>srpg_sleep_replace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, srpg_manager_patch.o(i.srpg_sleep_replace))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_env_init
</UL>

<P><STRONG><a name="[4e9]"></a>start_ch_hp_gain_get</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, rf_gdx_bali_b1_patch.o(i.start_ch_hp_gain_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = start_ch_hp_gain_get &rArr; __hardfp_round &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SX_tune
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SX_reset
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SX_enable
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SX_disable
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hp_gain_1M_get
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_F_value
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sxpll_working_min_vco_ldo_vref_get
</UL>

<P><STRONG><a name="[516]"></a>svc_func_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gr_soc.o(i.svc_func_register))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[54e]"></a>svc_user_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gr_soc.o(i.svc_user_handler))
<BR><BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_handler_proc
</UL>

<P><STRONG><a name="[4cc]"></a>sxpll_working_min_vco_ldo_vref_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rf_gdx_bali_b1_patch.o(i.sxpll_working_min_vco_ldo_vref_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sxpll_working_min_vco_ldo_vref_get &rArr; start_ch_hp_gain_get &rArr; __hardfp_round &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ch_hp_gain_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sx_vco_ldo_init
</UL>

<P><STRONG><a name="[4ea]"></a>sys_dcdc_dcore_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, platform_pmu.o(i.sys_dcdc_dcore_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_dcdc_dcore_init &rArr; sys_pmu_ddvs_digcore_code_get &rArr; sys_pmu_ddvs_initial_dcore_train &rArr; sys_pmu_ddvs_ringo_cnt_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_digcore_code_get
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcdc_dcore_param_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_dcdc_dcore_param_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dcdc_dcore_param_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_pmu_init
</UL>

<P><STRONG><a name="[258]"></a>sys_delay_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_sdk_patch.o(i.sys_delay_us))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_lcp_data_tx_patch
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_communication_core_init
</UL>

<P><STRONG><a name="[453]"></a>sys_hw_version_is_b2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, platform_pmu.o(i.sys_hw_version_is_b2))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_by_sw
</UL>

<P><STRONG><a name="[3fb]"></a>sys_lp_clock_type_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, platform_clock_calib.o(i.sys_lp_clock_type_get))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_clock_calib_start
</UL>

<P><STRONG><a name="[4ee]"></a>sys_pmu_code2mv</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, platform_pmu.o(i.sys_pmu_code2mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_pmu_code2mv
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_dcore_code2mv
</UL>

<P><STRONG><a name="[4ec]"></a>sys_pmu_dcdc_mv2code</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, platform_pmu.o(i.sys_pmu_dcdc_mv2code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_pmu_dcdc_mv2code &rArr; sys_pmu_mv2code
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_mv2code
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_dcdc_set
</UL>

<P><STRONG><a name="[264]"></a>sys_pmu_dcdc_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, platform_pmu.o(i.sys_pmu_dcdc_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sys_pmu_dcdc_set &rArr; sys_pmu_dcdc_mv2code &rArr; sys_pmu_mv2code
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_dcdc_mv2code
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_aon_pmu_set_dcdc_vreg
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcdc_dcore_param_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_dcdc_dcore_param_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dcdc_dcore_param_init
</UL>

<P><STRONG><a name="[265]"></a>sys_pmu_dcore_code2mv</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, platform_pmu.o(i.sys_pmu_dcore_code2mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_pmu_dcore_code2mv &rArr; sys_pmu_code2mv
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_code2mv
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_dcore_adjust
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcdc_dcore_param_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dcdc_dcore_param_init
</UL>

<P><STRONG><a name="[4ef]"></a>sys_pmu_dcore_code_adjust</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, platform_pmu.o(i.sys_pmu_dcore_code_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_pmu_dcore_code_adjust
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_is_working
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_dcore_adjust
</UL>

<P><STRONG><a name="[4f0]"></a>sys_pmu_dcore_mv2code</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, platform_pmu.o(i.sys_pmu_dcore_mv2code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_pmu_dcore_mv2code &rArr; sys_pmu_mv2code
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_mv2code
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_digcore_set
</UL>

<P><STRONG><a name="[454]"></a>sys_pmu_ddvs_dcore_adjust</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, platform_pmu.o(i.sys_pmu_ddvs_dcore_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sys_pmu_ddvs_dcore_adjust &rArr; sys_pmu_digcore_set &rArr; sys_pmu_dcore_mv2code &rArr; sys_pmu_mv2code
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_ringo_cnt_get
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_enable
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_dcore_code_adjust
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_digcore_set
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_dcore_code2mv
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_dcore_info_record
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_request_xo_osc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_release_xo_osc
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_aon_pmu_get_dig_ldo_bypass
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_by_sw
</UL>

<P><STRONG><a name="[4eb]"></a>sys_pmu_ddvs_digcore_code_get</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, platform_pmu.o(i.sys_pmu_ddvs_digcore_code_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sys_pmu_ddvs_digcore_code_get &rArr; sys_pmu_ddvs_initial_dcore_train &rArr; sys_pmu_ddvs_ringo_cnt_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreSetClock
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_initial_dcore_train
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_enable
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_request_xo_osc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_release_xo_osc
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_aon_pmu_set_dcdc_vreg
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dcdc_dcore_init
</UL>

<P><STRONG><a name="[4f1]"></a>sys_pmu_ddvs_enable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, platform_pmu.o(i.sys_pmu_ddvs_enable))
<BR><BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_digcore_code_get
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_dcore_adjust
</UL>

<P><STRONG><a name="[4f3]"></a>sys_pmu_ddvs_initial_dcore_train</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, platform_pmu.o(i.sys_pmu_ddvs_initial_dcore_train))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_pmu_ddvs_initial_dcore_train &rArr; sys_pmu_ddvs_ringo_cnt_get
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_ringo_cnt_get
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_aon_pmu_set_dig_ldo_out
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_digcore_code_get
</UL>

<P><STRONG><a name="[4f2]"></a>sys_pmu_ddvs_ringo_cnt_get</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, platform_pmu.o(i.sys_pmu_ddvs_ringo_cnt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_pmu_ddvs_ringo_cnt_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_initial_dcore_train
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_dcore_adjust
</UL>

<P><STRONG><a name="[266]"></a>sys_pmu_digcore_set</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, platform_pmu.o(i.sys_pmu_digcore_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sys_pmu_digcore_set &rArr; sys_pmu_dcore_mv2code &rArr; sys_pmu_mv2code
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_dcore_mv2code
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_aon_pmu_set_dig_ldo_out
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_dcore_adjust
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcdc_dcore_param_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_dcdc_dcore_param_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dcdc_dcore_param_init
</UL>

<P><STRONG><a name="[4f4]"></a>sys_pmu_ioldo_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, platform_pmu.o(i.sys_pmu_ioldo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_pmu_ioldo_init
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_io_ldo_use_3p3_v
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_pmu_init
</UL>

<P><STRONG><a name="[263]"></a>sys_pmu_is_ss_chip</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, platform_pmu.o(i.sys_pmu_is_ss_chip))
<BR><BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sx_vco_ldo_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcdc_dcore_param_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_dcdc_dcore_param_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dcdc_dcore_param_init
</UL>

<P><STRONG><a name="[4ed]"></a>sys_pmu_mv2code</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, platform_pmu.o(i.sys_pmu_mv2code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_pmu_mv2code
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_dcore_mv2code
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_dcdc_mv2code
</UL>

<P><STRONG><a name="[248]"></a>sys_sdk_verison_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, platform_sdk.o(i.sys_sdk_verison_get))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_info_replace
</UL>

<P><STRONG><a name="[330]"></a>sys_xo_hf_clock_switch_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gr55xx_hal_clock_patch.o(i.sys_xo_hf_clock_switch_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_function_replace
</UL>

<P><STRONG><a name="[299]"></a>system_boot_timing_set</STRONG> (Thumb, 488 bytes, Stack size 48 bytes, platform_sdk.o(i.system_boot_timing_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = system_boot_timing_set &rArr; __hardfp_ceil &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_clock_freq_update
</UL>

<P><STRONG><a name="[437]"></a>system_clk_mgmt_init</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, gr55xx_mgmt_clock_patch.o(i.system_clk_mgmt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = system_clk_mgmt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_security_enable_status_check
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_init
</UL>

<P><STRONG><a name="[32d]"></a>system_driver_patch_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fpb_patch_init.o(i.system_driver_patch_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = system_driver_patch_enable &rArr; gr5xx_fpb_func_register &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr5xx_fpb_func_register
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr5xx_fpb_init
</UL>

<P><STRONG><a name="[441]"></a>system_low_power_set</STRONG> (Thumb, 292 bytes, Stack size 0 bytes, platform_sdk.o(i.system_low_power_set))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_sdk_init
</UL>

<P><STRONG><a name="[142]"></a>system_platform_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gr_platform.o(i.system_platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = system_platform_init &rArr; soc_init &rArr; platform_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector_table_init
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_platform.o(.init_array)
</UL>
<P><STRONG><a name="[4e1]"></a>system_pmu_calibration_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pmu_calibration.o(i.system_pmu_calibration_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = system_pmu_calibration_init &rArr; app_timer_start_api &rArr; low_level_timer_startup &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start_api
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_delete
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_class_task
</UL>

<P><STRONG><a name="[4e2]"></a>system_pmu_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, platform_pmu.o(i.system_pmu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = system_pmu_init &rArr; sys_dcdc_dcore_init &rArr; sys_pmu_ddvs_digcore_code_get &rArr; sys_pmu_ddvs_initial_dcore_train &rArr; sys_pmu_ddvs_ringo_cnt_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_efuse_info_sync
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dcdc_dcore_init
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_reset_dcdc_dcore_to_safe_value
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ioldo_init
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_aon_pmu_set_tx_ton_val
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_aon_pmu_set_non_tx_ton_val
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_class_task
</UL>

<P><STRONG><a name="[1d0]"></a>ton_value_set</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, platform_pmu.o(i.ton_value_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ton_value_set
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ton_value_get_by_load_40mA_dcdc_1p25v
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ton_value_get_by_load_40mA_dcdc_1p15v
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ton_value_get_by_load_40mA_dcdc_1p05v
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ton_value_get_by_load_35mA_dcdc_1p15v
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ton_value_get_by_load_35mA_dcdc_1p05v
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_aon_pmu_set_tx_ton_val
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_aon_pmu_set_non_tx_ton_val
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_settings_depend_on_temp_vbatt
</UL>

<P><STRONG><a name="[36a]"></a>uart_transmit_it</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, gr55xx_hal_uart_patch.o(i.uart_transmit_it))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_transmit_it &rArr; hal_uart_tx_cplt_callback &rArr; app_uart_start_transmit_async &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_tx_cplt_callback
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_wait_line_flag_until_timeout
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_end_tx_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_irq_handler
</UL>

<P><STRONG><a name="[250]"></a>ultra_wfi_replace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdk_pwr_mgmt_patch.o(i.ultra_wfi_replace))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_env_init
</UL>

<P><STRONG><a name="[464]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[46c]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[47d]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[466]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[465]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[468]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[46a]"></a>vPortExitCritical</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[474]"></a>vPortFree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[502]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, port_pm.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPortSetupTimerInterrupt &rArr; hal_rtc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_register_nvic
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_stop_tick
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_set_tick_and_start
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[46e]"></a>vQueueAddToRegistry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[488]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1d8]"></a>vTaskDelay</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_test_task
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_schedule_task
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_i2c_scan
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_delay_ms
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_delay_ms
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_delay_ms
</UL>

<P><STRONG><a name="[506]"></a>vTaskDelete</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTasks
</UL>

<P><STRONG><a name="[51b]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[48d]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[508]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[505]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[401]"></a>vTaskStartScheduler</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53c]"></a>vTaskStepTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskStepTick))
<BR><BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sleep_tick_compensate
</UL>

<P><STRONG><a name="[475]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[181]"></a>vTaskSwitchContext</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[4f6]"></a>vector_table_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gr_soc.o(i.vector_table_init))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_boot_process
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_platform_init
</UL>

<P><STRONG><a name="[403]"></a>warm_boot_process</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gr_soc.o(i.warm_boot_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = warm_boot_process &rArr; pwr_mgmt_warm_boot &rArr; warm_boot &rArr; fast_load_nvic
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector_table_init
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_warm_boot
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_init
</UL>

<P><STRONG><a name="[50a]"></a>xPortStartScheduler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortStartScheduler &rArr; vPortSetupTimerInterrupt &rArr; hal_rtc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_func_register
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[518]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_tick_callback
</UL>

<P><STRONG><a name="[46d]"></a>xQueueGenericCreate</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[47b]"></a>xQueueGenericReset</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[51a]"></a>xQueueGenericSend</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[51d]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[486]"></a>xQueueReceive</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[51c]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[400]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTasks
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[51e]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[476]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sleep_tick_compensate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[519]"></a>xTaskIncrementTick</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[473]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[48c]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[479]"></a>xTaskResumeAll</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[509]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[483]"></a>xTimerGenericCommand</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[334]"></a>xo_16m_clock_switch_to_pll_16m_patch</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, gr55xx_hal_clock_patch.o(i.xo_16m_clock_switch_to_pll_16m_patch))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_switch_sys_clk_to_hf_osc_patch
</UL>

<P><STRONG><a name="[174]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[b3]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1ca]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_data_from_adc
</UL>

<P><STRONG><a name="[5bb]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[5bc]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[5bd]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[5be]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[5bf]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1b8]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_startup
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_data_from_adc
</UL>

<P><STRONG><a name="[520]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[528]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_startup
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ch_hp_gain_get
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_hp_gain_calibration
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_band_hp_gain_calibration
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_data_from_adc
</UL>

<P><STRONG><a name="[524]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[451]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_by_sw
</UL>

<P><STRONG><a name="[525]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3f7]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_startup
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ch_hp_gain_get
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_hp_gain_calibration
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_band_hp_gain_calibration
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_boot_timing_set
</UL>

<P><STRONG><a name="[526]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_startup
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ch_hp_gain_get
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_hp_gain_calibration
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_band_hp_gain_calibration
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_data_from_adc
</UL>

<P><STRONG><a name="[5c0]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[3f6]"></a>__aeabi_ul2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_startup
</UL>

<P><STRONG><a name="[5c1]"></a>_ll_uto_d</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull), UNUSED)

<P><STRONG><a name="[1be]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[527]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[52b]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[1c9]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_startup
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_by_sw
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_data_from_adc
</UL>

<P><STRONG><a name="[529]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[523]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[522]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1b9]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[52a]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[1bc]"></a>_drnd</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, drnd.o(x$fpl$drnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[1ba]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_data_from_adc
</UL>

<P><STRONG><a name="[52c]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1bd]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[52e]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4f5]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_boot_timing_set
</UL>

<P><STRONG><a name="[52f]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[386]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_freq_update
</UL>

<P><STRONG><a name="[5c2]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[5c3]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[5c4]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[530]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_f
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[16d]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[5c5]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[5c6]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[3f5]"></a>__aeabi_f2ulz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixull.o(x$fpl$llufromf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_timer_rest_get
</UL>

<P><STRONG><a name="[531]"></a>_ll_ufrom_f</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ffixull.o(x$fpl$llufromf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[14f]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[153]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2ee]"></a>nvds_setup</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gr_soc.o(i.nvds_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvds_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_retention_size
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get_start_addr
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_sector_size
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_class_task
</UL>

<P><STRONG><a name="[139]"></a>patch_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gr_soc.o(i.patch_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = patch_init &rArr; gr5xx_fpb_init &rArr; system_driver_patch_enable &rArr; gr5xx_fpb_func_register &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr5xx_fpb_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gr_soc.o(.constdata)
</UL>
<P><STRONG><a name="[33a]"></a>get_pin_index</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_io.o(i.get_pin_index))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_exti_callback
</UL>

<P><STRONG><a name="[13d]"></a>uart_wake_up_ind</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_uart.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_wake_up_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_resume_reg
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_clear_pending_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(.constdata)
</UL>
<P><STRONG><a name="[239]"></a>app_uart_start_transmit_async</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, app_uart.o(i.app_uart_start_transmit_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_uart_start_transmit_async &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_items_count_get
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_transmit_it
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_tx_cplt_callback
</UL>

<P><STRONG><a name="[366]"></a>uart_get_id</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_uart.o(i.uart_get_id))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_tx_cplt_callback
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_rx_cplt_callback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_error_callback
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_abort_tx_cplt_callback
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_abort_rx_cplt_callback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_abort_cplt_callback
</UL>

<P><STRONG><a name="[236]"></a>uart_gpio_config</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, app_uart.o(i.uart_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uart_gpio_config &rArr; app_io_init &rArr; hal_msio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[13c]"></a>uart_prepare_for_sleep</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_uart.o(i.uart_prepare_for_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_prepare_for_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_suspend_reg
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>spi_wake_up_ind</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_spi.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_wake_up_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_resume_reg
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_clear_pending_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_spi.o(.constdata)
</UL>
<P><STRONG><a name="[362]"></a>spi_get_id</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_spi.o(i.spi_get_id))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_tx_rx_cplt_callback
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_tx_cplt_callback
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_soft_cs_deassert
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_soft_cs_assert
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_rx_cplt_callback
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_error_callback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_abort_cplt_callback
</UL>

<P><STRONG><a name="[219]"></a>spi_gpio_config</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, app_spi.o(i.spi_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = spi_gpio_config &rArr; app_io_init &rArr; hal_msio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_write_pin
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_init
</UL>

<P><STRONG><a name="[13e]"></a>spi_prepare_for_sleep</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_spi.o(i.spi_prepare_for_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_prepare_for_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_suspend_reg
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_spi.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>i2c_wake_up_ind</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_i2c.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_wake_up_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_clear_pending_irq
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_resume_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[1f0]"></a>app_i2c_event_call</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, app_i2c.o(i.app_i2c_event_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_i2c_event_call
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_id
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_slave_tx_cplt_callback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_slave_rx_cplt_callback
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_tx_cplt_callback
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_rx_cplt_callback
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_error_callback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_abort_cplt_callback
</UL>

<P><STRONG><a name="[1f1]"></a>i2c_get_id</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_i2c.o(i.i2c_get_id))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_event_call
</UL>

<P><STRONG><a name="[1f3]"></a>i2c_gpio_config</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, app_i2c.o(i.i2c_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = i2c_gpio_config &rArr; app_io_init &rArr; hal_msio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i2c_init
</UL>

<P><STRONG><a name="[140]"></a>i2c_prepare_for_sleep</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_i2c.o(i.i2c_prepare_for_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_prepare_for_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_suspend_reg
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[21e]"></a>__NVIC_GetPriority</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_timer.o(i.__NVIC_GetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop_api
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start_api
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_need_insert_front
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_running_queue_remove
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_running_queue_insert
</UL>

<P><STRONG><a name="[21f]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop_api
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start_api
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_need_insert_front
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_running_queue_remove
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_running_queue_insert
</UL>

<P><STRONG><a name="[229]"></a>app_timer_node_init</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, app_timer.o(i.app_timer_node_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = app_timer_node_init
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start_api
</UL>

<P><STRONG><a name="[222]"></a>app_timer_running_queue_insert</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_running_queue_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_timer_running_queue_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_sleep_timer_elapsed_callback
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start_api
</UL>

<P><STRONG><a name="[223]"></a>app_timer_running_queue_remove</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_running_queue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_timer_running_queue_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_sleep_timer_elapsed_callback
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop_api
</UL>

<P><STRONG><a name="[227]"></a>is_need_insert_front</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, app_timer.o(i.is_need_insert_front))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = is_need_insert_front
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start_api
</UL>

<P><STRONG><a name="[225]"></a>is_timer_node_created</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_timer.o(i.is_timer_node_created))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start_api
</UL>

<P><STRONG><a name="[226]"></a>low_level_timer_rest_get</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, app_timer.o(i.low_level_timer_rest_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = low_level_timer_rest_get &rArr; __aeabi_f2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_timer_get_current_value
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_timer_get_clock_freq
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop_api
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start_api
</UL>

<P><STRONG><a name="[22b]"></a>low_level_timer_startup</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_timer.o(i.low_level_timer_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = low_level_timer_startup &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_timer_status_get
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_timer_get_current_value
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_timer_get_clock_freq
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_timer_config_and_start
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwr_sleep_timer_elapsed_callback
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop_api
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start_api
</UL>

<P><STRONG><a name="[228]"></a>low_level_timer_stop</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_timer.o(i.low_level_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = low_level_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_timer_stop
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_timer_status_get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop_api
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start_api
</UL>

<P><STRONG><a name="[22a]"></a>sleep_timer_handler_register</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_timer.o(i.sleep_timer_handler_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sleep_timer_handler_register
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_register_nvic
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start_api
</UL>

<P><STRONG><a name="[207]"></a>__NVIC_GetPriority</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_log.o(i.__NVIC_GetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
</UL>

<P><STRONG><a name="[20a]"></a>app_log_data_trans</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_log.o(i.app_log_data_trans))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
</UL>

<P><STRONG><a name="[208]"></a>app_log_is_fmt_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_log.o(i.app_log_is_fmt_set))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
</UL>

<P><STRONG><a name="[209]"></a>app_log_strcpy</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, app_log.o(i.app_log_strcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_log_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
</UL>

<P><STRONG><a name="[1e4]"></a>app_assert_info_output</STRONG> (Thumb, 114 bytes, Stack size 1048 bytes, app_assert.o(i.app_assert_info_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = app_assert_info_output &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_flush
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_warn_cb
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_param_cb
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_assert_err_cb
</UL>

<P><STRONG><a name="[29]"></a>ble_send_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dfu_port.o(i.ble_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_send_data &rArr; otas_notify_tx_data &rArr; prf_find_handle_by_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_notify_tx_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_port.o(.data)
</UL>
<P><STRONG><a name="[45c]"></a>check_system_info_address</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dfu_port.o(i.check_system_info_address))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_start_replace
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash_replace
</UL>

<P><STRONG><a name="[d8]"></a>dfu_fw_info_get</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dfu_port.o(i.dfu_fw_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dfu_fw_info_get &rArr; hal_flash_read_judge_security &rArr; security_state_recovery
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_send_frame
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_judge_security
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_port.o(i.dfu_port_init)
</UL>
<P><STRONG><a name="[d7]"></a>dfu_mode_set</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dfu_port.o(i.dfu_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfu_mode_set &rArr; security_state_recovery
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_system_reset
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_recovery
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_port.o(i.dfu_port_init)
</UL>
<P><STRONG><a name="[2d8]"></a>fast_dfu_cal_check_sum</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dfu_port.o(i.fast_dfu_cal_check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fast_dfu_cal_check_sum &rArr; security_state_recovery
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_read
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_recovery
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_program_schedule
</UL>

<P><STRONG><a name="[2da]"></a>fast_dfu_erase_flash</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dfu_port.o(i.fast_dfu_erase_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fast_dfu_erase_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_send_frame
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_erase
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_state_machine_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_schedule
</UL>

<P><STRONG><a name="[2dd]"></a>fast_dfu_program_schedule</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, dfu_port.o(i.fast_dfu_program_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fast_dfu_program_schedule &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_items_count_get
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_surplus_space_get
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_lld_max_msg_usage_ratio_set
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_send_frame
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_programing
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_write
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_state_machine_reset
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_recovery
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_disable
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_cal_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_schedule
</UL>

<P><STRONG><a name="[2e2]"></a>fast_dfu_write_data_to_buffer</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dfu_port.o(i.fast_dfu_write_data_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fast_dfu_write_data_to_buffer &rArr; ring_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_surplus_space_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_evt_process
</UL>

<P><STRONG><a name="[d3]"></a>get_info_replace</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dfu_port.o(i.get_info_replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_info_replace
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sdk_verison_get
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_send_frame
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rom_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_port.o(i.dfu_port_init)
</UL>
<P><STRONG><a name="[329]"></a>get_rom_version</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dfu_port.o(i.get_rom_version))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_info_replace
</UL>

<P><STRONG><a name="[2af]"></a>hal_flash_read_judge_security</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dfu_port.o(i.hal_flash_read_judge_security))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_flash_read_judge_security &rArr; security_state_recovery
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_recovery
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_fw_info_get
</UL>

<P><STRONG><a name="[d9]"></a>otas_evt_process</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, dfu_port.o(i.otas_evt_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = otas_evt_process &rArr; fast_dfu_write_data_to_buffer &rArr; ring_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_cmd_parse_state_reset
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_ble_send_data_cmpl_process
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_ble_receive_data_process
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_state_machine_reset
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_write_data_to_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_port.o(i.dfu_service_init)
</UL>
<P><STRONG><a name="[d6]"></a>program_end_replace</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, dfu_port.o(i.program_end_replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = program_end_replace &rArr; security_state_recovery
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_system_reset
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_send_frame
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_program_end
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_type_set
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_service_changed
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_recovery
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_port.o(i.dfu_port_init)
</UL>
<P><STRONG><a name="[d5]"></a>program_flash_replace</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, dfu_port.o(i.program_flash_replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = program_flash_replace
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_frame_state
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_set_security
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_get_security
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_send_frame
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_security_check_enable
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_programing
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_write
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_type_set
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_programe
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_erase
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_cal_check_sum
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_system_info_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_port.o(i.dfu_port_init)
</UL>
<P><STRONG><a name="[d4]"></a>program_start_replace</STRONG> (Thumb, 568 bytes, Stack size 40 bytes, dfu_port.o(i.program_start_replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = program_start_replace &rArr; ring_buffer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_init
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_clean
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_send_frame
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_security_check_enable
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_program_start
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_type_set
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_erase
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_system_info_address
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_port.o(i.dfu_port_init)
</UL>
<P><STRONG><a name="[2b1]"></a>security_disable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dfu_port.o(i.security_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = security_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_security_enable_status_check
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_set_security
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_get_security
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_end_replace
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_judge_security
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_program_schedule
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_cal_check_sum
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mode_set
</UL>

<P><STRONG><a name="[2b2]"></a>security_state_recovery</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfu_port.o(i.security_state_recovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = security_state_recovery
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_security_enable_status_check
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_set_security
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_end_replace
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_judge_security
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_program_schedule
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_dfu_cal_check_sum
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mode_set
</UL>

<P><STRONG><a name="[107]"></a>otas_ble_evt_handler</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, otas.o(i.otas_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = otas_ble_evt_handler &rArr; otas_write_att_evt_handler &rArr; prf_find_idx_by_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_write_att_evt_handler
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_read_att_evt_handler
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_ntf_cplt_evt_handler
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_cccd_set_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otas.o(i.otas_service_init)
</UL>
<P><STRONG><a name="[417]"></a>otas_cccd_set_evt_handler</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, otas.o(i.otas_cccd_set_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = otas_cccd_set_evt_handler &rArr; prf_find_idx_by_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_is_cccd_value_valid
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_find_idx_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_ble_evt_handler
</UL>

<P><STRONG><a name="[41d]"></a>otas_control_point_handler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, otas.o(i.otas_control_point_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = otas_control_point_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le32toh
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_write_att_evt_handler
</UL>

<P><STRONG><a name="[41a]"></a>otas_ntf_cplt_evt_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, otas.o(i.otas_ntf_cplt_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = otas_ntf_cplt_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_ble_evt_handler
</UL>

<P><STRONG><a name="[418]"></a>otas_read_att_evt_handler</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, otas.o(i.otas_read_att_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = otas_read_att_evt_handler &rArr; prf_find_idx_by_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_read_cfm
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_find_idx_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_ble_evt_handler
</UL>

<P><STRONG><a name="[419]"></a>otas_write_att_evt_handler</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, otas.o(i.otas_write_att_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = otas_write_att_evt_handler &rArr; prf_find_idx_by_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le16toh
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_write_cfm
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_control_point_handler
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_find_idx_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_ble_evt_handler
</UL>

<P><STRONG><a name="[545]"></a>vPortLocker</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port_pm.o(RAM_CODE))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_enter_sleep_with_cond
</UL>

<P><STRONG><a name="[548]"></a>vPortUnLocker</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port_pm.o(RAM_CODE))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_enter_sleep_with_cond
</UL>

<P><STRONG><a name="[54b]"></a>vDisableIRQExeptBLE</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port_pm.o(RAM_CODE))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_enter_sleep_with_cond
</UL>

<P><STRONG><a name="[54c]"></a>vRestoreIRQExeptBLE</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port_pm.o(RAM_CODE))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_enter_sleep_with_cond
</UL>

<P><STRONG><a name="[53a]"></a>systick_sleep_timeout_set</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, port_pm.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = systick_sleep_timeout_set &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_stop_tick
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_set_tick_and_start
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_enter_sleep_with_cond
</UL>

<P><STRONG><a name="[53b]"></a>system_sleep_tick_compensate</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, port_pm.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = system_sleep_tick_compensate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_compensate_restart
</UL>

<P><STRONG><a name="[53d]"></a>systick_compensate_restart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, port_pm.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = systick_compensate_restart &rArr; system_sleep_tick_compensate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_set_tick_and_start
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sleep_tick_compensate
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_enter_sleep_with_cond
</UL>

<P><STRONG><a name="[53e]"></a>pwr_mgmt_system_sleep</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, port_pm.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pwr_mgmt_system_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_graphics_ospi_wakeup
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_graphics_ospi_sleep
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_graphics_gpu_sleep
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_graphics_dc_sleep
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_enter_sleep_with_cond
</UL>

<P><STRONG><a name="[544]"></a>pwr_mgmt_enter_sleep_with_cond</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, port_pm.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pwr_mgmt_enter_sleep_with_cond &rArr; systick_compensate_restart &rArr; system_sleep_tick_compensate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_mode_get
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_dev_suspend
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wfe_func
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgmt_system_sleep
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_compensate_restart
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_sleep_timeout_set
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRestoreIRQExeptBLE
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDisableIRQExeptBLE
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortUnLocker
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortLocker
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterDeepSleep
</UL>

<P><STRONG><a name="[113]"></a>prvTaskExitError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[46b]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[48a]"></a>prvGetNextExpireTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[47f]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[482]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[484]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[487]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[485]"></a>prvSampleTimeNow</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[489]"></a>prvSwitchTimerLists</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[137]"></a>prvTimerTask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[463]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[467]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[46f]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[470]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[477]"></a>prvGetExpectedIdleTime</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tasks.o(i.prvGetExpectedIdleTime))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[135]"></a>prvIdleTask</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvIdleTask &rArr; vPortEnterDeepSleep &rArr; pwr_mgmt_enter_sleep_with_cond &rArr; systick_compensate_restart &rArr; system_sleep_tick_compensate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterDeepSleep
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[47c]"></a>prvInitialiseNewTask</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[469]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[507]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[471]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[472]"></a>prvCopyDataToQueue</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[47a]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[480]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[481]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[48b]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[48f]"></a>prvHeapInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[490]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1e8]"></a>app_calendar_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.app_calendar_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_calendar_init &rArr; app_rtc_init_time &rArr; ble_time_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rtc_init_time
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rtc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTasks
</UL>

<P><STRONG><a name="[134]"></a>dfu_schedule_task</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.dfu_schedule_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = dfu_schedule_task &rArr;  dfu_schedule_task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_schedule_task
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_schedule
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_schedule_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.vStartTasks)
</UL>
<P><STRONG><a name="[133]"></a>print_test_task</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(i.print_test_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = print_test_task &rArr; qmc6309_read_mag_xyz &rArr; qmc6309_read_mag_raw &rArr; qmc6309_recover &rArr; qmc6309_soft_reset &rArr; qmc6309_read_reg &rArr; qmc6309_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rtc_get_time
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_xyz
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmc6309_read_mag_xyz
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_flush
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.vStartTasks)
</UL>
<P><STRONG><a name="[104]"></a>vStartTasks</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(i.vStartTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = vStartTasks &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calendar_init
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1eb]"></a>app_connected_handler</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, user_app.o(i.app_connected_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = app_connected_handler &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1ec]"></a>app_disconnected_handler</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, user_app.o(i.app_disconnected_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = app_disconnected_handler &rArr; app_error_fault_handler &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[24b]"></a>gap_params_init</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, user_app.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = gap_params_init &rArr; app_error_fault_handler &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_pair_enable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_name_set
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_param_set
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_data_set
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_init
</UL>

<P><STRONG><a name="[24a]"></a>services_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_app.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = services_init &rArr; dfu_service_init &rArr; otas_service_init &rArr; ble_gatts_prf_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_init
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_init
</UL>

<P><STRONG><a name="[1d3]"></a>ads1299_all_reg_read</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, ads1299.o(i.ads1299_all_reg_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ads1299_all_reg_read &rArr; ads1299_read_reg &rArr; ads1299_hw_spi_transmit_receive &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_write_cmd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_read_reg
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_init
</UL>

<P><STRONG><a name="[1d9]"></a>ads1299_device_reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ads1299.o(i.ads1299_device_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ads1299_device_reset &rArr; ads1299_delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_hw_reset_pin_set
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_init
</UL>

<P><STRONG><a name="[1d5]"></a>ads1299_read_reg</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, ads1299.o(i.ads1299_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ads1299_read_reg &rArr; ads1299_hw_spi_transmit_receive &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_hw_spi_transmit_receive
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_all_reg_read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_init
</UL>

<P><STRONG><a name="[1d4]"></a>ads1299_write_cmd</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ads1299.o(i.ads1299_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ads1299_write_cmd &rArr; ads1299_hw_spi_transmit_receive &rArr; app_log_output &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_hw_spi_transmit_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_all_reg_read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1299_init
</UL>

<P><STRONG><a name="[b4]"></a>app_spi_master_callback</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ads1299_gr55xx.o(i.app_spi_master_callback))
<BR>[Address Reference Count : 1]<UL><LI> ads1299_gr55xx.o(i.ads1299_hw_init)
</UL>
<P><STRONG><a name="[4b8]"></a>qmi8658_axis_convert</STRONG> (Thumb, 132 bytes, Stack size 36 bytes, qmi8658.o(i.qmi8658_axis_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = qmi8658_axis_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_sensor_data
</UL>

<P><STRONG><a name="[4a6]"></a>qmi8658_config_reg</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, qmi8658.o(i.qmi8658_config_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = qmi8658_config_reg &rArr; qmi8658_config_gyro &rArr; qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_config_gyro
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_config_acc
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_enableSensors
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_init
</UL>

<P><STRONG><a name="[4a7]"></a>qmi8658_enableSensors</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, qmi8658.o(i.qmi8658_enableSensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = qmi8658_enableSensors &rArr; qmi8658_write_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_delay_ms
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_init
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_cgain
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_config_reg
</UL>

<P><STRONG><a name="[4ad]"></a>qmi8658_get_chip_info</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, qmi8658.o(i.qmi8658_get_chip_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = qmi8658_get_chip_info &rArr; qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_get_id
</UL>

<P><STRONG><a name="[4a4]"></a>qmi8658_read_reg</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, qmi8658.o(i.qmi8658_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_i2c_write
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_i2c_read
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_xyz
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_send_ctl9cmd
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_on_demand_cali
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_get_id
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_get_gyro_gain
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_dump_reg
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_config_gyro
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_config_acc
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readIndirectData
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_soft_reset
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_sensor_data
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_get_chip_info
</UL>

<P><STRONG><a name="[4b7]"></a>qmi8658_read_sensor_data</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, qmi8658.o(i.qmi8658_read_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = qmi8658_read_sensor_data &rArr; qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_reg
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_axis_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_xyz
</UL>

<P><STRONG><a name="[4b0]"></a>qmi8658_soft_reset</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, qmi8658.o(i.qmi8658_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = qmi8658_soft_reset &rArr; qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_delay_ms
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_write_reg
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_get_id
</UL>

<P><STRONG><a name="[4a3]"></a>qmi8658_write_reg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, qmi8658.o(i.qmi8658_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = qmi8658_write_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_send_ctl9cmd
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_cgain
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_on_demand_cali
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_get_id
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_enable_AHB_clock
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_config_gyro
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_config_acc
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readIndirectData
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_soft_reset
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_enableSensors
</UL>

<P><STRONG><a name="[4b6]"></a>readIndirectData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, qmi8658.o(i.readIndirectData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = readIndirectData &rArr; qmi8658_read_reg &rArr; qmi8658_i2c_write &rArr; app_i2c_transmit_sync &rArr; hal_i2c_slave_transmit &rArr; i2c_slave_start_transmit &rArr; i2c_wait_on_raw_flag_until_timeout &rArr; i2c_wait_on_flag_until_timeout &rArr; i2c_set_device_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_delay_ms
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_write_reg
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmi8658_read_cgain
</UL>

<P><STRONG><a name="[115]"></a>APP_I2C_0_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, qmi8658_gr55xx.o(i.APP_I2C_0_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> qmi8658_gr55xx.o(i.qmi8658_hw_init)
</UL>
<P><STRONG><a name="[114]"></a>APP_I2C_3_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, qmc6309_gr55xx.o(i.APP_I2C_3_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> qmc6309_gr55xx.o(i.qmc6309_hw_init)
</UL>
<P><STRONG><a name="[2f0]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdk_fpb_mgmt.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr5xx_fpb_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_save_state_local
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_load_state_local
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr5xx_fpb_func_register
</UL>

<P><STRONG><a name="[2f1]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdk_fpb_mgmt.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr5xx_fpb_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_save_state_local
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_load_state_local
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gr5xx_fpb_func_register
</UL>

<P><STRONG><a name="[e5]"></a>fpb_load_state_local</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sdk_fpb_mgmt.o(i.fpb_load_state_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fpb_load_state_local &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdk_fpb_mgmt.o(i.gr5xx_fpb_init)
</UL>
<P><STRONG><a name="[2f2]"></a>fpb_patch_reg_resume</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sdk_fpb_mgmt.o(i.fpb_patch_reg_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fpb_patch_reg_resume &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_save_state_local
</UL>

<P><STRONG><a name="[e6]"></a>fpb_save_state_local</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sdk_fpb_mgmt.o(i.fpb_save_state_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fpb_save_state_local &rArr; fpb_patch_reg_resume &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_patch_reg_resume
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdk_fpb_mgmt.o(i.gr5xx_fpb_init)
</UL>
<P><STRONG><a name="[2ff]"></a>__NVIC_GetPriority</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_sdk_gapm_patch.o(i.__NVIC_GetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_init_fsm_next_func_patch
</UL>

<P><STRONG><a name="[300]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_sdk_gapm_patch.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_init_fsm_next_func_patch
</UL>

<P><STRONG><a name="[268]"></a>ble_event_handle</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_event_patch.o(i.ble_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_profile_evt_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_write_cb
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_read_cb
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_prep_write_cb
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_ntf_ind_cb
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_mult_ntf_cb
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_enh_write_cb
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_enh_read_cb
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_enh_prep_write_cb
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_enh_ntf_ind_cb
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_enh_mult_ntf_cb
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_enh_cccd_set_cb
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_cccd_set_cb
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cb
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_srvc_disc_cb
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_srvc_browse_cb
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cb
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_ntf_ind_cb
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_inc_srvc_disc_cb
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_write_cb
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_srvc_disc_cb
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_srvc_browse_cb
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_read_cb
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_ntf_ind_cb
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_inc_srvc_disc_cb
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_char_disc_cb
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_enh_char_desc_disc_cb
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_char_disc_cb
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_char_desc_disc_cb
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cache_update_cb
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_keypress_notify_cb
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_key_missing_cb
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_enc_req_cb
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_rcv_enc_ind_cb
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_lecb_sdu_send_cb
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_lecb_sdu_recv_cb
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_lecb_disconn_cb
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_lecb_credit_add_cmp_cb
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_lecb_conn_req_cb
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_lecb_conn_cb
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_lecb_add_credits_ind_cb
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_enh_lecb_reconfig_ind_cb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_enh_lecb_reconfig_cmp_cb
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_enh_lecb_conn_req_cb
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_enh_lecb_conn_cb
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_prf_register_cb
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_mtu_exchange_cb
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_tx_power_change_report_cb
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sync_lost_cb
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sync_establish_cb
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_subrate_chg_ind_cb
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_stop_sync_cb
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_scan_stop_cb
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_scan_start_cb
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_scan_req_ind_cb
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_rslv_addr_read_cb
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_remote_tx_power_read_cb
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_ranging_sample_report_cb
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_ranging_ind_cb
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_ranging_cmp_ind_cb
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_psm_manager_cb
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_phy_update_cb
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_peer_name_ind_cb
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_peer_info_get_cb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_path_loss_threshold_report_cb
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_param_set_cb
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_local_tx_power_read_cb
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_le_pkt_size_info_cb
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect_cb
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_dft_subrate_set_cb
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_device_info_set_cb
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_dev_info_get_cb
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connless_iq_report_cb
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connection_update_req_cb
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connection_update_cb
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connection_info_get_cb
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connect_cb
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connect_cancel_cb
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_conn_iq_report_cb
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_auto_connection_timeout_cb
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_adv_stop_cb
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_adv_start_cb
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_adv_report_ind_cb
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_adv_data_update_cb
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init_cplt_callback
</UL>

<P><STRONG><a name="[65]"></a>ble_init_cplt_callback</STRONG> (Thumb, 44 bytes, Stack size 192 bytes, ble_event_patch.o(i.ble_init_cplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ble_init_cplt_callback &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>gap_adv_data_update_cb</STRONG> (Thumb, 38 bytes, Stack size 192 bytes, ble_event_patch.o(i.gap_adv_data_update_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = gap_adv_data_update_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>gap_adv_report_ind_cb</STRONG> (Thumb, 54 bytes, Stack size 192 bytes, ble_event_patch.o(i.gap_adv_report_ind_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = gap_adv_report_ind_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>gap_adv_start_cb</STRONG> (Thumb, 44 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_adv_start_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_adv_start_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>gap_adv_stop_cb</STRONG> (Thumb, 52 bytes, Stack size 208 bytes, ble_event_patch.o(i.gap_adv_stop_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = gap_adv_stop_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>gap_auto_connection_timeout_cb</STRONG> (Thumb, 38 bytes, Stack size 192 bytes, ble_event_patch.o(i.gap_auto_connection_timeout_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = gap_auto_connection_timeout_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>gap_conn_iq_report_cb</STRONG> (Thumb, 56 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_conn_iq_report_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_conn_iq_report_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>gap_connect_cancel_cb</STRONG> (Thumb, 38 bytes, Stack size 192 bytes, ble_event_patch.o(i.gap_connect_cancel_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = gap_connect_cancel_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>gap_connect_cb</STRONG> (Thumb, 56 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_connect_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_connect_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>gap_connection_info_get_cb</STRONG> (Thumb, 56 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_connection_info_get_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_connection_info_get_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>gap_connection_update_cb</STRONG> (Thumb, 56 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_connection_update_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_connection_update_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>gap_connection_update_req_cb</STRONG> (Thumb, 54 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_connection_update_req_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_connection_update_req_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>gap_connless_iq_report_cb</STRONG> (Thumb, 56 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_connless_iq_report_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_connless_iq_report_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>gap_dev_info_get_cb</STRONG> (Thumb, 50 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_dev_info_get_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_dev_info_get_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>gap_device_info_set_cb</STRONG> (Thumb, 50 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_device_info_set_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_device_info_set_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>gap_dft_subrate_set_cb</STRONG> (Thumb, 38 bytes, Stack size 192 bytes, ble_event_patch.o(i.gap_dft_subrate_set_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = gap_dft_subrate_set_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>gap_disconnect_cb</STRONG> (Thumb, 50 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_disconnect_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_disconnect_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>gap_le_pkt_size_info_cb</STRONG> (Thumb, 54 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_le_pkt_size_info_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_le_pkt_size_info_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>gap_local_tx_power_read_cb</STRONG> (Thumb, 58 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_local_tx_power_read_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_local_tx_power_read_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>gap_param_set_cb</STRONG> (Thumb, 94 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_param_set_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_param_set_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>gap_path_loss_threshold_report_cb</STRONG> (Thumb, 52 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_path_loss_threshold_report_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_path_loss_threshold_report_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>gap_peer_info_get_cb</STRONG> (Thumb, 60 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_peer_info_get_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_peer_info_get_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>gap_peer_name_ind_cb</STRONG> (Thumb, 58 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_peer_name_ind_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_peer_name_ind_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>gap_phy_update_cb</STRONG> (Thumb, 52 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_phy_update_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_phy_update_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>gap_psm_manager_cb</STRONG> (Thumb, 60 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_psm_manager_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_psm_manager_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>gap_ranging_cmp_ind_cb</STRONG> (Thumb, 52 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_ranging_cmp_ind_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_ranging_cmp_ind_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>gap_ranging_ind_cb</STRONG> (Thumb, 52 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_ranging_ind_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_ranging_ind_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>gap_ranging_sample_report_cb</STRONG> (Thumb, 52 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_ranging_sample_report_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_ranging_sample_report_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>gap_remote_tx_power_read_cb</STRONG> (Thumb, 58 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_remote_tx_power_read_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_remote_tx_power_read_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>gap_rslv_addr_read_cb</STRONG> (Thumb, 56 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_rslv_addr_read_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_rslv_addr_read_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>gap_scan_req_ind_cb</STRONG> (Thumb, 56 bytes, Stack size 192 bytes, ble_event_patch.o(i.gap_scan_req_ind_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = gap_scan_req_ind_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>gap_scan_start_cb</STRONG> (Thumb, 38 bytes, Stack size 192 bytes, ble_event_patch.o(i.gap_scan_start_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = gap_scan_start_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>gap_scan_stop_cb</STRONG> (Thumb, 46 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_scan_stop_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_scan_stop_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>gap_stop_sync_cb</STRONG> (Thumb, 44 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_stop_sync_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_stop_sync_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>gap_subrate_chg_ind_cb</STRONG> (Thumb, 54 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_subrate_chg_ind_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_subrate_chg_ind_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>gap_sync_establish_cb</STRONG> (Thumb, 56 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_sync_establish_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_sync_establish_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>gap_sync_lost_cb</STRONG> (Thumb, 44 bytes, Stack size 192 bytes, ble_event_patch.o(i.gap_sync_lost_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = gap_sync_lost_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>gap_tx_power_change_report_cb</STRONG> (Thumb, 56 bytes, Stack size 200 bytes, ble_event_patch.o(i.gap_tx_power_change_report_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gap_tx_power_change_report_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>gatt_mtu_exchange_cb</STRONG> (Thumb, 50 bytes, Stack size 200 bytes, ble_event_patch.o(i.gatt_mtu_exchange_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gatt_mtu_exchange_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>gatt_prf_register_cb</STRONG> (Thumb, 44 bytes, Stack size 200 bytes, ble_event_patch.o(i.gatt_prf_register_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gatt_prf_register_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>l2cap_enh_lecb_conn_cb</STRONG> (Thumb, 56 bytes, Stack size 200 bytes, ble_event_patch.o(i.l2cap_enh_lecb_conn_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = l2cap_enh_lecb_conn_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>l2cap_enh_lecb_conn_req_cb</STRONG> (Thumb, 56 bytes, Stack size 200 bytes, ble_event_patch.o(i.l2cap_enh_lecb_conn_req_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = l2cap_enh_lecb_conn_req_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>l2cap_enh_lecb_reconfig_cmp_cb</STRONG> (Thumb, 44 bytes, Stack size 200 bytes, ble_event_patch.o(i.l2cap_enh_lecb_reconfig_cmp_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = l2cap_enh_lecb_reconfig_cmp_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>l2cap_enh_lecb_reconfig_ind_cb</STRONG> (Thumb, 56 bytes, Stack size 200 bytes, ble_event_patch.o(i.l2cap_enh_lecb_reconfig_ind_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = l2cap_enh_lecb_reconfig_ind_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>l2cap_lecb_add_credits_ind_cb</STRONG> (Thumb, 50 bytes, Stack size 200 bytes, ble_event_patch.o(i.l2cap_lecb_add_credits_ind_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = l2cap_lecb_add_credits_ind_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>l2cap_lecb_conn_cb</STRONG> (Thumb, 58 bytes, Stack size 200 bytes, ble_event_patch.o(i.l2cap_lecb_conn_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = l2cap_lecb_conn_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>l2cap_lecb_conn_req_cb</STRONG> (Thumb, 54 bytes, Stack size 200 bytes, ble_event_patch.o(i.l2cap_lecb_conn_req_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = l2cap_lecb_conn_req_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>l2cap_lecb_credit_add_cmp_cb</STRONG> (Thumb, 50 bytes, Stack size 200 bytes, ble_event_patch.o(i.l2cap_lecb_credit_add_cmp_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = l2cap_lecb_credit_add_cmp_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>l2cap_lecb_disconn_cb</STRONG> (Thumb, 50 bytes, Stack size 200 bytes, ble_event_patch.o(i.l2cap_lecb_disconn_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = l2cap_lecb_disconn_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>l2cap_lecb_sdu_recv_cb</STRONG> (Thumb, 68 bytes, Stack size 200 bytes, ble_event_patch.o(i.l2cap_lecb_sdu_recv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = l2cap_lecb_sdu_recv_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>l2cap_lecb_sdu_send_cb</STRONG> (Thumb, 50 bytes, Stack size 200 bytes, ble_event_patch.o(i.l2cap_lecb_sdu_send_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = l2cap_lecb_sdu_send_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>sec_rcv_enc_ind_cb</STRONG> (Thumb, 60 bytes, Stack size 200 bytes, ble_event_patch.o(i.sec_rcv_enc_ind_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = sec_rcv_enc_ind_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>sec_rcv_enc_req_cb</STRONG> (Thumb, 58 bytes, Stack size 200 bytes, ble_event_patch.o(i.sec_rcv_enc_req_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = sec_rcv_enc_req_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>sec_rcv_key_missing_cb</STRONG> (Thumb, 50 bytes, Stack size 200 bytes, ble_event_patch.o(i.sec_rcv_key_missing_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = sec_rcv_key_missing_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>sec_rcv_keypress_notify_cb</STRONG> (Thumb, 50 bytes, Stack size 200 bytes, ble_event_patch.o(i.sec_rcv_keypress_notify_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = sec_rcv_keypress_notify_cb &rArr; ble_event_handle &rArr; ble_profile_evt_handle &rArr; gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_event_patch.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>ble_client_enh_prf_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_profile_patch.o(i.ble_client_enh_prf_init))
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>ble_client_prf_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_profile_patch.o(i.ble_client_prf_init))
<BR>[Address Reference Count : 1]<UL><LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[289]"></a>ble_service_att_num_get</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, ble_profile_patch.o(i.ble_service_att_num_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_service_att_num_get
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_service_load_cb
</UL>

<P><STRONG><a name="[322]"></a>ble_service_evt_handler_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ble_profile_patch.o(i.ble_service_evt_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_evt_handle
</UL>

<P><STRONG><a name="[287]"></a>ble_service_info_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_profile_patch.o(i.ble_service_info_get))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_service_load_cb
</UL>

<P><STRONG><a name="[71]"></a>ble_service_load_cb</STRONG> (Thumb, 134 bytes, Stack size 208 bytes, ble_profile_patch.o(i.ble_service_load_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = ble_service_load_cb &rArr; ble_service_att_num_get
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_srvc_db_create
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_service_info_get
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_service_att_num_get
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_profile_patch.o(.data)
<LI> ble_profile_patch.o(.data)
</UL>
<P><STRONG><a name="[279]"></a>gatt_common_evt_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_profile_patch.o(i.gatt_common_evt_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gatt_common_evt_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_profile_evt_handle
</UL>

<P><STRONG><a name="[274]"></a>gattc_connect_state_evt</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_profile_patch.o(i.gattc_connect_state_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattc_connect_state_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_profile_evt_handle
</UL>

<P><STRONG><a name="[278]"></a>gattc_enh_evt_handle</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_profile_patch.o(i.gattc_enh_evt_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattc_enh_evt_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_gattc_get_record_profile_id
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_profile_evt_handle
</UL>

<P><STRONG><a name="[277]"></a>gattc_evt_handle</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_profile_patch.o(i.gattc_evt_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattc_evt_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_profile_evt_handle
</UL>

<P><STRONG><a name="[276]"></a>gattc_srvc_browse_evt_handle</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_profile_patch.o(i.gattc_srvc_browse_evt_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gattc_srvc_browse_evt_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_profile_evt_handle
</UL>

<P><STRONG><a name="[273]"></a>gatts_connect_state_evt</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_profile_patch.o(i.gatts_connect_state_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gatts_connect_state_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_profile_evt_handle
</UL>

<P><STRONG><a name="[275]"></a>gatts_evt_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_profile_patch.o(i.gatts_evt_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gatts_evt_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_service_evt_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_profile_evt_handle
</UL>

<P><STRONG><a name="[26f]"></a>list_add</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_profile_patch.o(i.list_add))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_prf_add
</UL>

<P><STRONG><a name="[314]"></a>find_new_hci_evt_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gapm_task_patch.o(i.find_new_hci_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_new_hci_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_hci_handler_patch
</UL>

<P><STRONG><a name="[30c]"></a>hci_disc_cmp_evt_handler_patch</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gapc_hci_patch.o(i.hci_disc_cmp_evt_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_disc_cmp_evt_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_cleanup
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_error_evt
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_disconect_ind
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_hci_handler_patch
</UL>

<P><STRONG><a name="[3f2]"></a>find_new_llm_hci_cmd_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llm_hci_patch.o(i.find_new_llm_hci_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_new_llm_hci_cmd_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_hci_command_handler_patch
</UL>

<P><STRONG><a name="[352]"></a>i2c_master_transfer_config</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gr55xx_hal_i2c_patch.o(i.i2c_master_transfer_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_master_transfer_config &rArr; i2c_set_renew_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_renew_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_transmit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive
</UL>

<P><STRONG><a name="[355]"></a>i2c_slave_transfer_config</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gr55xx_hal_i2c_patch.o(i.i2c_slave_transfer_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_slave_transfer_config &rArr; i2c_set_renew_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_renew_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_slave_transmit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_slave_receive
</UL>

<P><STRONG><a name="[34f]"></a>ll_dma_get_destination_address</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gr55xx_hal_i2c_patch.o(i.ll_dma_get_destination_address))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_abort_it
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_abort
</UL>

<P><STRONG><a name="[350]"></a>ll_dma_get_source_address</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gr55xx_hal_i2c_patch.o(i.ll_dma_get_source_address))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_abort_it
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_abort
</UL>

<P><STRONG><a name="[34d]"></a>ll_i2c_is_enabled_dma_req_rx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gr55xx_hal_i2c_patch.o(i.ll_i2c_is_enabled_dma_req_rx))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_abort_it
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_it_error
</UL>

<P><STRONG><a name="[34b]"></a>ll_i2c_is_enabled_dma_req_tx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gr55xx_hal_i2c_patch.o(i.ll_i2c_is_enabled_dma_req_tx))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_abort_it
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_irq_handler
</UL>

<P><STRONG><a name="[444]"></a>ll_calendar_timer_set_clk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, platform_clock.o(i.ll_calendar_timer_set_clk))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_psc_clk
</UL>

<P><STRONG><a name="[1b5]"></a>ll_clk_set_sys_clk</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, platform_clock.o(i.ll_clk_set_sys_clk))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreSetClock
</UL>

<P><STRONG><a name="[443]"></a>ll_sleep_timer_set_clk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, platform_clock.o(i.ll_sleep_timer_set_clk))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_psc_clk
</UL>

<P><STRONG><a name="[43b]"></a>platform_idle_clock_turn_off</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, platform_clock.o(i.platform_idle_clock_turn_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = platform_idle_clock_turn_off
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_init
</UL>

<P><STRONG><a name="[439]"></a>platform_set_ble_clk</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, platform_clock.o(i.platform_set_ble_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = platform_set_ble_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_clock_init
</UL>

<P><STRONG><a name="[296]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, platform_clock_calib.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_clock_calib_start
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_clk_calib_inner_start_new
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_clock_calib_start
</UL>

<P><STRONG><a name="[384]"></a>ll_hs_clk_cal_set_clk_source</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, platform_clock_calib.o(i.ll_hs_clk_cal_set_clk_source))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_clk_calib_inner_start_new
</UL>

<P><STRONG><a name="[385]"></a>ll_hs_clk_cal_set_slow_count</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, platform_clock_calib.o(i.ll_hs_clk_cal_set_slow_count))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfosc_clk_calib_inner_start_new
</UL>

<P><STRONG><a name="[44e]"></a>__NVIC_GetPriority</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, platform_pmu.o(i.__NVIC_GetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_by_sw
</UL>

<P><STRONG><a name="[1bf]"></a>_adc_conversion</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, platform_pmu.o(i._adc_conversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _adc_conversion &rArr; _adc_try_set_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_try_set_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_data_from_adc
</UL>

<P><STRONG><a name="[1c2]"></a>_adc_lock_and_save</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, platform_pmu.o(i._adc_lock_and_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _adc_lock_and_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_by_sw
</UL>

<P><STRONG><a name="[452]"></a>_adc_restore_and_unlock</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, platform_pmu.o(i._adc_restore_and_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_by_sw
</UL>

<P><STRONG><a name="[1c0]"></a>_adc_try_set_clock</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, platform_pmu.o(i._adc_try_set_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _adc_try_set_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_conversion
</UL>

<P><STRONG><a name="[1c5]"></a>_get_data_from_adc</STRONG> (Thumb, 290 bytes, Stack size 80 bytes, platform_pmu.o(i._get_data_from_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _get_data_from_adc &rArr; _adc_conversion &rArr; _adc_try_set_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_conversion
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_by_sw
</UL>

<P><STRONG><a name="[1cb]"></a>_temperature_calibrations</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, platform_pmu.o(i._temperature_calibrations))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _temperature_calibrations
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_period_lv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_by_sw
</UL>

<P><STRONG><a name="[1cd]"></a>_vbatt_calibrations</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, platform_pmu.o(i._vbatt_calibrations))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _vbatt_calibrations &rArr; pmu_set_io_ldo_bypass_by_vbatt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_io_ldo_bypass_by_vbatt
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_by_sw
</UL>

<P><STRONG><a name="[1cf]"></a>adjust_settings_depend_on_temp_vbatt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, platform_pmu.o(i.adjust_settings_depend_on_temp_vbatt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adjust_settings_depend_on_temp_vbatt &rArr; mem_retention_voltage_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ton_value_set
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_retention_voltage_set
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpd_voltage_set
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_param_calib_by_sw
</UL>

<P><STRONG><a name="[44c]"></a>ll_aon_pmu_get_dig_ldo_bypass</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, platform_pmu.o(i.ll_aon_pmu_get_dig_ldo_bypass))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_dcore_adjust
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_dcore_info_record
</UL>

<P><STRONG><a name="[449]"></a>ll_aon_pmu_set_dcdc_vreg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, platform_pmu.o(i.ll_aon_pmu_set_dcdc_vreg))
<BR><BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_digcore_code_get
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_reset_dcdc_dcore_to_safe_value
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_dcdc_set
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_dcdc_dcore_info_apply
</UL>

<P><STRONG><a name="[44a]"></a>ll_aon_pmu_set_dig_ldo_out</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, platform_pmu.o(i.ll_aon_pmu_set_dig_ldo_out))
<BR><BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_ddvs_initial_dcore_train
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_reset_dcdc_dcore_to_safe_value
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_pmu_digcore_set
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_dcdc_dcore_info_apply
</UL>

<P><STRONG><a name="[4f9]"></a>ll_aon_pmu_set_non_tx_ton_val</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, platform_pmu.o(i.ll_aon_pmu_set_non_tx_ton_val))
<BR><BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_pmu_init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ton_value_set
</UL>

<P><STRONG><a name="[40a]"></a>ll_aon_pmu_set_retention_level</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, platform_pmu.o(i.ll_aon_pmu_set_retention_level))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_retention_voltage_set
</UL>

<P><STRONG><a name="[4f8]"></a>ll_aon_pmu_set_tx_ton_val</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, platform_pmu.o(i.ll_aon_pmu_set_tx_ton_val))
<BR><BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_pmu_init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ton_value_set
</UL>

<P><STRONG><a name="[4fd]"></a>ton_value_get_by_load_35mA_dcdc_1p05v</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, platform_pmu.o(i.ton_value_get_by_load_35mA_dcdc_1p05v))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ton_value_set
</UL>

<P><STRONG><a name="[4fb]"></a>ton_value_get_by_load_35mA_dcdc_1p15v</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, platform_pmu.o(i.ton_value_get_by_load_35mA_dcdc_1p15v))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ton_value_set
</UL>

<P><STRONG><a name="[4fe]"></a>ton_value_get_by_load_40mA_dcdc_1p05v</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, platform_pmu.o(i.ton_value_get_by_load_40mA_dcdc_1p05v))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ton_value_set
</UL>

<P><STRONG><a name="[4fc]"></a>ton_value_get_by_load_40mA_dcdc_1p15v</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, platform_pmu.o(i.ton_value_get_by_load_40mA_dcdc_1p15v))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ton_value_set
</UL>

<P><STRONG><a name="[4fa]"></a>ton_value_get_by_load_40mA_dcdc_1p25v</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, platform_pmu.o(i.ton_value_get_by_load_40mA_dcdc_1p25v))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ton_value_set
</UL>

<P><STRONG><a name="[56a]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, platform_sdk.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_boot
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_boot_first
</UL>

<P><STRONG><a name="[405]"></a>mem_low_power_auto_init</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, platform_sram.o(i.mem_low_power_auto_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mem_low_power_auto_init &rArr; mem_pwr_mgmt_trans_addr_to_section
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pwr_mgmt_trans_addr_to_section
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pwr_mgmt_mode_set
</UL>

<P><STRONG><a name="[23c]"></a>append_item</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, sdk_nvds_patch.o(i.append_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = append_item &rArr; init_used_nvds &rArr; gc_nvds &rArr; write_to_nvds &rArr; write_to_nvds_match_buffer &rArr; write_data_to_nvds &rArr; write_unwr_info
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_item
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_used_nvds
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_nvds
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_align_bytes
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_raw_log_output
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replace_item
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put_replace
</UL>

<P><STRONG><a name="[2a9]"></a>conti_read_sector</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, sdk_nvds_patch.o(i.conti_read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = conti_read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_power_loss
</UL>

<P><STRONG><a name="[2e4]"></a>find_first_del_item</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, sdk_nvds_patch.o(i.find_first_del_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = find_first_del_item
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_addr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_align_bytes
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_flash_trunc_read
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_flash_set_security
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_nvds
</UL>

<P><STRONG><a name="[23f]"></a>gc_nvds</STRONG> (Thumb, 644 bytes, Stack size 88 bytes, sdk_nvds_patch.o(i.gc_nvds))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gc_nvds &rArr; write_to_nvds &rArr; write_to_nvds_match_buffer &rArr; write_data_to_nvds &rArr; write_unwr_info
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_nvds
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_gc_match_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_del_item
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_align_bytes
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_flash_write
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_gc
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tags_cache_clean
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_flash_erase
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_used_nvds
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_item
</UL>

<P><STRONG><a name="[240]"></a>init_used_nvds</STRONG> (Thumb, 370 bytes, Stack size 64 bytes, sdk_nvds_patch.o(i.init_used_nvds))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = init_used_nvds &rArr; gc_nvds &rArr; write_to_nvds &rArr; write_to_nvds_match_buffer &rArr; write_data_to_nvds &rArr; write_unwr_info
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_power_loss
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_nvds
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_addr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_align_bytes
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_raw_log_output
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_flash_trunc_read
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_flash_set_security
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_hdr_checksum
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tags_cache_rec_add
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init_replace
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_item
</UL>

<P><STRONG><a name="[398]"></a>is_power_loss</STRONG> (Thumb, 518 bytes, Stack size 56 bytes, sdk_nvds_patch.o(i.is_power_loss))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = is_power_loss &rArr; conti_read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conti_read_sector
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_addr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_align_bytes
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_flash_trunc_read
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_used_nvds
</UL>

<P><STRONG><a name="[105]"></a>nvds_init_replace</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, sdk_nvds_patch.o(i.nvds_init_replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = nvds_init_replace &rArr; init_used_nvds &rArr; gc_nvds &rArr; write_to_nvds &rArr; write_to_nvds_match_buffer &rArr; write_data_to_nvds &rArr; write_unwr_info
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_used_nvds
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_raw_log_output
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_get_state
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_get_error
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_flash_get_security
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_flash_get_info
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_unused_nvds
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_flash_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdk_nvds_patch.o(i.nvds_replace)
</UL>
<P><STRONG><a name="[106]"></a>nvds_put_replace</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, sdk_nvds_patch.o(i.nvds_put_replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = nvds_put_replace &rArr; replace_item &rArr; append_item &rArr; init_used_nvds &rArr; gc_nvds &rArr; write_to_nvds &rArr; write_to_nvds_match_buffer &rArr; write_data_to_nvds &rArr; write_unwr_info
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replace_item
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_item
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_item_same
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_addr
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_item
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_flash_trunc_read
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_raw_log_output
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_hdr_checksum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdk_nvds_patch.o(i.nvds_replace)
</UL>
<P><STRONG><a name="[412]"></a>replace_item</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, sdk_nvds_patch.o(i.replace_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = replace_item &rArr; append_item &rArr; init_used_nvds &rArr; gc_nvds &rArr; write_to_nvds &rArr; write_to_nvds_match_buffer &rArr; write_data_to_nvds &rArr; write_unwr_info
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_item
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_align_bytes
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_flash_trunc_write
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_flash_trunc_read
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_raw_log_output
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_get_state
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_get_error
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tags_cache_rec_del
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put_replace
</UL>

<P><STRONG><a name="[50c]"></a>write_data_to_nvds</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, sdk_nvds_patch.o(i.write_data_to_nvds))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = write_data_to_nvds &rArr; write_unwr_info
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_unwr_info
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_flash_trunc_write_incr
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_flash_trunc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_nvds_match_buffer
</UL>

<P><STRONG><a name="[241]"></a>write_item</STRONG> (Thumb, 578 bytes, Stack size 104 bytes, sdk_nvds_patch.o(i.write_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_item
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_flash_trunc_write_r
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_truncated
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_align_bytes
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_value_checksum
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_hdr_checksum
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_flash_write
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_flash_trunc_write
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_raw_log_output
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_get_state
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_exflash_get_error
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tags_cache_rec_add
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_item
</UL>

<P><STRONG><a name="[326]"></a>write_to_gc_match_buffer</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, sdk_nvds_patch.o(i.write_to_gc_match_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_to_gc_match_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_gc
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_nvds
</UL>

<P><STRONG><a name="[324]"></a>write_to_nvds</STRONG> (Thumb, 626 bytes, Stack size 88 bytes, sdk_nvds_patch.o(i.write_to_nvds))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = write_to_nvds &rArr; write_to_nvds_match_buffer &rArr; write_data_to_nvds &rArr; write_unwr_info
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_unwr_info
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_nvds_match_buffer
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_align_bytes
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_flash_write
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_flash_erase
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_flash_write_incr
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_nvds
</UL>

<P><STRONG><a name="[514]"></a>write_to_nvds_match_buffer</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, sdk_nvds_patch.o(i.write_to_nvds_match_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = write_to_nvds_match_buffer &rArr; write_data_to_nvds &rArr; write_unwr_info
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_nvds
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_nvds
</UL>

<P><STRONG><a name="[50d]"></a>write_unwr_info</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, sdk_nvds_patch.o(i.write_unwr_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_unwr_info
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_align_bytes
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_nvds
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_nvds
</UL>

<P><STRONG><a name="[2c2]"></a>em_freq_table_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.em_freq_table_init))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[11f]"></a>rf_lcp_hopping_table_reinit_patch</STRONG> (Thumb, 274 bytes, Stack size 28 bytes, rf_gdx_bali_b1_patch.o(i.rf_lcp_hopping_table_reinit_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rf_lcp_hopping_table_reinit_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_gdx_bali_b1_patch.o(i.rf_lcp_api_init_patch)
</UL>
<P><STRONG><a name="[4c9]"></a>rf_lcp_sx_enable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.rf_lcp_sx_enable))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_lcp_sx_init_patch
</UL>

<P><STRONG><a name="[11e]"></a>rf_lcp_sx_init_patch</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rf_gdx_bali_b1_patch.o(i.rf_lcp_sx_init_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rf_lcp_sx_init_patch &rArr; rf_lcp_sx_tune
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_lcp_sx_tune
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_lcp_sx_reset
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_lcp_sx_output
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_lcp_sx_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_gdx_bali_b1_patch.o(i.rf_lcp_api_init_patch)
</UL>
<P><STRONG><a name="[4cb]"></a>rf_lcp_sx_output</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rf_gdx_bali_b1_patch.o(i.rf_lcp_sx_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_lcp_sx_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_lcp_sx_init_patch
</UL>

<P><STRONG><a name="[4ca]"></a>rf_lcp_sx_reset</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.rf_lcp_sx_reset))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_lcp_sx_init_patch
</UL>

<P><STRONG><a name="[117]"></a>rf_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.rf_reset))
<BR>[Address Reference Count : 1]<UL><LI> rf_gdx_bali_b1_patch.o(i.rf_api_init)
</UL>
<P><STRONG><a name="[118]"></a>rf_rssi_convert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf_gdx_bali_b1_patch.o(i.rf_rssi_convert))
<BR>[Address Reference Count : 1]<UL><LI> rf_gdx_bali_b1_patch.o(i.rf_api_init)
</UL>
<P><STRONG><a name="[270]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rwip_sleep_common.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwr_on_handler_without_stack_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_irq_clear
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_handler_without_stack_init
</UL>

<P><STRONG><a name="[577]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rwip_sleep_common.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdk_handler_without_stack_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLESLP_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>gapm_adv_check_param_func_patch</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, gapm_adv_patch.o(i.gapm_adv_check_param_func_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapm_adv_check_param_func_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_raw_log_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_adv_patch.o(i.gapm_adv_replace)
</UL>
<P><STRONG><a name="[e3]"></a>gapm_per_sync_stop_patch</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, gapm_per_sync_patch.o(i.gapm_per_sync_stop_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapm_per_sync_stop_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_send_hci_le_per_adv_term_sync_cmd
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_send_hci_le_per_adv_create_sync_cancel_cmd
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_adv_sync_trans_param_send
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_per_sync_patch.o(i.gapm_per_sync_create_patch)
</UL>
<P><STRONG><a name="[581]"></a>ll_xqspi_disable_cache</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gr55xx_ll_xqspi_patch.o(RAM_CODE))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_xqspi_init_patch
</UL>

<P><STRONG><a name="[335]"></a>ll_clk_select_source</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gr55xx_hal_clock_patch.o(i.ll_clk_select_source))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_switch_sys_clk_to_hf_osc_patch
</UL>

<P><STRONG><a name="[339]"></a>ll_efuse_is_controller_power_flag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gr55xx_hal_efuse_patch.o(i.ll_efuse_is_controller_power_flag))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_efuse_write
</UL>

<P><STRONG><a name="[52d]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[521]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[b1]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[19d]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
